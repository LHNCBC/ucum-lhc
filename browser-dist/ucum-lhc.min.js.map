{"version":3,"sources":["node_modules/browser-pack/_prelude.js","data/ucumDefs.min.json","node_modules/is-finite/index.js","node_modules/is-integer/index.js","source/config.js","source/dimension.js","source/jsonArrayPack.js","source/prefix.js","source/prefixTables.js","source/ucumFunctions.js","source/ucumInternalUtils.js","source/ucumJsonDefs.js","source/ucumLhcUtils.js","source/ucumPkg.js","source/unit.js","source/unitString.js","source/unitTables.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","ucumPkg","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","license","prefixes","config","data","units","Number","isFinite","value","Infinity","isInteger","val","Math","floor","Ucum","dimLen_","validOps_","codeSep_","valMsgStart_","valMsgEnd_","cnvMsgStart_","cnvMsgEnd_","openEmph_","closeEmph_","openEmphHTML_","closeEmphHTML_","bracesMsg_","needMoleWeightMsg_","csvCols_","case-sensitive code","LOINC property","name (display)","synonyms","source","category","Guidance","inputKey_","specUnits_","B[10.nV]","[m/s2/Hz^(1/2)]","UC","Dimension","dimSetting","_classCallCheck","undefined","assignZero","Array","concat","JSON","stringify","dimVec_","d","push","indexPos","ret","propertyName","charAt","join","dim2","_typeof","s","isEqual","dimVec2","allZero","that","assignDim","isObject","Object","prototype","toString","createConfig","refObj","keys","reduce","key","pushFn","apply","map","keyTail","_toConsumableArray","prepareConfig","isArray","packItem","item","keyArr","place","forEach","unpackItem","result","_i","packArray","arr","_config","bind","unpackArray","obj","Prefix","attrs","code_","ciCode_","name_","printSymbol_","value_","parseFloat","exp_","prefix2","PrefixTablesFactory","byCode_","byValue_","prefixBuff","pList","pLen","pfx","getPrefixByValue","prefixList","sort","getPrefixByCode","prefixObj","getCode","getValue","prefixTablesInstance","PrefixTables","getInstance","UcumFunctions","funcs","cnvTo","x","cnvFrom","log","LN10","pow","exp","LN2","tan","atan","sqrt","func","fname","toLowerCase","isNumericString","theString","num","isNaN","isIntegerUnit","str","test","getSynonyms","theSyn","retObj","utab","UnitTables","resp","getUnitBySynonym","aLen","theUnit","csCode_","name","guidance","guidance_","Pfx","PfxT","Un","Utab","UcumJsonDefs","jsonDefs","unitsCount","pTab","plen","newPref","add","uTab","ulen","newUnit","Unit","addUnit","ucumJsonDefs","_ucumJsonDefs","intUtils_","UnitString","UcumLhcUtils","loadJsonDefs","uStrParser_","use","useHTMLInMessages","useBraceMsgForEachString","uStr","suggest","valConv","getSpecifiedUnit","status","ucumCode","unit","fromUnitCode","fromVal","toUnitCode","molecularWeight","returnObj","toVal","msg","trim","fromUnit","parseResp","toUnit","moleExp_","isMoleMassCommensurable","convertMolToMass","convertMassToMol","convertFrom","err","message","uName","getUnitByCode","parseString","console","unshift","fromName","retMsg","commUnits","dimVec","fromDim","getProperty","getUnitsByDimension","_ucumFunctions","arguments","isBase_","property_","magnitude_","dim_","class_","isMetric_","variable_","cnv_","cnvPfx_","isSpecial_","isArbitrary_","synonyms_","source_","loincProperty_","category_","csUnitString_","ciUnitString_","baseFactorStr_","baseFactor_","defError_","vals","uKey","hasOwnProperty","_this","retUnit","getOwnPropertyNames","clone","unit2","_this2","equals","thisAttr","u2Attr","keyLen","match","k","newNum","isNull","fromCnv","fromMag","default","forName","f_from","convertCoherent","max","getMax","elem","getElementAt","tabs","_getUnitTables","uA","amt","molUnit","molAmt","avoNum","massUnit","mutateCoherent","mulVal","_concatStrs","isZero","invertString","sub","minus","stringRep","replace","substr","str1","operator","str2","startChar","endChar","_buildOneString","uArray","arLen","un","nun","parseInt","uLen","uChar","mul","getMassDimensionIndex","commensurable","testDim","curVal","setElementAt","_testDim","_curVal","utabs_","pfxTabs_","parensFlag_","pFlagLen_","braceFlag_","bFlagLen_","vcMsgStart_","vcMsgEnd_","retMsg_","parensUnits_","annotations_","suggestions","suggestions_","origString","_getAnnotations","sUnit","indexOf","_parseTheString","finalUnit","endProcessing","parensResp","_processParens","mkUArray","_makeUnitsArray","u1","curCode","parenUnit","_getParensUnit","uRet","_makeUnit","_performUnitArithmetic","uString","openBrace","_closeBrace","braceStr","substring","aIdx","closeBrace","uStrArray","uStrAryPos","stopProcessing","pu","trimmedCt","openCt","closeCt","openPos","closePos","theMsg","_closePos","uArray1","startNumCheck","numRes","dispVal","parensback","op","theOp","numRes2","invalidString","parensStr","_parensback","parensString","nextParens","pStr","psIdx","befText","peIdx","lastIndexOf","aftText","pNumText","nMag","assignVals","annoRet","_getAnnoText","suggestStat","_getSuggestions","_annoRet","power","_suggestStat","asIdx","startText","aeIdx","endText","idx","idxNum","suggSet","synLen","unitArray","uCode","getAnnoRet","_getUnitWithAnnotation","tryCode","addBrackets","retUnitAry","getUnitByName","mString","dupMsg","rStr","RegExp","res","origCode","origUnit","pfxCode","pfxObj","pfxVal","pfxExp","codeAndExp","_isCodeWithExponent","getExp","pCodeLen","theDim","theMag","theName","theCiCode","thePrintSymbol","expMul","theCode","getName","getCiCode","getPrintSymbol","expStr","annoText","befAnnoText","aftAnnoText","msgLen","_mkUnitRet","_templateObject","_mkUnitRet2","tryBrackets","mkUnitRet","pop","u2","nextUnit","msgString","thisOp","divide","multiplyThese","UnitTablesFactory","unitNames_","unitCodes_","codeOrder_","unitStrings_","unitDimensions_","unitSynonyms_","massDimIndex_","addUnitName","addUnitCode","addUnitString","addUnitDimension","caseSensitive_","uEntry","mag","uDim","uSyns","synsAry","split","addSynonymCodes","theSynonyms","words","wLen","w","word","sepPos","retUnits","retAry","unitsArray","uSyn","buildUnitSynonyms","foundCodes","fLen","nameList","codes","compareCodes","b","unitsList","cols","sep","unitBuff","getAllUnitNames","cLen","nameRecs","rec","cbuf","doLong","codeList","unitString","curUnit","curDim","unitTablesInstance"],"mappings":"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","file":"ucum-lhc.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\"license\":\"The following data (prefixes and units) was generated by the UCUM LHC code from the UCUM data and selected LOINC combinations of UCUM units.  The license for the UCUM LHC code (demo and library code as well as the combined units) is located at https://github.com/lhncbc/ucum-lhc/blob/LICENSE.md.\",\"prefixes\":{\"config\":[\"code_\",\"ciCode_\",\"name_\",\"printSymbol_\",\"value_\",\"exp_\"],\"data\":[[\"E\",\"EX\",\"exa\",\"E\",1000000000000000000,\"18\"],[\"G\",\"GA\",\"giga\",\"G\",1000000000,\"9\"],[\"Gi\",\"GIB\",\"gibi\",\"Gi\",1073741824,null],[\"Ki\",\"KIB\",\"kibi\",\"Ki\",1024,null],[\"M\",\"MA\",\"mega\",\"M\",1000000,\"6\"],[\"Mi\",\"MIB\",\"mebi\",\"Mi\",1048576,null],[\"P\",\"PT\",\"peta\",\"P\",1000000000000000,\"15\"],[\"T\",\"TR\",\"tera\",\"T\",1000000000000,\"12\"],[\"Ti\",\"TIB\",\"tebi\",\"Ti\",1099511627776,null],[\"Y\",\"YA\",\"yotta\",\"Y\",1e+24,\"24\"],[\"Z\",\"ZA\",\"zetta\",\"Z\",1e+21,\"21\"],[\"a\",\"A\",\"atto\",\"a\",1e-18,\"-18\"],[\"c\",\"C\",\"centi\",\"c\",0.01,\"-2\"],[\"d\",\"D\",\"deci\",\"d\",0.1,\"-1\"],[\"da\",\"DA\",\"deka\",\"da\",10,\"1\"],[\"f\",\"F\",\"femto\",\"f\",1e-15,\"-15\"],[\"h\",\"H\",\"hecto\",\"h\",100,\"2\"],[\"k\",\"K\",\"kilo\",\"k\",1000,\"3\"],[\"m\",\"M\",\"milli\",\"m\",0.001,\"-3\"],[\"n\",\"N\",\"nano\",\"n\",1e-9,\"-9\"],[\"p\",\"P\",\"pico\",\"p\",1e-12,\"-12\"],[\"u\",\"U\",\"micro\",\"μ\",0.000001,\"-6\"],[\"y\",\"YO\",\"yocto\",\"y\",1.0000000000000001e-24,\"-24\"],[\"z\",\"ZO\",\"zepto\",\"z\",1e-21,\"-21\"]]},\"units\":{\"config\":[\"isBase_\",\"name_\",\"csCode_\",\"ciCode_\",\"property_\",\"magnitude_\",[\"dim_\",\"dimVec_\"],\"printSymbol_\",\"class_\",\"isMetric_\",\"variable_\",\"cnv_\",\"cnvPfx_\",\"isSpecial_\",\"isArbitrary_\",\"moleExp_\",\"synonyms_\",\"source_\",\"loincProperty_\",\"category_\",\"guidance_\",\"csUnitString_\",\"ciUnitString_\",\"baseFactorStr_\",\"baseFactor_\",\"defError_\"],\"data\":[[true,\"meter\",\"m\",\"M\",\"length\",1,[1,0,0,0,0,0,0],\"m\",null,false,\"L\",null,1,false,false,0,\"meters; metres; distance\",\"UCUM\",\"Len\",\"Clinical\",\"unit of length = 1.09361 yards\",null,null,null,null,false],[true,\"second - time\",\"s\",\"S\",\"time\",1,[0,1,0,0,0,0,0],\"s\",null,false,\"T\",null,1,false,false,0,\"seconds\",\"UCUM\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram\",\"g\",\"G\",\"mass\",1,[0,0,1,0,0,0,0],\"g\",null,false,\"M\",null,1,false,false,0,\"grams; gm\",\"UCUM\",\"Mass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"radian\",\"rad\",\"RAD\",\"plane angle\",1,[0,0,0,1,0,0,0],\"rad\",null,false,\"A\",null,1,false,false,0,\"radians\",\"UCUM\",\"Angle\",\"Clinical\",\"unit of angular measure where 1 radian = 1/2π turn =  57.296 degrees. \",null,null,null,null,false],[true,\"degree Kelvin\",\"K\",\"K\",\"temperature\",1,[0,0,0,0,1,0,0],\"K\",null,false,\"C\",null,1,false,false,0,\"Kelvin; degrees\",\"UCUM\",\"Temp\",\"Clinical\",\"absolute, thermodynamic temperature scale \",null,null,null,null,false],[true,\"coulomb\",\"C\",\"C\",\"electric charge\",1,[0,0,0,0,0,1,0],\"C\",null,false,\"Q\",null,1,false,false,0,\"coulombs\",\"UCUM\",\"\",\"Clinical\",\"defined as amount of 1 electron charge = 6.2415093×10^18 e, and equivalent to 1 Ampere-second\",null,null,null,null,false],[true,\"candela\",\"cd\",\"CD\",\"luminous intensity\",1,[0,0,0,0,0,0,1],\"cd\",null,false,\"F\",null,1,false,false,0,\"candelas\",\"UCUM\",\"\",\"Clinical\",\"SI base unit of luminous intensity\",null,null,null,null,false],[false,\"the number ten for arbitrary powers\",\"10*\",\"10*\",\"number\",10,[0,0,0,0,0,0,0],\"10\",\"dimless\",false,null,null,1,false,false,0,\"10^; 10 to the arbitrary powers\",\"UCUM\",\"Num\",\"Clinical\",\"10* by itself is the same as 10, but users can add digits after the *. For example, 10*3 = 1000.\",\"1\",\"1\",\"10\",10,false],[false,\"the number ten for arbitrary powers\",\"10^\",\"10^\",\"number\",10,[0,0,0,0,0,0,0],\"10\",\"dimless\",false,null,null,1,false,false,0,\"10*; 10 to the arbitrary power\",\"UCUM\",\"Num\",\"Clinical\",\"10* by itself is the same as 10, but users can add digits after the *. For example, 10*3 = 1000.\",\"1\",\"1\",\"10\",10,false],[false,\"the number pi\",\"[pi]\",\"[PI]\",\"number\",3.141592653589793,[0,0,0,0,0,0,0],\"π\",\"dimless\",false,null,null,1,false,false,0,\"π\",\"UCUM\",\"\",\"Constant\",\"a mathematical constant; the ratio of a circle's circumference to its diameter ≈ 3.14159\",\"1\",\"1\",\"3.1415926535897932384626433832795028841971693993751058209749445923\",3.141592653589793,false],[false,\"\",\"%\",\"%\",\"fraction\",0.01,[0,0,0,0,0,0,0],\"%\",\"dimless\",false,null,null,1,false,false,0,\"percents\",\"UCUM\",\"FR; NFR; MFR; CFR; SFR Rto; etc. \",\"Clinical\",\"\",\"10*-2\",\"10*-2\",\"1\",1,false],[false,\"parts per thousand\",\"[ppth]\",\"[PPTH]\",\"fraction\",0.001,[0,0,0,0,0,0,0],\"ppth\",\"dimless\",false,null,null,1,false,false,0,\"ppth; 10^-3\",\"UCUM\",\"MCnc; MCnt\",\"Clinical\",\"[ppth] is often used in solution concentrations as 1 g/L or 1 g/kg.\\n\\nCan be ambigous and would be better if the metric units was used directly. \",\"10*-3\",\"10*-3\",\"1\",1,false],[false,\"parts per million\",\"[ppm]\",\"[PPM]\",\"fraction\",0.000001,[0,0,0,0,0,0,0],\"ppm\",\"dimless\",false,null,null,1,false,false,0,\"ppm; 10^-6\",\"UCUM\",\"MCnt; MCnc; SFr\",\"Clinical\",\"[ppm] is often used in solution concentrations as 1 mg/L  or 1 mg/kg. Also used to express mole fractions as 1 mmol/mol.\\n\\n[ppm] is also used in nuclear magnetic resonance (NMR) to represent chemical shift - the difference of a measured frequency in parts per million from the reference frequency.\\n\\nCan be ambigous and would be better if the metric units was used directly. \",\"10*-6\",\"10*-6\",\"1\",1,false],[false,\"parts per billion\",\"[ppb]\",\"[PPB]\",\"fraction\",1e-9,[0,0,0,0,0,0,0],\"ppb\",\"dimless\",false,null,null,1,false,false,0,\"ppb; 10^-9\",\"UCUM\",\"MCnt; MCnc; SFr\",\"Clinical\",\"[ppb] is often used in solution concentrations as 1 ug/L  or 1 ug/kg. Also used to express mole fractions as 1 umol/mol.\\n\\nCan be ambigous and would be better if the metric units was used directly. \",\"10*-9\",\"10*-9\",\"1\",1,false],[false,\"parts per trillion\",\"[pptr]\",\"[PPTR]\",\"fraction\",1e-12,[0,0,0,0,0,0,0],\"pptr\",\"dimless\",false,null,null,1,false,false,0,\"pptr; 10^-12\",\"UCUM\",\"MCnt; MCnc; SFr\",\"Clinical\",\"[pptr] is often used in solution concentrations as 1 ng/L or 1 ng/kg. Also used to express mole fractions as 1 nmol/mol.\\n\\nCan be ambigous and would be better if the metric units was used directly. \",\"10*-12\",\"10*-12\",\"1\",1,false],[false,\"mole\",\"mol\",\"MOL\",\"amount of substance\",6.0221367e+23,[0,0,0,0,0,0,0],\"mol\",\"si\",true,null,null,1,false,false,1,\"moles\",\"UCUM\",\"Sub\",\"Clinical\",\"Measure the number of molecules \",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"steradian - solid angle\",\"sr\",\"SR\",\"solid angle\",1,[0,0,0,2,0,0,0],\"sr\",\"si\",true,null,null,1,false,false,0,\"square radian; rad2; rad^2\",\"UCUM\",\"Angle\",\"Clinical\",\"unit of solid angle in three-dimensional geometry analagous to radian; used in photometry which measures the perceived brightness of object by human eye (e.g. radiant intensity = watt/steradian)\",\"rad2\",\"RAD2\",\"1\",1,false],[false,\"hertz\",\"Hz\",\"HZ\",\"frequency\",1,[0,-1,0,0,0,0,0],\"Hz\",\"si\",true,null,null,1,false,false,0,\"Herz; frequency; frequencies\",\"UCUM\",\"Freq; Num\",\"Clinical\",\"equal to one cycle per second\",\"s-1\",\"S-1\",\"1\",1,false],[false,\"newton\",\"N\",\"N\",\"force\",1000,[1,-2,1,0,0,0,0],\"N\",\"si\",true,null,null,1,false,false,0,\"Newtons\",\"UCUM\",\"Force\",\"Clinical\",\"unit of force with base units kg.m/s2\",\"kg.m/s2\",\"KG.M/S2\",\"1\",1,false],[false,\"pascal\",\"Pa\",\"PAL\",\"pressure\",1000,[-1,-2,1,0,0,0,0],\"Pa\",\"si\",true,null,null,1,false,false,0,\"pascals\",\"UCUM\",\"Pres\",\"Clinical\",\"standard unit of pressure equal to 1 newton per square meter (N/m2)\",\"N/m2\",\"N/M2\",\"1\",1,false],[false,\"joule\",\"J\",\"J\",\"energy\",1000,[2,-2,1,0,0,0,0],\"J\",\"si\",true,null,null,1,false,false,0,\"joules\",\"UCUM\",\"Enrg\",\"Clinical\",\"unit of energy defined as the work required to move an object 1 m with a force of 1 N (N.m) or an electric charge of 1 C through 1 V (C.V), or to produce 1 W for 1 s (W.s) \",\"N.m\",\"N.M\",\"1\",1,false],[false,\"watt\",\"W\",\"W\",\"power\",1000,[2,-3,1,0,0,0,0],\"W\",\"si\",true,null,null,1,false,false,0,\"watts\",\"UCUM\",\"EngRat\",\"Clinical\",\"unit of power equal to 1 Joule per second (J/s) =  kg⋅m2⋅s−3\",\"J/s\",\"J/S\",\"1\",1,false],[false,\"Ampere\",\"A\",\"A\",\"electric current\",1,[0,-1,0,0,0,1,0],\"A\",\"si\",true,null,null,1,false,false,0,\"Amperes\",\"UCUM\",\"ElpotRat\",\"Clinical\",\"unit of electric current equal to flow rate of electrons equal to 16.2415×10^18 elementary charges moving past a boundary in one second or 1 Coulomb/second\",\"C/s\",\"C/S\",\"1\",1,false],[false,\"volt\",\"V\",\"V\",\"electric potential\",1000,[2,-2,1,0,0,-1,0],\"V\",\"si\",true,null,null,1,false,false,0,\"volts\",\"UCUM\",\"Elpot\",\"Clinical\",\"unit of electric potential (voltage) = 1 Joule per Coulomb (J/C)\",\"J/C\",\"J/C\",\"1\",1,false],[false,\"farad\",\"F\",\"F\",\"electric capacitance\",0.001,[-2,2,-1,0,0,2,0],\"F\",\"si\",true,null,null,1,false,false,0,\"farads; electric capacitance\",\"UCUM\",\"\",\"Clinical\",\"CGS unit of electric capacitance with base units C/V (Coulomb per Volt)\",\"C/V\",\"C/V\",\"1\",1,false],[false,\"ohm\",\"Ohm\",\"OHM\",\"electric resistance\",1000,[2,-1,1,0,0,-2,0],\"Ω\",\"si\",true,null,null,1,false,false,0,\"Ω; resistance; ohms\",\"UCUM\",\"\",\"Clinical\",\"unit of electrical resistance with units of Volt per Ampere\",\"V/A\",\"V/A\",\"1\",1,false],[false,\"siemens\",\"S\",\"SIE\",\"electric conductance\",0.001,[-2,1,-1,0,0,2,0],\"S\",\"si\",true,null,null,1,false,false,0,\"Reciprocal ohm; mho; Ω−1; conductance\",\"UCUM\",\"\",\"Clinical\",\"unit of electric conductance (the inverse of electrical resistance) equal to ohm^-1\",\"Ohm-1\",\"OHM-1\",\"1\",1,false],[false,\"weber\",\"Wb\",\"WB\",\"magnetic flux\",1000,[2,-1,1,0,0,-1,0],\"Wb\",\"si\",true,null,null,1,false,false,0,\"magnetic flux; webers\",\"UCUM\",\"\",\"Clinical\",\"unit of magnetic flux equal to Volt second\",\"V.s\",\"V.S\",\"1\",1,false],[false,\"degree Celsius\",\"Cel\",\"CEL\",\"temperature\",1,[0,0,0,0,1,0,0],\"°C\",\"si\",true,null,\"Cel\",1,true,false,0,\"°C; degrees\",\"UCUM\",\"Temp\",\"Clinical\",\"\",\"K\",null,null,1,false],[false,\"tesla\",\"T\",\"T\",\"magnetic flux density\",1000,[0,-1,1,0,0,-1,0],\"T\",\"si\",true,null,null,1,false,false,0,\"Teslas; magnetic field\",\"UCUM\",\"\",\"Clinical\",\"SI unit of magnetic field strength for magnetic field B equal to 1 Weber/square meter =  1 kg/(s2*A)\",\"Wb/m2\",\"WB/M2\",\"1\",1,false],[false,\"henry\",\"H\",\"H\",\"inductance\",1000,[2,0,1,0,0,-2,0],\"H\",\"si\",true,null,null,1,false,false,0,\"henries; inductance\",\"UCUM\",\"\",\"Clinical\",\"unit of electrical inductance; usually expressed in millihenrys (mH) or microhenrys (uH).\",\"Wb/A\",\"WB/A\",\"1\",1,false],[false,\"lumen\",\"lm\",\"LM\",\"luminous flux\",1,[0,0,0,2,0,0,1],\"lm\",\"si\",true,null,null,1,false,false,0,\"luminous flux; lumens\",\"UCUM\",\"\",\"Clinical\",\"unit of luminous flux defined as 1 lm = 1 cd⋅sr (candela times sphere)\",\"cd.sr\",\"CD.SR\",\"1\",1,false],[false,\"lux\",\"lx\",\"LX\",\"illuminance\",1,[-2,0,0,2,0,0,1],\"lx\",\"si\",true,null,null,1,false,false,0,\"illuminance; luxes\",\"UCUM\",\"\",\"Clinical\",\"unit of illuminance equal to one lumen per square meter. \",\"lm/m2\",\"LM/M2\",\"1\",1,false],[false,\"becquerel\",\"Bq\",\"BQ\",\"radioactivity\",1,[0,-1,0,0,0,0,0],\"Bq\",\"si\",true,null,null,1,false,false,0,\"activity; radiation; becquerels\",\"UCUM\",\"\",\"Clinical\",\"measure of the atomic radiation rate with units s^-1\",\"s-1\",\"S-1\",\"1\",1,false],[false,\"gray\",\"Gy\",\"GY\",\"energy dose\",1,[2,-2,0,0,0,0,0],\"Gy\",\"si\",true,null,null,1,false,false,0,\"absorbed doses; ionizing radiation doses; kerma; grays\",\"UCUM\",\"EngCnt\",\"Clinical\",\"unit of ionizing radiation dose with base units of 1 joule of radiation energy per kilogram of matter\",\"J/kg\",\"J/KG\",\"1\",1,false],[false,\"sievert\",\"Sv\",\"SV\",\"dose equivalent\",1,[2,-2,0,0,0,0,0],\"Sv\",\"si\",true,null,null,1,false,false,0,\"sieverts; radiation dose quantities; equivalent doses; effective dose; operational dose; committed dose\",\"UCUM\",\"\",\"Clinical\",\"SI unit for radiation dose equivalent equal to 1 Joule/kilogram.\",\"J/kg\",\"J/KG\",\"1\",1,false],[false,\"degree - plane angle\",\"deg\",\"DEG\",\"plane angle\",0.017453292519943295,[0,0,0,1,0,0,0],\"°\",\"iso1000\",false,null,null,1,false,false,0,\"°; degree of arc; arc degree; arcdegree; angle\",\"UCUM\",\"Angle\",\"Clinical\",\"one degree is equivalent to π/180 radians.\",\"[pi].rad/360\",\"[PI].RAD/360\",\"2\",2,false],[false,\"gon\",\"gon\",\"GON\",\"plane angle\",0.015707963267948967,[0,0,0,1,0,0,0],\"□<sup>g</sup>\",\"iso1000\",false,null,null,1,false,false,0,\"gon (grade); gons\",\"UCUM\",\"Angle\",\"Nonclinical\",\"unit of plane angle measurement equal to 1/400 circle\",\"deg\",\"DEG\",\"0.9\",0.9,false],[false,\"arc minute\",\"'\",\"'\",\"plane angle\",0.0002908882086657216,[0,0,0,1,0,0,0],\"'\",\"iso1000\",false,null,null,1,false,false,0,\"arcminutes; arcmin; arc minutes; arc mins\",\"UCUM\",\"Angle\",\"Clinical\",\"equal to 1/60 degree; used in optometry and opthamology (e.g. visual acuity tests)\",\"deg/60\",\"DEG/60\",\"1\",1,false],[false,\"arc second\",\"''\",\"''\",\"plane angle\",0.00000484813681109536,[0,0,0,1,0,0,0],\"''\",\"iso1000\",false,null,null,1,false,false,0,\"arcseconds; arcsecs\",\"UCUM\",\"Angle\",\"Clinical\",\"equal to 1/60 arcminute = 1/3600 degree; used in optometry and opthamology (e.g. visual acuity tests)\",\"'/60\",\"'/60\",\"1\",1,false],[false,\"Liters\",\"l\",\"L\",\"volume\",0.001,[3,0,0,0,0,0,0],\"l\",\"iso1000\",true,null,null,1,false,false,0,\"cubic decimeters; decimeters cubed; decimetres; dm3; dm^3; litres; liters, LT \",\"UCUM\",\"Vol\",\"Clinical\",\"Because lower case \\\"l\\\" can be read as the number \\\"1\\\", though this is a valid UCUM units. UCUM strongly reccomends using  \\\"L\\\"\",\"dm3\",\"DM3\",\"1\",1,false],[false,\"Liters\",\"L\",\"L\",\"volume\",0.001,[3,0,0,0,0,0,0],\"L\",\"iso1000\",true,null,null,1,false,false,0,\"cubic decimeters; decimeters cubed; decimetres; dm3; dm^3; litres; liters, LT \",\"UCUM\",\"Vol\",\"Clinical\",\"Because lower case \\\"l\\\" can be read as the number \\\"1\\\", though this is a valid UCUM units. UCUM strongly reccomends using  \\\"L\\\"\",\"l\",null,\"1\",1,false],[false,\"are\",\"ar\",\"AR\",\"area\",100,[2,0,0,0,0,0,0],\"a\",\"iso1000\",true,null,null,1,false,false,0,\"100 m2; 100 m^2; 100 square meter; meters squared; metres\",\"UCUM\",\"Area\",\"Clinical\",\"metric base unit for area defined as 100 m^2\",\"m2\",\"M2\",\"100\",100,false],[false,\"minute\",\"min\",\"MIN\",\"time\",60,[0,1,0,0,0,0,0],\"min\",\"iso1000\",false,null,null,1,false,false,0,\"minutes\",\"UCUM\",\"Time\",\"Clinical\",\"\",\"s\",\"S\",\"60\",60,false],[false,\"hour\",\"h\",\"HR\",\"time\",3600,[0,1,0,0,0,0,0],\"h\",\"iso1000\",false,null,null,1,false,false,0,\"hours; hrs; age\",\"UCUM\",\"Time\",\"Clinical\",\"\",\"min\",\"MIN\",\"60\",60,false],[false,\"day\",\"d\",\"D\",\"time\",86400,[0,1,0,0,0,0,0],\"d\",\"iso1000\",false,null,null,1,false,false,0,\"days; age; dy; 24 hours; 24 hrs\",\"UCUM\",\"Time\",\"Clinical\",\"\",\"h\",\"HR\",\"24\",24,false],[false,\"tropical year\",\"a_t\",\"ANN_T\",\"time\",31556925.216,[0,1,0,0,0,0,0],\"a<sub>t</sub>\",\"iso1000\",false,null,null,1,false,false,0,\"solar years; a tropical; years\",\"UCUM\",\"Time\",\"Clinical\",\"has an average of 365.242181 days but is constantly changing.\",\"d\",\"D\",\"365.24219\",365.24219,false],[false,\"mean Julian year\",\"a_j\",\"ANN_J\",\"time\",31557600,[0,1,0,0,0,0,0],\"a<sub>j</sub>\",\"iso1000\",false,null,null,1,false,false,0,\"mean Julian yr; a julian; years\",\"UCUM\",\"Time\",\"Clinical\",\"has an average of 365.25 days, and in everyday use, has been replaced by the Gregorian year. However, this unit is used in astronomy to calculate light year. \",\"d\",\"D\",\"365.25\",365.25,false],[false,\"mean Gregorian year\",\"a_g\",\"ANN_G\",\"time\",31556952,[0,1,0,0,0,0,0],\"a<sub>g</sub>\",\"iso1000\",false,null,null,1,false,false,0,\"mean Gregorian yr; a gregorian; years\",\"UCUM\",\"Time\",\"Clinical\",\"has an average of 365.2425 days and is the most internationally used civil calendar.\",\"d\",\"D\",\"365.2425\",365.2425,false],[false,\"year\",\"a\",\"ANN\",\"time\",31557600,[0,1,0,0,0,0,0],\"a\",\"iso1000\",false,null,null,1,false,false,0,\"years; a; yr, yrs; annum\",\"UCUM\",\"Time\",\"Clinical\",\"\",\"a_j\",\"ANN_J\",\"1\",1,false],[false,\"week\",\"wk\",\"WK\",\"time\",604800,[0,1,0,0,0,0,0],\"wk\",\"iso1000\",false,null,null,1,false,false,0,\"weeks; wks\",\"UCUM\",\"Time\",\"Clinical\",\"\",\"d\",\"D\",\"7\",7,false],[false,\"synodal month\",\"mo_s\",\"MO_S\",\"time\",2551442.976,[0,1,0,0,0,0,0],\"mo<sub>s</sub>\",\"iso1000\",false,null,null,1,false,false,0,\"Moon; synodic month; lunar month; mo-s; mo s; months; moons\",\"UCUM\",\"Time\",\"Nonclinical\",\"has an average of 29.53 days per month, unit used in astronomy\",\"d\",\"D\",\"29.53059\",29.53059,false],[false,\"mean Julian month\",\"mo_j\",\"MO_J\",\"time\",2629800,[0,1,0,0,0,0,0],\"mo<sub>j</sub>\",\"iso1000\",false,null,null,1,false,false,0,\"mo-julian; mo Julian; months\",\"UCUM\",\"Time\",\"Clinical\",\"has an average of 30.435 days per month\",\"a_j/12\",\"ANN_J/12\",\"1\",1,false],[false,\"mean Gregorian month\",\"mo_g\",\"MO_G\",\"time\",2629746,[0,1,0,0,0,0,0],\"mo<sub>g</sub>\",\"iso1000\",false,null,null,1,false,false,0,\"months; month-gregorian; mo-gregorian\",\"UCUM\",\"Time\",\"Clinical\",\"has an average 30.436875 days per month and is from the most internationally used civil calendar.\",\"a_g/12\",\"ANN_G/12\",\"1\",1,false],[false,\"month\",\"mo\",\"MO\",\"time\",2629800,[0,1,0,0,0,0,0],\"mo\",\"iso1000\",false,null,null,1,false,false,0,\"months; duration\",\"UCUM\",\"Time\",\"Clinical\",\"based on Julian calendar which has an average of 30.435 days per month (this unit is used in astronomy but not in everyday life - see mo_g)\",\"mo_j\",\"MO_J\",\"1\",1,false],[false,\"metric ton\",\"t\",\"TNE\",\"mass\",1000000,[0,0,1,0,0,0,0],\"t\",\"iso1000\",true,null,null,1,false,false,0,\"tonnes; megagrams; tons\",\"UCUM\",\"Mass\",\"Nonclinical\",\"equal to 1000 kg used in the US (recognized by NIST as metric ton), and internationally (recognized as tonne)\",\"kg\",\"KG\",\"1e3\",1000,false],[false,\"bar\",\"bar\",\"BAR\",\"pressure\",100000000,[-1,-2,1,0,0,0,0],\"bar\",\"iso1000\",true,null,null,1,false,false,0,\"bars\",\"UCUM\",\"Pres\",\"Nonclinical\",\"unit of pressure equal to 10^5 Pascals, primarily used by meteorologists and in weather forecasting\",\"Pa\",\"PAL\",\"1e5\",100000,false],[false,\"unified atomic mass unit\",\"u\",\"AMU\",\"mass\",1.6605402e-24,[0,0,1,0,0,0,0],\"u\",\"iso1000\",true,null,null,1,false,false,0,\"unified atomic mass units; amu; Dalton; Da\",\"UCUM\",\"Mass\",\"Clinical\",\"the mass of 1/12 of an unbound Carbon-12 atom nuclide equal to 1.6606x10^-27 kg \",\"g\",\"G\",\"1.6605402e-24\",1.6605402e-24,false],[false,\"astronomic unit\",\"AU\",\"ASU\",\"length\",149597870691,[1,0,0,0,0,0,0],\"AU\",\"iso1000\",false,null,null,1,false,false,0,\"AU; units\",\"UCUM\",\"Len\",\"Clinical\",\"unit of length used in astronomy for measuring distance in Solar system\",\"Mm\",\"MAM\",\"149597.870691\",149597.870691,false],[false,\"parsec\",\"pc\",\"PRS\",\"length\",30856780000000000,[1,0,0,0,0,0,0],\"pc\",\"iso1000\",true,null,null,1,false,false,0,\"parsecs\",\"UCUM\",\"Len\",\"Clinical\",\"unit of length equal to 3.26 light years, nad used to measure large distances to objects outside our Solar System\",\"m\",\"M\",\"3.085678e16\",30856780000000000,false],[false,\"velocity of light in a vacuum\",\"[c]\",\"[C]\",\"velocity\",299792458,[1,-1,0,0,0,0,0],\"<i>c</i>\",\"const\",true,null,null,1,false,false,0,\"speed of light\",\"UCUM\",\"Vel\",\"Constant\",\"equal to 299792458 m/s (approximately 3 x 10^8 m/s)\",\"m/s\",\"M/S\",\"299792458\",299792458,false],[false,\"Planck constant\",\"[h]\",\"[H]\",\"action\",6.6260755e-31,[2,-1,1,0,0,0,0],\"<i>h</i>\",\"const\",true,null,null,1,false,false,0,\"Planck's constant\",\"UCUM\",\"\",\"Constant\",\"constant = 6.62607004 × 10-34 m2.kg/s; defined as quantum of action\",\"J.s\",\"J.S\",\"6.6260755e-34\",6.6260755e-34,false],[false,\"Boltzmann constant\",\"[k]\",\"[K]\",\"(unclassified)\",1.380658e-20,[2,-2,1,0,-1,0,0],\"<i>k</i>\",\"const\",true,null,null,1,false,false,0,\"k; kB\",\"UCUM\",\"\",\"Constant\",\"physical constant relating energy at the individual particle level with temperature = 1.38064852 ×10^−23 J/K\",\"J/K\",\"J/K\",\"1.380658e-23\",1.380658e-23,false],[false,\"permittivity of vacuum - electric\",\"[eps_0]\",\"[EPS_0]\",\"electric permittivity\",8.854187817000001e-15,[-3,2,-1,0,0,2,0],\"<i>ε<sub><r>0</r></sub></i>\",\"const\",true,null,null,1,false,false,0,\"ε0; Electric Constant; vacuum permittivity; permittivity of free space \",\"UCUM\",\"\",\"Constant\",\"approximately equal to 8.854 × 10^−12 F/m (farads per meter)\",\"F/m\",\"F/M\",\"8.854187817e-12\",8.854187817e-12,false],[false,\"permeability of vacuum - magnetic\",\"[mu_0]\",\"[MU_0]\",\"magnetic permeability\",0.0012566370614359172,[1,0,1,0,0,-2,0],\"<i>μ<sub><r>0</r></sub></i>\",\"const\",true,null,null,1,false,false,0,\"μ0; vacuum permeability; permeability of free space; magnetic constant\",\"UCUM\",\"\",\"Constant\",\"equal to 4π×10^−7 N/A2 (Newtons per square ampere) ≈ 1.2566×10^−6 H/m (Henry per meter)\",\"N/A2\",\"4.[PI].10*-7.N/A2\",\"1\",0.0000012566370614359173,false],[false,\"elementary charge\",\"[e]\",\"[E]\",\"electric charge\",1.60217733e-19,[0,0,0,0,0,1,0],\"<i>e</i>\",\"const\",true,null,null,1,false,false,0,\"e; q; electric charges\",\"UCUM\",\"\",\"Constant\",\"the magnitude of the electric charge carried by a single electron or proton ≈ 1.60217×10^-19 Coulombs\",\"C\",\"C\",\"1.60217733e-19\",1.60217733e-19,false],[false,\"electronvolt\",\"eV\",\"EV\",\"energy\",1.60217733e-16,[2,-2,1,0,0,0,0],\"eV\",\"iso1000\",true,null,null,1,false,false,0,\"Electron Volts; electronvolts\",\"UCUM\",\"Eng\",\"Clinical\",\"unit of kinetic energy = 1 V * 1.602×10^−19 C = 1.6×10−19 Joules\",\"[e].V\",\"[E].V\",\"1\",1,false],[false,\"electron mass\",\"[m_e]\",\"[M_E]\",\"mass\",9.1093897e-28,[0,0,1,0,0,0,0],\"<i>m<sub><r>e</r></sub></i>\",\"const\",true,null,null,1,false,false,0,\"electron rest mass; me\",\"UCUM\",\"Mass\",\"Constant\",\"approximately equal to 9.10938356 × 10-31 kg; defined as the mass of a stationary electron\",\"g\",\"g\",\"9.1093897e-28\",9.1093897e-28,false],[false,\"proton mass\",\"[m_p]\",\"[M_P]\",\"mass\",1.6726231e-24,[0,0,1,0,0,0,0],\"<i>m<sub><r>p</r></sub></i>\",\"const\",true,null,null,1,false,false,0,\"mp; masses\",\"UCUM\",\"Mass\",\"Constant\",\"approximately equal to 1.672622×10−27 kg\",\"g\",\"g\",\"1.6726231e-24\",1.6726231e-24,false],[false,\"Newtonian constant of gravitation\",\"[G]\",\"[GC]\",\"(unclassified)\",6.67259e-14,[3,-2,-1,0,0,0,0],\"<i>G</i>\",\"const\",true,null,null,1,false,false,0,\"G; gravitational constant; Newton's constant\",\"UCUM\",\"\",\"Constant\",\"gravitational constant = 6.674×10−11 N⋅m2/kg2\",\"m3.kg-1.s-2\",\"M3.KG-1.S-2\",\"6.67259e-11\",6.67259e-11,false],[false,\"standard acceleration of free fall\",\"[g]\",\"[G]\",\"acceleration\",9.80665,[1,-2,0,0,0,0,0],\"<i>g<sub>n</sub></i>\",\"const\",true,null,null,1,false,false,0,\"standard gravity; g; ɡ0; ɡn\",\"UCUM\",\"Accel\",\"Constant\",\"defined by standard = 9.80665 m/s2\",\"m/s2\",\"M/S2\",\"980665e-5\",9.80665,false],[false,\"Torr\",\"Torr\",\"Torr\",\"pressure\",133322,[-1,-2,1,0,0,0,0],\"Torr\",\"const\",false,null,null,1,false,false,0,\"torrs\",\"UCUM\",\"Pres\",\"Clinical\",\"1 torr = 1 mmHg; unit used to measure blood pressure\",\"Pa\",\"PAL\",\"133.322\",133.322,false],[false,\"standard atmosphere\",\"atm\",\"ATM\",\"pressure\",101325000,[-1,-2,1,0,0,0,0],\"atm\",\"const\",false,null,null,1,false,false,0,\"reference pressure; atmos; std atmosphere\",\"UCUM\",\"Pres\",\"Clinical\",\"defined as being precisely equal to 101,325 Pa\",\"Pa\",\"PAL\",\"101325\",101325,false],[false,\"light-year\",\"[ly]\",\"[LY]\",\"length\",9460730472580800,[1,0,0,0,0,0,0],\"l.y.\",\"const\",true,null,null,1,false,false,0,\"light years; ly\",\"UCUM\",\"Len\",\"Constant\",\"unit of astronomal distance = 5.88×10^12 mi\",\"[c].a_j\",\"[C].ANN_J\",\"1\",1,false],[false,\"gram-force\",\"gf\",\"GF\",\"force\",9.80665,[1,-2,1,0,0,0,0],\"gf\",\"const\",true,null,null,1,false,false,0,\"Newtons; gram forces\",\"UCUM\",\"Force\",\"Clinical\",\"May be specific to unit related to cardiac output\",\"g.[g]\",\"G.[G]\",\"1\",1,false],[false,\"Kayser\",\"Ky\",\"KY\",\"lineic number\",100,[-1,0,0,0,0,0,0],\"K\",\"cgs\",true,null,null,1,false,false,0,\"wavenumbers; kaysers\",\"UCUM\",\"InvLen\",\"Clinical\",\"unit of wavelength equal to cm^-1\",\"cm-1\",\"CM-1\",\"1\",1,false],[false,\"Gal\",\"Gal\",\"GL\",\"acceleration\",0.01,[1,-2,0,0,0,0,0],\"Gal\",\"cgs\",true,null,null,1,false,false,0,\"galileos; Gals\",\"UCUM\",\"Accel\",\"Clinical\",\"unit of acceleration used in gravimetry; equivalent to cm/s2 \",\"cm/s2\",\"CM/S2\",\"1\",1,false],[false,\"dyne\",\"dyn\",\"DYN\",\"force\",0.01,[1,-2,1,0,0,0,0],\"dyn\",\"cgs\",true,null,null,1,false,false,0,\"dynes\",\"UCUM\",\"Force\",\"Clinical\",\"unit of force equal to 10^-5 Newtons\",\"g.cm/s2\",\"G.CM/S2\",\"1\",1,false],[false,\"erg\",\"erg\",\"ERG\",\"energy\",0.0001,[2,-2,1,0,0,0,0],\"erg\",\"cgs\",true,null,null,1,false,false,0,\"10^-7 Joules, 10-7 Joules; 100 nJ; 100 nanoJoules; 1 dyne cm; 1 g.cm2/s2\",\"UCUM\",\"Eng\",\"Clinical\",\"unit of energy = 1 dyne centimeter = 10^-7 Joules\",\"dyn.cm\",\"DYN.CM\",\"1\",1,false],[false,\"Poise\",\"P\",\"P\",\"dynamic viscosity\",100,[-1,-1,1,0,0,0,0],\"P\",\"cgs\",true,null,null,1,false,false,0,\"dynamic viscosity; poises\",\"UCUM\",\"Visc\",\"Clinical\",\"unit of dynamic viscosity where 1 Poise = 1/10 Pascal second\",\"dyn.s/cm2\",\"DYN.S/CM2\",\"1\",1,false],[false,\"Biot\",\"Bi\",\"BI\",\"electric current\",10,[0,-1,0,0,0,1,0],\"Bi\",\"cgs\",true,null,null,1,false,false,0,\"Bi; abamperes; abA\",\"UCUM\",\"ElpotRat\",\"Clinical\",\"equal to 10 amperes\",\"A\",\"A\",\"10\",10,false],[false,\"Stokes\",\"St\",\"ST\",\"kinematic viscosity\",0.0001,[2,-1,0,0,0,0,0],\"St\",\"cgs\",true,null,null,1,false,false,0,\"kinematic viscosity\",\"UCUM\",\"Visc\",\"Clinical\",\"unit of kimematic viscosity with units cm2/s\",\"cm2/s\",\"CM2/S\",\"1\",1,false],[false,\"Maxwell\",\"Mx\",\"MX\",\"flux of magnetic induction\",0.00001,[2,-1,1,0,0,-1,0],\"Mx\",\"cgs\",true,null,null,1,false,false,0,\"magnetix flux; Maxwells\",\"UCUM\",\"\",\"Clinical\",\"unit of magnetic flux\",\"Wb\",\"WB\",\"1e-8\",1e-8,false],[false,\"Gauss\",\"G\",\"GS\",\"magnetic flux density\",0.1,[0,-1,1,0,0,-1,0],\"Gs\",\"cgs\",true,null,null,1,false,false,0,\"magnetic fields; magnetic flux density; induction; B\",\"UCUM\",\"magnetic\",\"Clinical\",\"CGS unit of magnetic flux density, known as magnetic field B; defined as one maxwell unit per square centimeter (see Oersted for CGS unit for H field)\",\"T\",\"T\",\"1e-4\",0.0001,false],[false,\"Oersted\",\"Oe\",\"OE\",\"magnetic field intensity\",79.57747154594767,[-1,-1,0,0,0,1,0],\"Oe\",\"cgs\",true,null,null,1,false,false,0,\"H magnetic B field; Oersteds\",\"UCUM\",\"\",\"Clinical\",\"CGS unit of the auxiliary magnetic field H defined as 1 dyne per unit pole = 1000/4π amperes per meter (see Gauss for CGS unit for B field)\",\"A/m\",\"/[PI].A/M\",\"250\",79.57747154594767,false],[false,\"Gilbert\",\"Gb\",\"GB\",\"magnetic tension\",0.7957747154594768,[0,-1,0,0,0,1,0],\"Gb\",\"cgs\",true,null,null,1,false,false,0,\"Gi; magnetomotive force; Gilberts\",\"UCUM\",\"\",\"Clinical\",\"unit of magnetomotive force (magnetic potential)\",\"Oe.cm\",\"OE.CM\",\"1\",1,false],[false,\"stilb\",\"sb\",\"SB\",\"lum. intensity density\",10000,[-2,0,0,0,0,0,1],\"sb\",\"cgs\",true,null,null,1,false,false,0,\"stilbs\",\"UCUM\",\"\",\"Obsolete\",\"unit of luminance; equal to and replaced by unit candela per square centimeter (cd/cm2)\",\"cd/cm2\",\"CD/CM2\",\"1\",1,false],[false,\"Lambert\",\"Lmb\",\"LMB\",\"brightness\",3183.098861837907,[-2,0,0,0,0,0,1],\"L\",\"cgs\",true,null,null,1,false,false,0,\"luminance; lamberts\",\"UCUM\",\"\",\"Clinical\",\"unit of luminance defined as 1 lambert = 1/ π candela per square meter\",\"cd/cm2/[pi]\",\"CD/CM2/[PI]\",\"1\",1,false],[false,\"phot\",\"ph\",\"PHT\",\"illuminance\",0.0001,[-2,0,0,2,0,0,1],\"ph\",\"cgs\",true,null,null,1,false,false,0,\"phots\",\"UCUM\",\"\",\"Clinical\",\"CGS photometric unit of illuminance, or luminous flux through an area equal to 10000 lumens per square meter = 10000 lux\",\"lx\",\"LX\",\"1e-4\",0.0001,false],[false,\"Curie\",\"Ci\",\"CI\",\"radioactivity\",37000000000,[0,-1,0,0,0,0,0],\"Ci\",\"cgs\",true,null,null,1,false,false,0,\"curies\",\"UCUM\",\"\",\"Obsolete\",\"unit for measuring atomic disintegration rate; replaced by the Bequerel (Bq) unit\",\"Bq\",\"BQ\",\"37e9\",37000000000,false],[false,\"Roentgen\",\"R\",\"ROE\",\"ion dose\",2.58e-7,[0,0,-1,0,0,1,0],\"R\",\"cgs\",true,null,null,1,false,false,0,\"röntgen; Roentgens\",\"UCUM\",\"\",\"Clinical\",\"unit of exposure of X-rays and gamma rays in air; unit used primarily in the US but strongly discouraged by NIST\",\"C/kg\",\"C/KG\",\"2.58e-4\",0.000258,false],[false,\"radiation absorbed dose\",\"RAD\",\"[RAD]\",\"energy dose\",0.01,[2,-2,0,0,0,0,0],\"RAD\",\"cgs\",true,null,null,1,false,false,0,\"doses\",\"UCUM\",\"\",\"Clinical\",\"unit of radiation absorbed dose used primarily in the US with base units 100 ergs per gram of material. Also see the SI unit Gray (Gy).\",\"erg/g\",\"ERG/G\",\"100\",100,false],[false,\"radiation equivalent man\",\"REM\",\"[REM]\",\"dose equivalent\",0.01,[2,-2,0,0,0,0,0],\"REM\",\"cgs\",true,null,null,1,false,false,0,\"Roentgen Equivalent in Man; rems; dose equivalents\",\"UCUM\",\"\",\"Clinical\",\"unit of equivalent dose which measures the effect of radiation on humans equal to 0.01 sievert. Used primarily in the US. Also see SI unit Sievert (Sv)\",\"RAD\",\"[RAD]\",\"1\",1,false],[false,\"inch\",\"[in_i]\",\"[IN_I]\",\"length\",0.025400000000000002,[1,0,0,0,0,0,0],\"in\",\"intcust\",false,null,null,1,false,false,0,\"inches; in; international inch; body height\",\"UCUM\",\"Len\",\"Clinical\",\"standard unit for inch in the US and internationally\",\"cm\",\"CM\",\"254e-2\",2.54,false],[false,\"foot\",\"[ft_i]\",\"[FT_I]\",\"length\",0.3048,[1,0,0,0,0,0,0],\"ft\",\"intcust\",false,null,null,1,false,false,0,\"ft; fts; foot; international foot; feet; international feet; height\",\"UCUM\",\"Len\",\"Clinical\",\"unit used in the US and internationally\",\"[in_i]\",\"[IN_I]\",\"12\",12,false],[false,\"yard\",\"[yd_i]\",\"[YD_I]\",\"length\",0.9144000000000001,[1,0,0,0,0,0,0],\"yd\",\"intcust\",false,null,null,1,false,false,0,\"international yards; yds; distance\",\"UCUM\",\"Len\",\"Clinical\",\"standard unit used in the US and internationally\",\"[ft_i]\",\"[FT_I]\",\"3\",3,false],[false,\"mile\",\"[mi_i]\",\"[MI_I]\",\"length\",1609.344,[1,0,0,0,0,0,0],\"mi\",\"intcust\",false,null,null,1,false,false,0,\"international miles; mi I; statute mile\",\"UCUM\",\"Len\",\"Clinical\",\"standard unit used in the US and internationally\",\"[ft_i]\",\"[FT_I]\",\"5280\",5280,false],[false,\"fathom\",\"[fth_i]\",\"[FTH_I]\",\"depth of water\",1.8288000000000002,[1,0,0,0,0,0,0],\"fth\",\"intcust\",false,null,null,1,false,false,0,\"international fathoms\",\"UCUM\",\"Len\",\"Nonclinical\",\"unit used in the US and internationally to measure depth of water; same length as the US fathom\",\"[ft_i]\",\"[FT_I]\",\"6\",6,false],[false,\"nautical mile\",\"[nmi_i]\",\"[NMI_I]\",\"length\",1852,[1,0,0,0,0,0,0],\"n.mi\",\"intcust\",false,null,null,1,false,false,0,\"nautical mile; nautical miles; international nautical mile; international nautical miles; nm; n.m.; nmi\",\"UCUM\",\"Len\",\"Nonclinical\",\"standard unit used in the US and internationally\",\"m\",\"M\",\"1852\",1852,false],[false,\"knot\",\"[kn_i]\",\"[KN_I]\",\"velocity\",0.5144444444444445,[1,-1,0,0,0,0,0],\"knot\",\"intcust\",false,null,null,1,false,false,0,\"kn; kt; international knots\",\"UCUM\",\"Vel\",\"Nonclinical\",\"defined as equal to one nautical mile (1.852 km) per hour\",\"[nmi_i]/h\",\"[NMI_I]/H\",\"1\",1,false],[false,\"square inch\",\"[sin_i]\",\"[SIN_I]\",\"area\",0.0006451600000000001,[2,0,0,0,0,0,0],null,\"intcust\",false,null,null,1,false,false,0,\"in2; in^2; inches squared; sq inch; inches squared; international\",\"UCUM\",\"Area\",\"Clinical\",\"standard unit used in the US and internationally\",\"[in_i]2\",\"[IN_I]2\",\"1\",1,false],[false,\"square foot\",\"[sft_i]\",\"[SFT_I]\",\"area\",0.09290304,[2,0,0,0,0,0,0],null,\"intcust\",false,null,null,1,false,false,0,\"ft2; ft^2; ft squared; sq ft; feet; international\",\"UCUM\",\"Area\",\"Clinical\",\"standard unit used in the US and internationally\",\"[ft_i]2\",\"[FT_I]2\",\"1\",1,false],[false,\"square yard\",\"[syd_i]\",\"[SYD_I]\",\"area\",0.8361273600000002,[2,0,0,0,0,0,0],null,\"intcust\",false,null,null,1,false,false,0,\"yd2; yd^2; sq. yds; yards squared; international\",\"UCUM\",\"Area\",\"Clinical\",\"standard unit used in the US and internationally\",\"[yd_i]2\",\"[YD_I]2\",\"1\",1,false],[false,\"cubic inch\",\"[cin_i]\",\"[CIN_I]\",\"volume\",0.000016387064000000003,[3,0,0,0,0,0,0],null,\"intcust\",false,null,null,1,false,false,0,\"in3; in^3; in*3; inches^3; inches*3; cu. in; cu in; cubic inches; inches cubed; cin\",\"UCUM\",\"Vol\",\"Clinical\",\"standard unit used in the US and internationally\",\"[in_i]3\",\"[IN_I]3\",\"1\",1,false],[false,\"cubic foot\",\"[cft_i]\",\"[CFT_I]\",\"volume\",0.028316846592000004,[3,0,0,0,0,0,0],null,\"intcust\",false,null,null,1,false,false,0,\"ft3; ft^3; ft*3; cu. ft; cubic feet; cubed; [ft_i]3; international\",\"UCUM\",\"Vol\",\"Clinical\",\"\",\"[ft_i]3\",\"[FT_I]3\",\"1\",1,false],[false,\"cubic yard\",\"[cyd_i]\",\"[CYD_I]\",\"volume\",0.7645548579840002,[3,0,0,0,0,0,0],\"cu.yd\",\"intcust\",false,null,null,1,false,false,0,\"cubic yards; cubic yds; cu yards; CYs; yards^3; yd^3; yds^3; yd3; yds3\",\"UCUM\",\"Vol\",\"Nonclinical\",\"standard unit used in the US and internationally\",\"[yd_i]3\",\"[YD_I]3\",\"1\",1,false],[false,\"board foot\",\"[bf_i]\",\"[BF_I]\",\"volume\",0.002359737216,[3,0,0,0,0,0,0],null,\"intcust\",false,null,null,1,false,false,0,\"BDFT; FBM; BF; board feet; international\",\"UCUM\",\"Vol\",\"Nonclinical\",\"unit of volume used to measure lumber\",\"[in_i]3\",\"[IN_I]3\",\"144\",144,false],[false,\"cord\",\"[cr_i]\",\"[CR_I]\",\"volume\",3.6245563637760005,[3,0,0,0,0,0,0],null,\"intcust\",false,null,null,1,false,false,0,\"crd I; international cords\",\"UCUM\",\"Vol\",\"Nonclinical\",\"unit of measure of dry volume used to measure firewood equal 128 ft3\",\"[ft_i]3\",\"[FT_I]3\",\"128\",128,false],[false,\"mil\",\"[mil_i]\",\"[MIL_I]\",\"length\",0.000025400000000000004,[1,0,0,0,0,0,0],\"mil\",\"intcust\",false,null,null,1,false,false,0,\"thou, thousandth; mils; international\",\"UCUM\",\"Len\",\"Clinical\",\"equal to 0.001 international inch\",\"[in_i]\",\"[IN_I]\",\"1e-3\",0.001,false],[false,\"circular mil\",\"[cml_i]\",\"[CML_I]\",\"area\",5.067074790974979e-10,[2,0,0,0,0,0,0],\"circ.mil\",\"intcust\",false,null,null,1,false,false,0,\"circular mils; cml I; international\",\"UCUM\",\"Area\",\"Clinical\",\"\",\"[pi]/4.[mil_i]2\",\"[PI]/4.[MIL_I]2\",\"1\",1,false],[false,\"hand\",\"[hd_i]\",\"[HD_I]\",\"height of horses\",0.10160000000000001,[1,0,0,0,0,0,0],\"hd\",\"intcust\",false,null,null,1,false,false,0,\"hands; international\",\"UCUM\",\"Len\",\"Nonclinical\",\"used to measure horse height\",\"[in_i]\",\"[IN_I]\",\"4\",4,false],[false,\"foot - US\",\"[ft_us]\",\"[FT_US]\",\"length\",0.3048006096012192,[1,0,0,0,0,0,0],\"ft<sub>us</sub>\",\"us-lengths\",false,null,null,1,false,false,0,\"US foot; foot US; us ft; ft us; height; visual distance; feet\",\"UCUM\",\"Len\",\"Obsolete\",\"Better to use [ft_i] which refers to the length used worldwide, including in the US;  [ft_us] may be confused with land survey units. \",\"m/3937\",\"M/3937\",\"1200\",1200,false],[false,\"yard - US\",\"[yd_us]\",\"[YD_US]\",\"length\",0.9144018288036575,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"US yards; us yds; distance\",\"UCUM\",\"Len; Nrat\",\"Obsolete\",\"Better to use [yd_i] which refers to the length used worldwide, including in the US; [yd_us] refers to unit used in land surveys in the US\",\"[ft_us]\",\"[FT_US]\",\"3\",3,false],[false,\"inch - US\",\"[in_us]\",\"[IN_US]\",\"length\",0.0254000508001016,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"US inches; in us; us in; inch US\",\"UCUM\",\"Len\",\"Obsolete\",\"Better to use [in_i] which refers to the length used worldwide, including in the US\",\"[ft_us]/12\",\"[FT_US]/12\",\"1\",1,false],[false,\"rod - US\",\"[rd_us]\",\"[RD_US]\",\"length\",5.029210058420117,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"US rod; US rods; rd US; US rd\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ft_us]\",\"[FT_US]\",\"16.5\",16.5,false],[false,\"Gunter's chain - US\",\"[ch_us]\",\"[CH_US]\",\"length\",20.116840233680467,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"surveyor's chain; Surveyor's chain USA; Gunter’s measurement; surveyor’s measurement; Gunter's Chain USA\",\"UCUM\",\"Len\",\"Obsolete\",\"historical unit used for land survey used only in the US\",\"[rd_us]\",\"[RD_US]\",\"4\",4,false],[false,\"link for Gunter's chain - US\",\"[lk_us]\",\"[LK_US]\",\"length\",0.20116840233680466,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"Links for Gunter's Chain USA\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ch_us]/100\",\"[CH_US]/100\",\"1\",1,false],[false,\"Ramden's chain - US\",\"[rch_us]\",\"[RCH_US]\",\"length\",30.480060960121918,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"Ramsden's chain; engineer's chains\",\"UCUM\",\"Len\",\"Obsolete\",\"distance measuring device used for land survey\",\"[ft_us]\",\"[FT_US]\",\"100\",100,false],[false,\"link for Ramden's chain - US\",\"[rlk_us]\",\"[RLK_US]\",\"length\",0.3048006096012192,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"links for Ramsden's chain\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[rch_us]/100\",\"[RCH_US]/100\",\"1\",1,false],[false,\"fathom - US\",\"[fth_us]\",\"[FTH_US]\",\"length\",1.828803657607315,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"US fathoms; fathom USA; fth us\",\"UCUM\",\"Len\",\"Obsolete\",\"same length as the international fathom - better to use international fathom ([fth_i])\",\"[ft_us]\",\"[FT_US]\",\"6\",6,false],[false,\"furlong - US\",\"[fur_us]\",\"[FUR_US]\",\"length\",201.16840233680466,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"US furlongs; fur us\",\"UCUM\",\"Len\",\"Nonclinical\",\"distance unit in horse racing\",\"[rd_us]\",\"[RD_US]\",\"40\",40,false],[false,\"mile - US\",\"[mi_us]\",\"[MI_US]\",\"length\",1609.3472186944373,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"U.S. Survey Miles; US statute miles; survey mi; US mi; distance\",\"UCUM\",\"Len\",\"Nonclinical\",\"Better to use [mi_i] which refers to the length used worldwide, including in the US\",\"[fur_us]\",\"[FUR_US]\",\"8\",8,false],[false,\"acre - US\",\"[acr_us]\",\"[ACR_US]\",\"area\",4046.872609874252,[2,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"Acre USA Survey; Acre USA; survey acres\",\"UCUM\",\"Area\",\"Nonclinical\",\"an older unit based on pre 1959 US statute lengths that is still sometimes used in the US only for land survey purposes. \",\"[rd_us]2\",\"[RD_US]2\",\"160\",160,false],[false,\"square rod - US\",\"[srd_us]\",\"[SRD_US]\",\"area\",25.292953811714074,[2,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"rod2; rod^2; sq. rod; rods squared\",\"UCUM\",\"Area\",\"Nonclinical\",\"Used only in the US to measure land area, based on US statute land survey length units\",\"[rd_us]2\",\"[RD_US]2\",\"1\",1,false],[false,\"square mile - US\",\"[smi_us]\",\"[SMI_US]\",\"area\",2589998.470319521,[2,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"mi2; mi^2; sq mi; miles squared\",\"UCUM\",\"Area\",\"Nonclinical\",\"historical unit used only in the US for land survey purposes (based on the US survey mile), not the internationally recognized [mi_i]\",\"[mi_us]2\",\"[MI_US]2\",\"1\",1,false],[false,\"section\",\"[sct]\",\"[SCT]\",\"area\",2589998.470319521,[2,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"sct; sections\",\"UCUM\",\"Area\",\"Nonclinical\",\"tract of land approximately equal to 1 mile square containing 640 acres\",\"[mi_us]2\",\"[MI_US]2\",\"1\",1,false],[false,\"township\",\"[twp]\",\"[TWP]\",\"area\",93239944.93150276,[2,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"twp; townships\",\"UCUM\",\"Area\",\"Nonclinical\",\"land measurement equal to 6 mile square\",\"[sct]\",\"[SCT]\",\"36\",36,false],[false,\"mil - US\",\"[mil_us]\",\"[MIL_US]\",\"length\",0.0000254000508001016,[1,0,0,0,0,0,0],null,\"us-lengths\",false,null,null,1,false,false,0,\"thou, thousandth; mils\",\"UCUM\",\"Len\",\"Obsolete\",\"better to use [mil_i] which is based on the internationally recognized inch\",\"[in_us]\",\"[IN_US]\",\"1e-3\",0.001,false],[false,\"inch - British\",\"[in_br]\",\"[IN_BR]\",\"length\",0.025399980000000003,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"imperial inches; imp in; br in; british inches\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"cm\",\"CM\",\"2.539998\",2.539998,false],[false,\"foot - British\",\"[ft_br]\",\"[FT_BR]\",\"length\",0.30479976000000003,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"British Foot; Imperial Foot; feet; imp fts; br fts\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[in_br]\",\"[IN_BR]\",\"12\",12,false],[false,\"rod - British\",\"[rd_br]\",\"[RD_BR]\",\"length\",5.02919604,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"British rods; br rd\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ft_br]\",\"[FT_BR]\",\"16.5\",16.5,false],[false,\"Gunter's chain - British\",\"[ch_br]\",\"[CH_BR]\",\"length\",20.11678416,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"Gunter's Chain British; Gunters Chain British; Surveyor's Chain British\",\"UCUM\",\"Len\",\"Obsolete\",\"historical unit used for land survey used only in Great Britain\",\"[rd_br]\",\"[RD_BR]\",\"4\",4,false],[false,\"link for Gunter's chain - British\",\"[lk_br]\",\"[LK_BR]\",\"length\",0.2011678416,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"Links for Gunter's Chain British\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ch_br]/100\",\"[CH_BR]/100\",\"1\",1,false],[false,\"fathom - British\",\"[fth_br]\",\"[FTH_BR]\",\"length\",1.82879856,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"British fathoms; imperial fathoms; br fth; imp fth\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ft_br]\",\"[FT_BR]\",\"6\",6,false],[false,\"pace - British\",\"[pc_br]\",\"[PC_BR]\",\"length\",0.7619994000000001,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"British paces; br pc\",\"UCUM\",\"Len\",\"Nonclinical\",\"traditional unit of length equal to 152.4 centimeters, or 1.52 meter. \",\"[ft_br]\",\"[FT_BR]\",\"2.5\",2.5,false],[false,\"yard - British\",\"[yd_br]\",\"[YD_BR]\",\"length\",0.91439928,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"British yards; Br yds; distance\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ft_br]\",\"[FT_BR]\",\"3\",3,false],[false,\"mile - British\",\"[mi_br]\",\"[MI_BR]\",\"length\",1609.3427328000002,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"imperial miles; British miles; English statute miles; imp mi, br mi\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ft_br]\",\"[FT_BR]\",\"5280\",5280,false],[false,\"nautical mile - British\",\"[nmi_br]\",\"[NMI_BR]\",\"length\",1853.1825408000002,[1,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"British nautical miles; Imperial nautical miles; Admiralty miles; n.m. br; imp nm\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[ft_br]\",\"[FT_BR]\",\"6080\",6080,false],[false,\"knot - British\",\"[kn_br]\",\"[KN_BR]\",\"velocity\",0.5147729280000001,[1,-1,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"British knots; kn br; kt\",\"UCUM\",\"Vel\",\"Obsolete\",\"based on obsolete British nautical mile \",\"[nmi_br]/h\",\"[NMI_BR]/H\",\"1\",1,false],[false,\"acre\",\"[acr_br]\",\"[ACR_BR]\",\"area\",4046.850049400269,[2,0,0,0,0,0,0],null,\"brit-length\",false,null,null,1,false,false,0,\"Imperial acres; British; a; ac; ar; acr\",\"UCUM\",\"Area\",\"Nonclinical\",\"the standard unit for acre used in the US and internationally\",\"[yd_br]2\",\"[YD_BR]2\",\"4840\",4840,false],[false,\"gallon - US\",\"[gal_us]\",\"[GAL_US]\",\"fluid volume\",0.0037854117840000006,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US gallons; US liquid gallon; gal us; Queen Anne's wine gallon\",\"UCUM\",\"Vol\",\"Nonclinical\",\"only gallon unit used in the US; [gal_us] is only used in some other countries in South American and Africa to measure gasoline volume\",\"[in_i]3\",\"[IN_I]3\",\"231\",231,false],[false,\"barrel - US\",\"[bbl_us]\",\"[BBL_US]\",\"fluid volume\",0.158987294928,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"bbl\",\"UCUM\",\"Vol\",\"Nonclinical\",\"[bbl_us] is the standard unit for oil barrel, which is a unit only used in the US to measure the volume oil. \",\"[gal_us]\",\"[GAL_US]\",\"42\",42,false],[false,\"quart - US\",\"[qt_us]\",\"[QT_US]\",\"fluid volume\",0.0009463529460000001,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US quarts; us qts\",\"UCUM\",\"Vol\",\"Clinical\",\"Used only in the US\",\"[gal_us]/4\",\"[GAL_US]/4\",\"1\",1,false],[false,\"pint - US\",\"[pt_us]\",\"[PT_US]\",\"fluid volume\",0.00047317647300000007,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US pints; pint US; liquid pint; pt us; us pt\",\"UCUM\",\"Vol\",\"Clinical\",\"Used only in the US\",\"[qt_us]/2\",\"[QT_US]/2\",\"1\",1,false],[false,\"gill - US\",\"[gil_us]\",\"[GIL_US]\",\"fluid volume\",0.00011829411825000002,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US gills; gil us\",\"UCUM\",\"Vol\",\"Nonclinical\",\"only used in the context of alcohol volume in the US\",\"[pt_us]/4\",\"[PT_US]/4\",\"1\",1,false],[false,\"fluid ounce - US\",\"[foz_us]\",\"[FOZ_US]\",\"fluid volume\",0.000029573529562500005,[3,0,0,0,0,0,0],\"oz fl\",\"us-volumes\",false,null,null,1,false,false,0,\"US fluid ounces; fl ozs; FO; fl. oz.; foz us\",\"UCUM\",\"Vol\",\"Clinical\",\"unit used only in the US\",\"[gil_us]/4\",\"[GIL_US]/4\",\"1\",1,false],[false,\"fluid dram - US\",\"[fdr_us]\",\"[FDR_US]\",\"fluid volume\",0.0000036966911953125006,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US fluid drams; fdr us\",\"UCUM\",\"Vol\",\"Nonclinical\",\"equal to 1/8 US fluid ounce = 3.69 mL; used informally to mean small amount of liquor, especially Scotch whiskey\",\"[foz_us]/8\",\"[FOZ_US]/8\",\"1\",1,false],[false,\"minim - US\",\"[min_us]\",\"[MIN_US]\",\"fluid volume\",6.1611519921875e-8,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"min US; US min; ♏ US\",\"UCUM\",\"Vol\",\"Obsolete\",\"\",\"[fdr_us]/60\",\"[FDR_US]/60\",\"1\",1,false],[false,\"cord - US\",\"[crd_us]\",\"[CRD_US]\",\"fluid volume\",3.6245563637760005,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US cord; US cords; crd us; us crd\",\"UCUM\",\"Vol\",\"Nonclinical\",\"unit of measure of dry volume used to measure firewood equal 128 ft3 (the same as international cord [cr_i])\",\"[ft_i]3\",\"[FT_I]3\",\"128\",128,false],[false,\"bushel - US\",\"[bu_us]\",\"[BU_US]\",\"dry volume\",0.03523907016688001,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US bushels; US bsh; US bu\",\"UCUM\",\"Vol\",\"Obsolete\",\"Historical unit of dry volume that is rarely used today\",\"[in_i]3\",\"[IN_I]3\",\"2150.42\",2150.42,false],[false,\"gallon - historical\",\"[gal_wi]\",\"[GAL_WI]\",\"dry volume\",0.004404883770860001,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"Corn Gallon British; Dry Gallon US; Gallons Historical; Grain Gallon British; Winchester Corn Gallon; historical winchester gallons; wi gal\",\"UCUM\",\"Vol\",\"Obsolete\",\"historical unit of dry volume no longer used\",\"[bu_us]/8\",\"[BU_US]/8\",\"1\",1,false],[false,\"peck - US\",\"[pk_us]\",\"[PK_US]\",\"dry volume\",0.008809767541720002,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"US pecks; US pk\",\"UCUM\",\"Vol\",\"Nonclinical\",\"unit of dry volume rarely used today (can be used to measure volume of apples)\",\"[bu_us]/4\",\"[BU_US]/4\",\"1\",1,false],[false,\"dry quart - US\",\"[dqt_us]\",\"[DQT_US]\",\"dry volume\",0.0011012209427150002,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"dry quarts; dry quart US; US dry quart; dry qt; us dry qt; dqt; dqt us\",\"UCUM\",\"Vol\",\"Nonclinical\",\"historical unit of dry volume only in the US, but is rarely used today\",\"[pk_us]/8\",\"[PK_US]/8\",\"1\",1,false],[false,\"dry pint - US\",\"[dpt_us]\",\"[DPT_US]\",\"dry volume\",0.0005506104713575001,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"dry pints; dry pint US; US dry pint; dry pt; dpt; dpt us\",\"UCUM\",\"Vol\",\"Nonclinical\",\"historical unit of dry volume only in the US, but is rarely used today\",\"[dqt_us]/2\",\"[DQT_US]/2\",\"1\",1,false],[false,\"tablespoon - US\",\"[tbs_us]\",\"[TBS_US]\",\"volume\",0.000014786764781250002,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"Tbs; tbsp; tbs us; US tablespoons\",\"UCUM\",\"Vol\",\"Clinical\",\"unit defined as 0.5 US fluid ounces or 3 teaspoons - used only in the US. See [tbs_m] for the unit used internationally and in the US for nutrional labelling. \",\"[foz_us]/2\",\"[FOZ_US]/2\",\"1\",1,false],[false,\"teaspoon - US\",\"[tsp_us]\",\"[TSP_US]\",\"volume\",0.0000049289215937500005,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"tsp; t; US teaspoons\",\"UCUM\",\"Vol\",\"Nonclinical\",\"unit defined as 1/6 US fluid ounces - used only in the US. See [tsp_m] for the unit used internationally and in the US for nutrional labelling. \",\"[tbs_us]/3\",\"[TBS_US]/3\",\"1\",1,false],[false,\"cup - US customary\",\"[cup_us]\",\"[CUP_US]\",\"volume\",0.00023658823650000004,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"cup us; us cups\",\"UCUM\",\"Vol\",\"Nonclinical\",\"Unit defined as 1/2 US pint or 16 US tablespoons ≈ 236.59 mL, which is not the standard unit defined by the FDA of 240 mL - see [cup_m] (metric cup)\",\"[tbs_us]\",\"[TBS_US]\",\"16\",16,false],[false,\"fluid ounce - metric\",\"[foz_m]\",\"[FOZ_M]\",\"fluid volume\",0.000029999999999999997,[3,0,0,0,0,0,0],\"oz fl\",\"us-volumes\",false,null,null,1,false,false,0,\"metric fluid ounces; fozs m; fl ozs m\",\"UCUM\",\"Vol\",\"Clinical\",\"unit used only in the US for nutritional labelling, as set by the FDA\",\"mL\",\"ML\",\"30\",30,false],[false,\"cup - US legal\",\"[cup_m]\",\"[CUP_M]\",\"volume\",0.00023999999999999998,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"cup m; metric cups\",\"UCUM\",\"Vol\",\"Clinical\",\"standard unit equal to 240 mL used in the US for nutritional labelling, as defined by the FDA. Note that this is different from the US customary cup (236.59 mL) and the metric cup used in Commonwealth nations (250 mL).\",\"mL\",\"ML\",\"240\",240,false],[false,\"teaspoon - metric\",\"[tsp_m]\",\"[TSP_M]\",\"volume\",0.0000049999999999999996,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"tsp; t; metric teaspoons\",\"UCUM\",\"Vol\",\"Clinical\",\"standard unit used in the US and internationally\",\"mL\",\"mL\",\"5\",5,false],[false,\"tablespoon - metric\",\"[tbs_m]\",\"[TBS_M]\",\"volume\",0.000014999999999999999,[3,0,0,0,0,0,0],null,\"us-volumes\",false,null,null,1,false,false,0,\"metric tablespoons; Tbs; tbsp; T; tbs m\",\"UCUM\",\"Vol\",\"Clinical\",\"standard unit used in the US and internationally\",\"mL\",\"mL\",\"15\",15,false],[false,\"gallon- British\",\"[gal_br]\",\"[GAL_BR]\",\"volume\",0.004546090000000001,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"imperial gallons, UK gallons; British gallons; br gal; imp gal\",\"UCUM\",\"Vol\",\"Nonclinical\",\"Used only in Great Britain and other Commonwealth countries\",\"l\",\"L\",\"4.54609\",4.54609,false],[false,\"peck - British\",\"[pk_br]\",\"[PK_BR]\",\"volume\",0.009092180000000002,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"imperial pecks; British pecks; br pk; imp pk\",\"UCUM\",\"Vol\",\"Nonclinical\",\"unit of dry volume rarely used today (can be used to measure volume of apples)\",\"[gal_br]\",\"[GAL_BR]\",\"2\",2,false],[false,\"bushel - British\",\"[bu_br]\",\"[BU_BR]\",\"volume\",0.03636872000000001,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"British bushels; imperial; br bsh; br bu; imp\",\"UCUM\",\"Vol\",\"Obsolete\",\"Historical unit of dry volume that is rarely used today\",\"[pk_br]\",\"[PK_BR]\",\"4\",4,false],[false,\"quart - British\",\"[qt_br]\",\"[QT_BR]\",\"volume\",0.0011365225000000002,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"British quarts; imperial quarts; br qts\",\"UCUM\",\"Vol\",\"Clinical\",\"Used only in Great Britain and other Commonwealth countries\",\"[gal_br]/4\",\"[GAL_BR]/4\",\"1\",1,false],[false,\"pint - British\",\"[pt_br]\",\"[PT_BR]\",\"volume\",0.0005682612500000001,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"British pints; imperial pints; pt br; br pt; imp pt; pt imp\",\"UCUM\",\"Vol\",\"Clinical\",\"Used only in Great Britain and other Commonwealth countries\",\"[qt_br]/2\",\"[QT_BR]/2\",\"1\",1,false],[false,\"gill - British\",\"[gil_br]\",\"[GIL_BR]\",\"volume\",0.00014206531250000003,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"imperial gills; British gills; imp gill, br gill\",\"UCUM\",\"Vol\",\"Nonclinical\",\"only used in the context of alcohol volume in Great Britain\",\"[pt_br]/4\",\"[PT_BR]/4\",\"1\",1,false],[false,\"fluid ounce - British\",\"[foz_br]\",\"[FOZ_BR]\",\"volume\",0.000028413062500000005,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"British fluid ounces; Imperial fluid ounces; br fozs; imp fozs; br fl ozs\",\"UCUM\",\"Vol\",\"Clinical\",\"Used only in Great Britain and other Commonwealth countries\",\"[gil_br]/5\",\"[GIL_BR]/5\",\"1\",1,false],[false,\"fluid dram - British\",\"[fdr_br]\",\"[FDR_BR]\",\"volume\",0.0000035516328125000006,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"British fluid drams; fdr br\",\"UCUM\",\"Vol\",\"Nonclinical\",\"equal to 1/8 Imperial fluid ounce = 3.55 mL; used informally to mean small amount of liquor, especially Scotch whiskey\",\"[foz_br]/8\",\"[FOZ_BR]/8\",\"1\",1,false],[false,\"minim - British\",\"[min_br]\",\"[MIN_BR]\",\"volume\",5.919388020833334e-8,[3,0,0,0,0,0,0],null,\"brit-volumes\",false,null,null,1,false,false,0,\"min br; br min; ♏ br\",\"UCUM\",\"Vol\",\"Obsolete\",\"\",\"[fdr_br]/60\",\"[FDR_BR]/60\",\"1\",1,false],[false,\"grain\",\"[gr]\",\"[GR]\",\"mass\",0.06479891,[0,0,1,0,0,0,0],null,\"avoirdupois\",false,null,null,1,false,false,0,\"gr; grains\",\"UCUM\",\"Mass\",\"Nonclinical\",\"an apothecary measure of mass rarely used today\",\"mg\",\"MG\",\"64.79891\",64.79891,false],[false,\"pound\",\"[lb_av]\",\"[LB_AV]\",\"mass\",453.59237,[0,0,1,0,0,0,0],\"lb\",\"avoirdupois\",false,null,null,1,false,false,0,\"avoirdupois pounds, international pounds; av lbs; pounds\",\"UCUM\",\"Mass\",\"Clinical\",\"standard unit used in the US and internationally\",\"[gr]\",\"[GR]\",\"7000\",7000,false],[false,\"pound force - US\",\"[lbf_av]\",\"[LBF_AV]\",\"force\",4448.2216152605,[1,-2,1,0,0,0,0],\"lbf\",\"const\",false,null,null,1,false,false,0,\"lbfs; US lbf; US pound forces\",\"UCUM\",\"Force\",\"Clinical\",\"only rarely needed in health care - see [lb_av] which is the more common unit to express weight\",\"[lb_av].[g]\",\"[LB_AV].[G]\",\"1\",1,false],[false,\"ounce\",\"[oz_av]\",\"[OZ_AV]\",\"mass\",28.349523125,[0,0,1,0,0,0,0],\"oz\",\"avoirdupois\",false,null,null,1,false,false,0,\"ounces; international ounces; avoirdupois ounces; av ozs\",\"UCUM\",\"Mass\",\"Clinical\",\"standard unit used in the US and internationally\",\"[lb_av]/16\",\"[LB_AV]/16\",\"1\",1,false],[false,\"Dram mass unit\",\"[dr_av]\",\"[DR_AV]\",\"mass\",1.7718451953125,[0,0,1,0,0,0,0],null,\"avoirdupois\",false,null,null,1,false,false,0,\"Dram; drams avoirdupois; avoidupois dram; international dram\",\"UCUM\",\"Mass\",\"Clinical\",\"unit from the avoirdupois system, which is used in the US and internationally\",\"[oz_av]/16\",\"[OZ_AV]/16\",\"1\",1,false],[false,\"short hundredweight\",\"[scwt_av]\",\"[SCWT_AV]\",\"mass\",45359.237,[0,0,1,0,0,0,0],null,\"avoirdupois\",false,null,null,1,false,false,0,\"hundredweights; s cwt; scwt; avoirdupois\",\"UCUM\",\"Mass\",\"Nonclinical\",\"Used only in the US to equal 100 pounds\",\"[lb_av]\",\"[LB_AV]\",\"100\",100,false],[false,\"long hundredweight\",\"[lcwt_av]\",\"[LCWT_AV]\",\"mass\",50802.345440000005,[0,0,1,0,0,0,0],null,\"avoirdupois\",false,null,null,1,false,false,0,\"imperial hundredweights; imp cwt; lcwt; avoirdupois\",\"UCUM\",\"Mass\",\"Obsolete\",\"\",\"[lb_av]\",\"[LB_AV]\",\"112\",112,false],[false,\"short ton - US\",\"[ston_av]\",\"[STON_AV]\",\"mass\",907184.74,[0,0,1,0,0,0,0],null,\"avoirdupois\",false,null,null,1,false,false,0,\"ton; US tons; avoirdupois tons\",\"UCUM\",\"Mass\",\"Clinical\",\"Used only in the US\",\"[scwt_av]\",\"[SCWT_AV]\",\"20\",20,false],[false,\"long ton - British\",\"[lton_av]\",\"[LTON_AV]\",\"mass\",1016046.9088000001,[0,0,1,0,0,0,0],null,\"avoirdupois\",false,null,null,1,false,false,0,\"imperial tons; weight tons; British long tons; long ton avoirdupois\",\"UCUM\",\"Mass\",\"Nonclinical\",\"Used only in Great Britain and other Commonwealth countries\",\"[lcwt_av]\",\"[LCWT_AV]\",\"20\",20,false],[false,\"stone - British\",\"[stone_av]\",\"[STONE_AV]\",\"mass\",6350.293180000001,[0,0,1,0,0,0,0],null,\"avoirdupois\",false,null,null,1,false,false,0,\"British stones; avoirdupois\",\"UCUM\",\"Mass\",\"Nonclinical\",\"Used primarily in the UK and Ireland to measure body weight\",\"[lb_av]\",\"[LB_AV]\",\"14\",14,false],[false,\"pennyweight - troy\",\"[pwt_tr]\",\"[PWT_TR]\",\"mass\",1.5551738400000001,[0,0,1,0,0,0,0],null,\"troy\",false,null,null,1,false,false,0,\"dwt; denarius weights\",\"UCUM\",\"Mass\",\"Obsolete\",\"historical unit used to measure mass and cost of precious metals\",\"[gr]\",\"[GR]\",\"24\",24,false],[false,\"ounce - troy\",\"[oz_tr]\",\"[OZ_TR]\",\"mass\",31.103476800000003,[0,0,1,0,0,0,0],null,\"troy\",false,null,null,1,false,false,0,\"troy ounces; tr ozs\",\"UCUM\",\"Mass\",\"Nonclinical\",\"unit of mass for precious metals and gemstones only\",\"[pwt_tr]\",\"[PWT_TR]\",\"20\",20,false],[false,\"pound - troy\",\"[lb_tr]\",\"[LB_TR]\",\"mass\",373.2417216,[0,0,1,0,0,0,0],null,\"troy\",false,null,null,1,false,false,0,\"troy pounds; tr lbs\",\"UCUM\",\"Mass\",\"Nonclinical\",\"only used for weighing precious metals\",\"[oz_tr]\",\"[OZ_TR]\",\"12\",12,false],[false,\"scruple\",\"[sc_ap]\",\"[SC_AP]\",\"mass\",1.2959782,[0,0,1,0,0,0,0],null,\"apoth\",false,null,null,1,false,false,0,\"scruples; sc ap\",\"UCUM\",\"Mass\",\"Obsolete\",\"\",\"[gr]\",\"[GR]\",\"20\",20,false],[false,\"dram - apothecary\",\"[dr_ap]\",\"[DR_AP]\",\"mass\",3.8879346,[0,0,1,0,0,0,0],null,\"apoth\",false,null,null,1,false,false,0,\"ʒ; drachm; apothecaries drams; dr ap; dram ap\",\"UCUM\",\"Mass\",\"Nonclinical\",\"unit still used in the US occasionally to measure amount of drugs in pharmacies\",\"[sc_ap]\",\"[SC_AP]\",\"3\",3,false],[false,\"ounce - apothecary\",\"[oz_ap]\",\"[OZ_AP]\",\"mass\",31.1034768,[0,0,1,0,0,0,0],null,\"apoth\",false,null,null,1,false,false,0,\"apothecary ounces; oz ap; ap ozs; ozs ap\",\"UCUM\",\"Mass\",\"Obsolete\",\"\",\"[dr_ap]\",\"[DR_AP]\",\"8\",8,false],[false,\"pound - apothecary\",\"[lb_ap]\",\"[LB_AP]\",\"mass\",373.2417216,[0,0,1,0,0,0,0],null,\"apoth\",false,null,null,1,false,false,0,\"apothecary pounds; apothecaries pounds; ap lb; lb ap; ap lbs; lbs ap\",\"UCUM\",\"Mass\",\"Obsolete\",\"\",\"[oz_ap]\",\"[OZ_AP]\",\"12\",12,false],[false,\"ounce - metric\",\"[oz_m]\",\"[OZ_M]\",\"mass\",28,[0,0,1,0,0,0,0],null,\"apoth\",false,null,null,1,false,false,0,\"metric ounces; m ozs\",\"UCUM\",\"Mass\",\"Clinical\",\"see [oz_av] (the avoirdupois ounce) for the standard ounce used internationally; [oz_m] is equal to 28 grams and is based on the apothecaries' system of mass units which is used in some US pharmacies. \",\"g\",\"g\",\"28\",28,false],[false,\"line\",\"[lne]\",\"[LNE]\",\"length\",0.002116666666666667,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"British lines; br L; L; l\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[in_i]/12\",\"[IN_I]/12\",\"1\",1,false],[false,\"point (typography)\",\"[pnt]\",\"[PNT]\",\"length\",0.0003527777777777778,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"DTP points; desktop publishing point; pt; pnt\",\"UCUM\",\"Len\",\"Nonclinical\",\"typography unit for typesetter's length\",\"[lne]/6\",\"[LNE]/6\",\"1\",1,false],[false,\"pica (typography)\",\"[pca]\",\"[PCA]\",\"length\",0.004233333333333334,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"picas\",\"UCUM\",\"Len\",\"Nonclinical\",\"typography unit for typesetter's length\",\"[pnt]\",\"[PNT]\",\"12\",12,false],[false,\"Printer's point (typography)\",\"[pnt_pr]\",\"[PNT_PR]\",\"length\",0.00035145980000000004,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"pnt pr\",\"UCUM\",\"Len\",\"Nonclinical\",\"typography unit for typesetter's length\",\"[in_i]\",\"[IN_I]\",\"0.013837\",0.013837,false],[false,\"Printer's pica  (typography)\",\"[pca_pr]\",\"[PCA_PR]\",\"length\",0.004217517600000001,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"pca pr; Printer's picas\",\"UCUM\",\"Len\",\"Nonclinical\",\"typography unit for typesetter's length\",\"[pnt_pr]\",\"[PNT_PR]\",\"12\",12,false],[false,\"pied\",\"[pied]\",\"[PIED]\",\"length\",0.3248,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"pieds du roi; Paris foot; royal; French; feet\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"cm\",\"CM\",\"32.48\",32.48,false],[false,\"pouce\",\"[pouce]\",\"[POUCE]\",\"length\",0.027066666666666666,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"historical French inches; French royal inches\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[pied]/12\",\"[PIED]/12\",\"1\",1,false],[false,\"ligne\",\"[ligne]\",\"[LIGNE]\",\"length\",0.0022555555555555554,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"Paris lines; lignes\",\"UCUM\",\"Len\",\"Obsolete\",\"\",\"[pouce]/12\",\"[POUCE]/12\",\"1\",1,false],[false,\"didot\",\"[didot]\",\"[DIDOT]\",\"length\",0.0003759259259259259,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"Didot point; dd; Didots Point; didots; points\",\"UCUM\",\"Len\",\"Obsolete\",\"typography unit for typesetter's length\",\"[ligne]/6\",\"[LIGNE]/6\",\"1\",1,false],[false,\"cicero\",\"[cicero]\",\"[CICERO]\",\"length\",0.004511111111111111,[1,0,0,0,0,0,0],null,\"typeset\",false,null,null,1,false,false,0,\"Didot's pica; ciceros; picas\",\"UCUM\",\"Len\",\"Obsolete\",\"typography unit for typesetter's length\",\"[didot]\",\"[DIDOT]\",\"12\",12,false],[false,\"degrees Fahrenheit\",\"[degF]\",\"[DEGF]\",\"temperature\",0.5555555555555556,[0,0,0,0,1,0,0],\"°F\",\"heat\",false,null,\"degF\",1,true,false,0,\"°F; deg F\",\"UCUM\",\"Temp\",\"Clinical\",\"\",\"K\",null,null,0.5555555555555556,false],[false,\"degrees Rankine\",\"[degR]\",\"[degR]\",\"temperature\",0.5555555555555556,[0,0,0,0,1,0,0],\"°R\",\"heat\",false,null,null,1,false,false,0,\"°R; °Ra; Rankine\",\"UCUM\",\"Temp\",\"Obsolete\",\"Replaced by Kelvin\",\"K/9\",\"K/9\",\"5\",5,false],[false,\"degrees Réaumur\",\"[degRe]\",\"[degRe]\",\"temperature\",1.25,[0,0,0,0,1,0,0],\"°Ré\",\"heat\",false,null,\"degRe\",1,true,false,0,\"°Ré, °Re, °r; Réaumur; degree Reaumur; Reaumur\",\"UCUM\",\"Temp\",\"Obsolete\",\"replaced by Celsius\",\"K\",null,null,1.25,false],[false,\"calorie at 15°C\",\"cal_[15]\",\"CAL_[15]\",\"energy\",4185.8,[2,-2,1,0,0,0,0],\"cal<sub>15°C</sub>\",\"heat\",true,null,null,1,false,false,0,\"calorie 15 C; cals 15 C; calories at 15 C\",\"UCUM\",\"Enrg\",\"Nonclinical\",\"equal to 4.1855 joules; calorie most often used in engineering\",\"J\",\"J\",\"4.18580\",4.1858,false],[false,\"calorie at 20°C\",\"cal_[20]\",\"CAL_[20]\",\"energy\",4181.9,[2,-2,1,0,0,0,0],\"cal<sub>20°C</sub>\",\"heat\",true,null,null,1,false,false,0,\"calorie 20 C; cal 20 C; calories at 20 C\",\"UCUM\",\"Enrg\",\"Clinical\",\"equal to 4.18190  joules. \",\"J\",\"J\",\"4.18190\",4.1819,false],[false,\"mean calorie\",\"cal_m\",\"CAL_M\",\"energy\",4190.0199999999995,[2,-2,1,0,0,0,0],\"cal<sub>m</sub>\",\"heat\",true,null,null,1,false,false,0,\"mean cals; mean calories\",\"UCUM\",\"Enrg\",\"Clinical\",\"equal to 4.19002 joules. \",\"J\",\"J\",\"4.19002\",4.19002,false],[false,\"international table calorie\",\"cal_IT\",\"CAL_IT\",\"energy\",4186.8,[2,-2,1,0,0,0,0],\"cal<sub>IT</sub>\",\"heat\",true,null,null,1,false,false,0,\"calories IT; IT cals; international steam table calories\",\"UCUM\",\"Enrg\",\"Nonclinical\",\"used in engineering steam tables and defined as 1/860 international watt-hour; equal to 4.1868 joules\",\"J\",\"J\",\"4.1868\",4.1868,false],[false,\"thermochemical calorie\",\"cal_th\",\"CAL_TH\",\"energy\",4184,[2,-2,1,0,0,0,0],\"cal<sub>th</sub>\",\"heat\",true,null,null,1,false,false,0,\"thermochemical calories; th cals\",\"UCUM\",\"Enrg\",\"Clinical\",\"equal to 4.184 joules; used as the unit in medicine and biochemistry (equal to cal)\",\"J\",\"J\",\"4.184\",4.184,false],[false,\"calorie\",\"cal\",\"CAL\",\"energy\",4184,[2,-2,1,0,0,0,0],\"cal\",\"heat\",true,null,null,1,false,false,0,\"gram calories; small calories\",\"UCUM\",\"Enrg\",\"Clinical\",\"equal to 4.184 joules (the same value as the thermochemical calorie, which is the most common calorie used in medicine and biochemistry)\",\"cal_th\",\"CAL_TH\",\"1\",1,false],[false,\"nutrition label Calories\",\"[Cal]\",\"[CAL]\",\"energy\",4184000,[2,-2,1,0,0,0,0],\"Cal\",\"heat\",false,null,null,1,false,false,0,\"food calories; Cal; kcal\",\"UCUM\",\"Eng\",\"Clinical\",\"\",\"kcal_th\",\"KCAL_TH\",\"1\",1,false],[false,\"British thermal unit at 39°F\",\"[Btu_39]\",\"[BTU_39]\",\"energy\",1059670,[2,-2,1,0,0,0,0],\"Btu<sub>39°F</sub>\",\"heat\",false,null,null,1,false,false,0,\"BTU 39F; BTU 39 F; B.T.U. 39 F; B.Th.U. 39 F; BThU 39 F; British thermal units\",\"UCUM\",\"Eng\",\"Nonclinical\",\"equal to 1.05967 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries\",\"kJ\",\"kJ\",\"1.05967\",1.05967,false],[false,\"British thermal unit at 59°F\",\"[Btu_59]\",\"[BTU_59]\",\"energy\",1054800,[2,-2,1,0,0,0,0],\"Btu<sub>59°F</sub>\",\"heat\",false,null,null,1,false,false,0,\"BTU 59 F; BTU 59F; B.T.U. 59 F; B.Th.U. 59 F; BThU 59F; British thermal units\",\"UCUM\",\"Eng\",\"Nonclinical\",\"equal to  1.05480 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries\",\"kJ\",\"kJ\",\"1.05480\",1.0548,false],[false,\"British thermal unit at 60°F\",\"[Btu_60]\",\"[BTU_60]\",\"energy\",1054680,[2,-2,1,0,0,0,0],\"Btu<sub>60°F</sub>\",\"heat\",false,null,null,1,false,false,0,\"BTU 60 F; BTU 60F; B.T.U. 60 F; B.Th.U. 60 F; BThU 60 F; British thermal units 60 F\",\"UCUM\",\"Eng\",\"Nonclinical\",\"equal to 1.05468 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries\",\"kJ\",\"kJ\",\"1.05468\",1.05468,false],[false,\"mean British thermal unit\",\"[Btu_m]\",\"[BTU_M]\",\"energy\",1055870,[2,-2,1,0,0,0,0],\"Btu<sub>m</sub>\",\"heat\",false,null,null,1,false,false,0,\"BTU mean; B.T.U. mean; B.Th.U. mean; BThU mean; British thermal units mean; \",\"UCUM\",\"Eng\",\"Nonclinical\",\"equal to 1.05587 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries\",\"kJ\",\"kJ\",\"1.05587\",1.05587,false],[false,\"international table British thermal unit\",\"[Btu_IT]\",\"[BTU_IT]\",\"energy\",1055055.85262,[2,-2,1,0,0,0,0],\"Btu<sub>IT</sub>\",\"heat\",false,null,null,1,false,false,0,\"BTU IT; B.T.U. IT; B.Th.U. IT; BThU IT; British thermal units IT\",\"UCUM\",\"Eng\",\"Nonclinical\",\"equal to 1.055 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries\",\"kJ\",\"kJ\",\"1.05505585262\",1.05505585262,false],[false,\"thermochemical British thermal unit\",\"[Btu_th]\",\"[BTU_TH]\",\"energy\",1054350,[2,-2,1,0,0,0,0],\"Btu<sub>th</sub>\",\"heat\",false,null,null,1,false,false,0,\"BTU Th; B.T.U. Th; B.Th.U. Th; BThU Th; thermochemical British thermal units\",\"UCUM\",\"Eng\",\"Nonclinical\",\"equal to 1.054350 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries\",\"kJ\",\"kJ\",\"1.054350\",1.05435,false],[false,\"British thermal unit\",\"[Btu]\",\"[BTU]\",\"energy\",1054350,[2,-2,1,0,0,0,0],\"btu\",\"heat\",false,null,null,1,false,false,0,\"BTU; B.T.U. ; B.Th.U.; BThU; British thermal units\",\"UCUM\",\"Eng\",\"Nonclinical\",\"equal to the thermochemical British thermal unit equal to 1.054350 kJ; used as a measure of power in the electric power, steam generation, heating, and air conditioning industries\",\"[Btu_th]\",\"[BTU_TH]\",\"1\",1,false],[false,\"horsepower - mechanical\",\"[HP]\",\"[HP]\",\"power\",745699.8715822703,[2,-3,1,0,0,0,0],null,\"heat\",false,null,null,1,false,false,0,\"imperial horsepowers\",\"UCUM\",\"EngRat\",\"Nonclinical\",\"refers to mechanical horsepower, which is unit used to measure engine power primarily in the US. \",\"[ft_i].[lbf_av]/s\",\"[FT_I].[LBF_AV]/S\",\"550\",550,false],[false,\"tex\",\"tex\",\"TEX\",\"linear mass density (of textile thread)\",0.001,[-1,0,1,0,0,0,0],\"tex\",\"heat\",true,null,null,1,false,false,0,\"linear mass density; texes\",\"UCUM\",\"\",\"Clinical\",\"unit of linear mass density for fibers equal to gram per 1000 meters\",\"g/km\",\"G/KM\",\"1\",1,false],[false,\"Denier (linear mass density)\",\"[den]\",\"[DEN]\",\"linear mass density (of textile thread)\",0.0001111111111111111,[-1,0,1,0,0,0,0],\"den\",\"heat\",false,null,null,1,false,false,0,\"den; deniers\",\"UCUM\",\"\",\"Nonclinical\",\"equal to the mass in grams per 9000 meters of the fiber (1 denier = 1 strand of silk)\",\"g/9/km\",\"G/9/KM\",\"1\",1,false],[false,\"meter of water column\",\"m[H2O]\",\"M[H2O]\",\"pressure\",9806650,[-1,-2,1,0,0,0,0],\"m HO<sub><r>2</r></sub>\",\"clinical\",true,null,null,1,false,false,0,\"mH2O; m H2O; meters of water column; metres; pressure\",\"UCUM\",\"Pres\",\"Clinical\",\"\",\"kPa\",\"KPAL\",\"980665e-5\",9.80665,false],[false,\"meter of mercury column\",\"m[Hg]\",\"M[HG]\",\"pressure\",133322000,[-1,-2,1,0,0,0,0],\"m Hg\",\"clinical\",true,null,null,1,false,false,0,\"mHg; m Hg; meters of mercury column; metres; pressure\",\"UCUM\",\"Pres\",\"Clinical\",\"\",\"kPa\",\"KPAL\",\"133.3220\",133.322,false],[false,\"inch of water column\",\"[in_i'H2O]\",\"[IN_I'H2O]\",\"pressure\",249088.91000000003,[-1,-2,1,0,0,0,0],\"in HO<sub><r>2</r></sub>\",\"clinical\",false,null,null,1,false,false,0,\"inches WC; inAq; in H2O; inch of water gauge; iwg; pressure\",\"UCUM\",\"Pres\",\"Clinical\",\"unit of pressure, especially in respiratory and ventilation care\",\"m[H2O].[in_i]/m\",\"M[H2O].[IN_I]/M\",\"1\",1,false],[false,\"inch of mercury column\",\"[in_i'Hg]\",\"[IN_I'HG]\",\"pressure\",3386378.8000000003,[-1,-2,1,0,0,0,0],\"in Hg\",\"clinical\",false,null,null,1,false,false,0,\"inHg; in Hg; pressure; inches\",\"UCUM\",\"Pres\",\"Clinical\",\"unit of pressure used in US to measure barometric pressure and occasionally blood pressure (see mm[Hg] for unit used internationally)\",\"m[Hg].[in_i]/m\",\"M[HG].[IN_I]/M\",\"1\",1,false],[false,\"peripheral vascular resistance unit\",\"[PRU]\",\"[PRU]\",\"fluid resistance\",133322000000,[-4,-1,1,0,0,0,0],\"P.R.U.\",\"clinical\",false,null,null,1,false,false,0,\"peripheral vascular resistance units; peripheral resistance unit; peripheral resistance units; PRU\",\"UCUM\",\"FldResist\",\"Clinical\",\"used to assess blood flow in the capillaries; equal to 1 mmH.min/mL = 133.3 Pa·min/mL\",\"mm[Hg].s/ml\",\"MM[HG].S/ML\",\"1\",1,false],[false,\"Wood unit\",\"[wood'U]\",\"[WOOD'U]\",\"fluid resistance\",7999320000,[-4,-1,1,0,0,0,0],\"Wood U.\",\"clinical\",false,null,null,1,false,false,0,\"hybrid reference units; HRU; mmHg.min/L; vascular resistance\",\"UCUM\",\"Pres\",\"Clinical\",\"simplified unit of measurement for for measuring pulmonary vascular resistance that uses pressure; equal to mmHg.min/L\",\"mm[Hg].min/L\",\"MM[HG].MIN/L\",\"1\",1,false],[false,\"diopter (lens)\",\"[diop]\",\"[DIOP]\",\"refraction of a lens\",1,[1,0,0,0,0,0,0],\"dpt\",\"clinical\",false,null,\"inv\",1,false,false,0,\"diopters; diop; dioptre; dpt; refractive power\",\"UCUM\",\"InvLen\",\"Clinical\",\"unit of optical power of lens represented by inverse meters (m^-1)\",\"m\",\"/M\",\"1\",1,false],[false,\"prism diopter (magnifying power)\",\"[p'diop]\",\"[P'DIOP]\",\"refraction of a prism\",1,[0,0,0,1,0,0,0],\"PD\",\"clinical\",false,null,\"tanTimes100\",1,true,false,0,\"diopters; dioptres; p diops; pdiop; dpt; pdptr; Δ; cm/m; centimeter per meter; centimetre; metre\",\"UCUM\",\"Angle\",\"Clinical\",\"unit for prism correction in eyeglass prescriptions\",\"rad\",null,null,1,false],[false,\"percent of slope\",\"%[slope]\",\"%[SLOPE]\",\"slope\",0.017453292519943295,[0,0,0,1,0,0,0],\"%\",\"clinical\",false,null,\"100tan\",1,true,false,0,\"% slope; %slope; percents slopes\",\"UCUM\",\"VelFr; ElpotRatFr; VelRtoFr; AccelFr\",\"Clinical\",\"\",\"deg\",null,null,1,false],[false,\"mesh\",\"[mesh_i]\",\"[MESH_I]\",\"lineic number\",0.025400000000000002,[1,0,0,0,0,0,0],null,\"clinical\",false,null,\"inv\",1,false,false,0,\"meshes\",\"UCUM\",\"NLen (lineic number)\",\"Clinical\",\"traditional unit of length defined as the number of strands or particles per inch\",\"[in_i]\",\"/[IN_I]\",\"1\",1,false],[false,\"French (catheter gauge) \",\"[Ch]\",\"[CH]\",\"gauge of catheters\",0.0003333333333333333,[1,0,0,0,0,0,0],\"Ch\",\"clinical\",false,null,null,1,false,false,0,\"Charrières, French scales; French gauges; Fr, Fg, Ga, FR, Ch\",\"UCUM\",\"Len; Circ; Diam\",\"Clinical\",\"\",\"mm/3\",\"MM/3\",\"1\",1,false],[false,\"drop - metric (1/20 mL)\",\"[drp]\",\"[DRP]\",\"volume\",5e-8,[3,0,0,0,0,0,0],\"drp\",\"clinical\",false,null,null,1,false,false,0,\"drop dosing units; metric drops; gtt\",\"UCUM\",\"Vol\",\"Clinical\",\"standard unit used in the US and internationally for clinical medicine but note that although [drp] is defined as 1/20 milliliter, in practice, drop sizes will vary due to external factors\",\"ml/20\",\"ML/20\",\"1\",1,false],[false,\"Hounsfield unit\",\"[hnsf'U]\",\"[HNSF'U]\",\"x-ray attenuation\",1,[0,0,0,0,0,0,0],\"HF\",\"clinical\",false,null,null,1,false,false,0,\"HU; units\",\"UCUM\",\"\",\"Clinical\",\"used to measure X-ray attenuation, especially in CT scans.\",\"1\",\"1\",\"1\",1,false],[false,\"Metabolic Equivalent of Task \",\"[MET]\",\"[MET]\",\"metabolic cost of physical activity\",5.833333333333334e-11,[3,-1,-1,0,0,0,0],\"MET\",\"clinical\",false,null,null,1,false,false,0,\"metabolic equivalents\",\"UCUM\",\"RelEngRat\",\"Clinical\",\"unit used to measure rate of energy expenditure per power in treadmill and other functional tests\",\"mL/min/kg\",\"ML/MIN/KG\",\"3.5\",3.5,false],[false,\"homeopathic potency of decimal series (retired)\",\"[hp'_X]\",\"[HP'_X]\",\"homeopathic potency (retired)\",1,[0,0,0,0,0,0,0],\"X\",\"clinical\",false,null,\"hpX\",1,true,false,0,null,\"UCUM\",null,null,null,\"1\",null,null,1,false],[false,\"homeopathic potency of centesimal series (retired)\",\"[hp'_C]\",\"[HP'_C]\",\"homeopathic potency (retired)\",1,[0,0,0,0,0,0,0],\"C\",\"clinical\",false,null,\"hpC\",1,true,false,0,null,\"UCUM\",null,null,null,\"1\",null,null,1,false],[false,\"homeopathic potency of millesimal series (retired)\",\"[hp'_M]\",\"[HP'_M]\",\"homeopathic potency (retired)\",1,[0,0,0,0,0,0,0],\"M\",\"clinical\",false,null,\"hpM\",1,true,false,0,null,\"UCUM\",null,null,null,\"1\",null,null,1,false],[false,\"homeopathic potency of quintamillesimal series (retired)\",\"[hp'_Q]\",\"[HP'_Q]\",\"homeopathic potency (retired)\",1,[0,0,0,0,0,0,0],\"Q\",\"clinical\",false,null,\"hpQ\",1,true,false,0,null,\"UCUM\",null,null,null,\"1\",null,null,1,false],[false,\"homeopathic potency of decimal hahnemannian series\",\"[hp_X]\",\"[HP_X]\",\"homeopathic potency (Hahnemann)\",1,[0,0,0,0,0,0,0],\"X\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"homeopathic potency of centesimal hahnemannian series\",\"[hp_C]\",\"[HP_C]\",\"homeopathic potency (Hahnemann)\",1,[0,0,0,0,0,0,0],\"C\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"homeopathic potency of millesimal hahnemannian series\",\"[hp_M]\",\"[HP_M]\",\"homeopathic potency (Hahnemann)\",1,[0,0,0,0,0,0,0],\"M\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"homeopathic potency of quintamillesimal hahnemannian series\",\"[hp_Q]\",\"[HP_Q]\",\"homeopathic potency (Hahnemann)\",1,[0,0,0,0,0,0,0],\"Q\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"homeopathic potency of decimal korsakovian series\",\"[kp_X]\",\"[KP_X]\",\"homeopathic potency (Korsakov)\",1,[0,0,0,0,0,0,0],\"X\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"homeopathic potency of centesimal korsakovian series\",\"[kp_C]\",\"[KP_C]\",\"homeopathic potency (Korsakov)\",1,[0,0,0,0,0,0,0],\"C\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"homeopathic potency of millesimal korsakovian series\",\"[kp_M]\",\"[KP_M]\",\"homeopathic potency (Korsakov)\",1,[0,0,0,0,0,0,0],\"M\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"homeopathic potency of quintamillesimal korsakovian series\",\"[kp_Q]\",\"[KP_Q]\",\"homeopathic potency (Korsakov)\",1,[0,0,0,0,0,0,0],\"Q\",\"clinical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"equivalent\",\"eq\",\"EQ\",\"amount of substance\",6.0221367e+23,[0,0,0,0,0,0,0],\"eq\",\"chemical\",true,null,null,1,false,false,1,\"equivalents\",\"UCUM\",\"Sub\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"osmole\",\"osm\",\"OSM\",\"amount of substance (dissolved particles)\",6.0221367e+23,[0,0,0,0,0,0,0],\"osm\",\"chemical\",true,null,null,1,false,false,1,\"osmoles; osmols\",\"UCUM\",\"Osmol\",\"Clinical\",\"the number of moles of solute that contribute to the osmotic pressure of a solution\",\"mol\",\"MOL\",\"1\",1,false],[false,\"pH\",\"[pH]\",\"[PH]\",\"acidity\",6.0221366999999994e+26,[-3,0,0,0,0,0,0],\"pH\",\"chemical\",false,null,\"pH\",1,true,false,0,\"pH scale\",\"UCUM\",\"LogCnc\",\"Clinical\",\"Log concentration of H+\",\"mol/l\",null,null,1,false],[false,\"gram percent\",\"g%\",\"G%\",\"mass concentration\",10000,[-3,0,1,0,0,0,0],\"g%\",\"chemical\",true,null,null,1,false,false,0,\"gram %; gram%; grams per deciliter; g/dL; gm per dL; gram percents\",\"UCUM\",\"MCnc\",\"Clinical\",\"equivalent to unit gram per deciliter (g/dL), a unit often used in medical tests to represent solution concentrations\",\"g/dl\",\"G/DL\",\"1\",1,false],[false,\"Svedberg unit\",\"[S]\",\"[S]\",\"sedimentation coefficient\",1e-13,[0,1,0,0,0,0,0],\"S\",\"chemical\",false,null,null,1,false,false,0,\"Sv; 10^-13 seconds; 100 fs; 100 femtoseconds\",\"UCUM\",\"Time\",\"Clinical\",\"unit of time used in measuring particle's sedimentation rate, usually after centrifugation. \",\"s\",\"10*-13.S\",\"1\",1e-13,false],[false,\"high power field (microscope)\",\"[HPF]\",\"[HPF]\",\"view area in microscope\",1,[0,0,0,0,0,0,0],\"HPF\",\"chemical\",false,null,null,1,false,false,0,\"HPF\",\"UCUM\",\"Area\",\"Clinical\",\"area visible under the maximum magnification power of the objective in microscopy (usually 400x)\\n\",\"1\",\"1\",\"1\",1,false],[false,\"low power field (microscope)\",\"[LPF]\",\"[LPF]\",\"view area in microscope\",1,[0,0,0,0,0,0,0],\"LPF\",\"chemical\",false,null,null,1,false,false,0,\"LPF; fields\",\"UCUM\",\"Area\",\"Clinical\",\"area visible under the low magnification of the objective in microscopy (usually 100 x)\\n\",\"1\",\"1\",\"100\",100,false],[false,\"katal\",\"kat\",\"KAT\",\"catalytic activity\",6.0221367e+23,[0,-1,0,0,0,0,0],\"kat\",\"chemical\",true,null,null,1,false,false,1,\"mol/secs; moles per second; mol*sec-1; mol*s-1; mol.s-1; katals; catalytic activity; enzymatic; enzyme units; activities\",\"UCUM\",\"CAct\",\"Clinical\",\"kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.\",\"mol/s\",\"MOL/S\",\"1\",1,false],[false,\"enzyme unit\",\"U\",\"U\",\"catalytic activity\",10036894500000000,[0,-1,0,0,0,0,0],\"U\",\"chemical\",true,null,null,1,false,false,1,\"micromoles per minute; umol/min; umol per minute; umol min-1; enzymatic activity; enzyme activity\",\"UCUM\",\"CAct\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"international unit - arbitrary\",\"[iU]\",\"[IU]\",\"arbitrary\",1,[0,0,0,0,0,0,0],\"IU\",\"chemical\",true,null,null,1,false,true,0,\"international units; IE; F2\",\"UCUM\",\"Arb\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"1\",\"1\",\"1\",1,false],[false,\"international unit - arbitrary\",\"[IU]\",\"[IU]\",\"arbitrary\",1,[0,0,0,0,0,0,0],\"i.U.\",\"chemical\",true,null,null,1,false,true,0,\"international units; IE; F2\",\"UCUM\",\"Arb\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"arbitary unit\",\"[arb'U]\",\"[ARB'U]\",\"arbitrary\",1,[0,0,0,0,0,0,0],\"arb. U\",\"chemical\",false,null,null,1,false,true,0,\"arbitary units; arb units; arbU\",\"UCUM\",\"Arb\",\"Clinical\",\"relative unit of measurement to show the ratio of test measurement to reference measurement\",\"1\",\"1\",\"1\",1,false],[false,\"United States Pharmacopeia unit\",\"[USP'U]\",\"[USP'U]\",\"arbitrary\",1,[0,0,0,0,0,0,0],\"U.S.P.\",\"chemical\",false,null,null,1,false,true,0,\"USP U; USP'U\",\"UCUM\",\"Arb\",\"Clinical\",\"a dose unit to express potency of drugs and vitamins defined by the United States Pharmacopoeia; usually 1 USP = 1 IU\",\"1\",\"1\",\"1\",1,false],[false,\"GPL unit\",\"[GPL'U]\",\"[GPL'U]\",\"biologic activity of anticardiolipin IgG\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"GPL Units; GPL U; IgG anticardiolipin units; IgG Phospholipid\",\"UCUM\",\"ACnc; AMass\",\"Clinical\",\"Units for an antiphospholipid test\",\"1\",\"1\",\"1\",1,false],[false,\"MPL unit\",\"[MPL'U]\",\"[MPL'U]\",\"biologic activity of anticardiolipin IgM\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"MPL units; MPL U; MPL'U; IgM anticardiolipin units; IgM Phospholipid Units \",\"UCUM\",\"ACnc\",\"Clinical\",\"units for antiphospholipid test\",\"1\",\"1\",\"1\",1,false],[false,\"APL unit\",\"[APL'U]\",\"[APL'U]\",\"biologic activity of anticardiolipin IgA\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"APL units; APL U; IgA anticardiolipin; IgA Phospholipid; biologic activity of\",\"UCUM\",\"AMass; ACnc\",\"Clinical\",\"Units for an anti phospholipid syndrome test\",\"1\",\"1\",\"1\",1,false],[false,\"Bethesda unit\",\"[beth'U]\",\"[BETH'U]\",\"biologic activity of factor VIII inhibitor\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"BU\",\"UCUM\",\"ACnc\",\"Clinical\",\"measures of blood coagulation inhibitior for many blood factors\",\"1\",\"1\",\"1\",1,false],[false,\"anti factor Xa unit\",\"[anti'Xa'U]\",\"[ANTI'XA'U]\",\"biologic activity of factor Xa inhibitor (heparin)\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"units\",\"UCUM\",\"ACnc\",\"Clinical\",\"[anti'Xa'U] unit is equivalent to and can be converted to IU/mL. \",\"1\",\"1\",\"1\",1,false],[false,\"Todd unit\",\"[todd'U]\",\"[TODD'U]\",\"biologic activity antistreptolysin O\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"units\",\"UCUM\",\"InvThres; RtoThres\",\"Clinical\",\"the unit for the results of the testing for antistreptolysin O (ASO)\",\"1\",\"1\",\"1\",1,false],[false,\"Dye unit\",\"[dye'U]\",\"[DYE'U]\",\"biologic activity of amylase\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"units\",\"UCUM\",\"CCnc\",\"Obsolete\",\"equivalent to the Somogyi unit, which is an enzyme unit for amylase but better to use U, the standard enzyme unit for measuring catalytic activity\",\"1\",\"1\",\"1\",1,false],[false,\"Somogyi unit\",\"[smgy'U]\",\"[SMGY'U]\",\"biologic activity of amylase\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"Somogyi units; smgy U\",\"UCUM\",\"CAct\",\"Clinical\",\"measures the enzymatic activity of amylase in blood serum - better to use base units mg/mL \",\"1\",\"1\",\"1\",1,false],[false,\"Bodansky unit\",\"[bdsk'U]\",\"[BDSK'U]\",\"biologic activity of phosphatase\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"\",\"UCUM\",\"ACnc\",\"Obsolete\",\"Enzyme unit specific to alkaline phosphatase - better to use standard enzyme unit of U\",\"1\",\"1\",\"1\",1,false],[false,\"King-Armstrong unit\",\"[ka'U]\",\"[KA'U]\",\"biologic activity of phosphatase\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"King-Armstrong Units; King units\",\"UCUM\",\"AMass\",\"Obsolete\",\"enzyme units for acid phosphatase - better to use enzyme unit [U]\",\"1\",\"1\",\"1\",1,false],[false,\"Kunkel unit\",\"[knk'U]\",\"[KNK'U]\",\"arbitrary biologic activity\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,null,\"UCUM\",null,null,null,\"1\",\"1\",\"1\",1,false],[false,\"Mac Lagan unit\",\"[mclg'U]\",\"[MCLG'U]\",\"arbitrary biologic activity\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"galactose index; galactose tolerance test; thymol turbidity test unit; mclg U; units; indexes\",\"UCUM\",\"ACnc\",\"Obsolete\",\"unit for liver tests - previously used in thymol turbidity tests for liver disease diagnoses, and now is sometimes referred to in the oral galactose tolerance test\",\"1\",\"1\",\"1\",1,false],[false,\"tuberculin unit\",\"[tb'U]\",\"[TB'U]\",\"biologic activity of tuberculin\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"TU; units\",\"UCUM\",\"Arb\",\"Clinical\",\"amount of tuberculin antigen -usually in reference to a TB skin test \",\"1\",\"1\",\"1\",1,false],[false,\"50% cell culture infectious dose\",\"[CCID_50]\",\"[CCID_50]\",\"biologic activity (infectivity) of an infectious agent preparation\",1,[0,0,0,0,0,0,0],\"CCID<sub>50</sub>\",\"chemical\",false,null,null,1,false,true,0,\"CCID50; 50% cell culture infective doses\",\"UCUM\",\"NumThres\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"50% tissue culture infectious dose\",\"[TCID_50]\",\"[TCID_50]\",\"biologic activity (infectivity) of an infectious agent preparation\",1,[0,0,0,0,0,0,0],\"TCID<sub>50</sub>\",\"chemical\",false,null,null,1,false,true,0,\"TCID50; 50% tissue culture infective dose\",\"UCUM\",\"NumThres\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"50% embryo infectious dose\",\"[EID_50]\",\"[EID_50]\",\"biologic activity (infectivity) of an infectious agent preparation\",1,[0,0,0,0,0,0,0],\"EID<sub>50</sub>\",\"chemical\",false,null,null,1,false,true,0,\"EID50; 50% embryo infective doses; EID50 Egg Infective Dosage\",\"UCUM\",\"thresNum\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"plaque forming units\",\"[PFU]\",\"[PFU]\",\"amount of an infectious agent\",1,[0,0,0,0,0,0,0],\"PFU\",\"chemical\",false,null,null,1,false,true,0,\"PFU\",\"UCUM\",\"ACnc\",\"Clinical\",\"tests usually report unit as number of PFU per unit volume\",\"1\",\"1\",\"1\",1,false],[false,\"focus forming units (cells)\",\"[FFU]\",\"[FFU]\",\"amount of an infectious agent\",1,[0,0,0,0,0,0,0],\"FFU\",\"chemical\",false,null,null,1,false,true,0,\"FFU\",\"UCUM\",\"EntNum\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"colony forming units\",\"[CFU]\",\"[CFU]\",\"amount of a proliferating organism\",1,[0,0,0,0,0,0,0],\"CFU\",\"chemical\",false,null,null,1,false,true,0,\"CFU\",\"UCUM\",\"Num\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"index of reactivity (allergen)\",\"[IR]\",\"[IR]\",\"amount of an allergen callibrated through in-vivo testing using the Stallergenes® method.\",1,[0,0,0,0,0,0,0],\"IR\",\"chemical\",false,null,null,1,false,true,0,\"IR; indexes\",\"UCUM\",\"Acnc\",\"Clinical\",\"amount of an allergen callibrated through in-vivo testing using the Stallergenes method. Usually reported in tests as IR/mL\",\"1\",\"1\",\"1\",1,false],[false,\"bioequivalent allergen unit\",\"[BAU]\",\"[BAU]\",\"amount of an allergen callibrated through in-vivo testing based on the ID50EAL method of (intradermal dilution for 50mm sum of erythema diameters\",1,[0,0,0,0,0,0,0],\"BAU\",\"chemical\",false,null,null,1,false,true,0,\"BAU; Bioequivalent Allergy Units; bioequivalent allergen units\",\"UCUM\",\"Arb\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"allergy unit\",\"[AU]\",\"[AU]\",\"procedure defined amount of an allergen using some reference standard\",1,[0,0,0,0,0,0,0],\"AU\",\"chemical\",false,null,null,1,false,true,0,\"allergy units; allergen units; AU\",\"UCUM\",\"Arb\",\"Clinical\",\"Most standard test allergy units are reported as [IU] or as %. \",\"1\",\"1\",\"1\",1,false],[false,\"allergen unit for Ambrosia artemisiifolia\",\"[Amb'a'1'U]\",\"[AMB'A'1'U]\",\"procedure defined amount of the major allergen of ragweed.\",1,[0,0,0,0,0,0,0],\"Amb a 1 U\",\"chemical\",false,null,null,1,false,true,0,\"Amb a 1 unit; Antigen E; AgE U; allergen units\",\"UCUM\",\"Arb\",\"Clinical\",\"Amb a 1 is the major allergen in short ragweed, and can be converted Bioequivalent allergen units (BAU) where 350 Amb a 1 U/mL = 100,000 BAU/mL\",\"1\",\"1\",\"1\",1,false],[false,\"protein nitrogen unit (allergen testing)\",\"[PNU]\",\"[PNU]\",\"procedure defined amount of a protein substance\",1,[0,0,0,0,0,0,0],\"PNU\",\"chemical\",false,null,null,1,false,true,0,\"protein nitrogen units; PNU\",\"UCUM\",\"Mass\",\"Clinical\",\"defined as 0.01 ug of phosphotungstic acid-precipitable protein nitrogen. Being replaced by bioequivalent allergy units (BAU).\",\"1\",\"1\",\"1\",1,false],[false,\"Limit of flocculation\",\"[Lf]\",\"[LF]\",\"procedure defined amount of an antigen substance\",1,[0,0,0,0,0,0,0],\"Lf\",\"chemical\",false,null,null,1,false,true,0,\"Lf doses\",\"UCUM\",\"Arb\",\"Clinical\",\"the antigen content  forming 1:1 ratio against 1 unit of antitoxin\",\"1\",\"1\",\"1\",1,false],[false,\"D-antigen unit (polio)\",\"[D'ag'U]\",\"[D'AG'U]\",\"procedure defined amount of a poliomyelitis d-antigen substance\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"DAgU; units\",\"UCUM\",\"Acnc\",\"Clinical\",\"unit of potency of poliovirus vaccine used for poliomyelitis prevention reported as D antigen units/mL. The unit is poliovirus type-specific.\",\"1\",\"1\",\"1\",1,false],[false,\"fibrinogen equivalent units\",\"[FEU]\",\"[FEU]\",\"amount of fibrinogen broken down into the measured d-dimers\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"FEU\",\"UCUM\",\"MCnc\",\"Clinical\",\"Note both the FEU and DDU units are used to report D-dimer measurements. 1 DDU = 1/2 FFU\",\"1\",\"1\",\"1\",1,false],[false,\"ELISA unit\",\"[ELU]\",\"[ELU]\",\"arbitrary ELISA unit\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"Enzyme-Linked Immunosorbent Assay Units; ELU; EL. U\",\"UCUM\",\"ACnc\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"Ehrlich units (urobilinogen)\",\"[EU]\",\"[EU]\",\"Ehrlich unit\",1,[0,0,0,0,0,0,0],null,\"chemical\",false,null,null,1,false,true,0,\"EU/dL; mg{urobilinogen}/dL\",\"UCUM\",\"ACnc\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"neper\",\"Np\",\"NEP\",\"level\",1,[0,0,0,0,0,0,0],\"Np\",\"levels\",true,null,\"ln\",1,true,false,0,\"nepers\",\"UCUM\",\"LogRto\",\"Clinical\",\"logarithmic unit for ratios of measurements of physical field and power quantities, such as gain and loss of electronic signals\",\"1\",null,null,1,false],[false,\"bel\",\"B\",\"B\",\"level\",1,[0,0,0,0,0,0,0],\"B\",\"levels\",true,null,\"lg\",1,true,false,0,\"bels\",\"UCUM\",\"LogRto\",\"Clinical\",\"Logarithm of the ratio of power- or field-type quantities; usually expressed in decibels \",\"1\",null,null,1,false],[false,\"bel sound pressure\",\"B[SPL]\",\"B[SPL]\",\"pressure level\",0.02,[-1,-2,1,0,0,0,0],\"B(SPL)\",\"levels\",true,null,\"lgTimes2\",1,true,false,0,\"bel SPL; B SPL; sound pressure bels\",\"UCUM\",\"LogRto\",\"Clinical\",\"used to measure sound level in acoustics\",\"Pa\",null,null,0.00002,false],[false,\"bel volt\",\"B[V]\",\"B[V]\",\"electric potential level\",1000,[2,-2,1,0,0,-1,0],\"B(V)\",\"levels\",true,null,\"lgTimes2\",1,true,false,0,\"bel V; B V; volts bels\",\"UCUM\",\"LogRtoElp\",\"Clinical\",\"used to express power gain in electrical circuits\",\"V\",null,null,1,false],[false,\"bel millivolt\",\"B[mV]\",\"B[MV]\",\"electric potential level\",1,[2,-2,1,0,0,-1,0],\"B(mV)\",\"levels\",true,null,\"lgTimes2\",1,true,false,0,\"bel mV; B mV; millivolt bels; 10^-3V bels; 10*-3V \",\"UCUM\",\"LogRtoElp\",\"Clinical\",\"used to express power gain in electrical circuits\",\"mV\",null,null,1,false],[false,\"bel microvolt\",\"B[uV]\",\"B[UV]\",\"electric potential level\",0.001,[2,-2,1,0,0,-1,0],\"B(μV)\",\"levels\",true,null,\"lgTimes2\",1,true,false,0,\"bel uV; B uV; microvolts bels; 10^-6V bel; 10*-6V bel\",\"UCUM\",\"LogRto\",\"Clinical\",\"used to express power gain in electrical circuits\",\"uV\",null,null,1,false],[false,\"bel 10 nanovolt\",\"B[10.nV]\",\"B[10.NV]\",\"electric potential level\",0.000010000000000000003,[2,-2,1,0,0,-1,0],\"B(10 nV)\",\"levels\",true,null,\"lgTimes2\",1,true,false,0,\"bel 10 nV; B 10 nV; 10 nanovolts bels\",\"UCUM\",\"LogRtoElp\",\"Clinical\",\"used to express power gain in electrical circuits\",\"nV\",null,null,10,false],[false,\"bel watt\",\"B[W]\",\"B[W]\",\"power level\",1000,[2,-3,1,0,0,0,0],\"B(W)\",\"levels\",true,null,\"lg\",1,true,false,0,\"bel W; b W; b Watt; Watts bels\",\"UCUM\",\"LogRto\",\"Clinical\",\"used to express power\",\"W\",null,null,1,false],[false,\"bel kilowatt\",\"B[kW]\",\"B[KW]\",\"power level\",1000000,[2,-3,1,0,0,0,0],\"B(kW)\",\"levels\",true,null,\"lg\",1,true,false,0,\"bel kW; B kW; kilowatt bel; kW bel; kW B\",\"UCUM\",\"LogRto\",\"Clinical\",\"used to express power\",\"kW\",null,null,1,false],[false,\"stere\",\"st\",\"STR\",\"volume\",1,[3,0,0,0,0,0,0],\"st\",\"misc\",true,null,null,1,false,false,0,\"stère; m3; cubic meter; m^3; meters cubed; metre\",\"UCUM\",\"Vol\",\"Nonclinical\",\"equal to one cubic meter, usually used for measuring firewoord\",\"m3\",\"M3\",\"1\",1,false],[false,\"Ångström\",\"Ao\",\"AO\",\"length\",1.0000000000000002e-10,[1,0,0,0,0,0,0],\"Å\",\"misc\",false,null,null,1,false,false,0,\"Å; Angstroms; Ao; Ångströms\",\"UCUM\",\"Len\",\"Clinical\",\"equal to 10^-10 meters; used to express wave lengths and atom scaled differences \",\"nm\",\"NM\",\"0.1\",0.1,false],[false,\"barn\",\"b\",\"BRN\",\"action area\",9.999999999999999e-29,[2,0,0,0,0,0,0],\"b\",\"misc\",false,null,null,1,false,false,0,\"barns\",\"UCUM\",\"Area\",\"Clinical\",\"used in high-energy physics to express cross-sectional areas\",\"fm2\",\"FM2\",\"100\",100,false],[false,\"technical atmosphere\",\"att\",\"ATT\",\"pressure\",98066499.99999999,[-1,-2,1,0,0,0,0],\"at\",\"misc\",false,null,null,1,false,false,0,\"at; tech atm; tech atmosphere; kgf/cm2; atms; atmospheres\",\"UCUM\",\"Pres\",\"Obsolete\",\"non-SI unit of pressure equal to one kilogram-force per square centimeter\",\"kgf/cm2\",\"KGF/CM2\",\"1\",1,false],[false,\"mho\",\"mho\",\"MHO\",\"electric conductance\",0.001,[-2,1,-1,0,0,2,0],\"mho\",\"misc\",true,null,null,1,false,false,0,\"siemens; ohm reciprocals; Ω^−1; Ω-1 \",\"UCUM\",\"\",\"Obsolete\",\"unit of electric conductance (the inverse of electrical resistance) equal to ohm^-1\",\"S\",\"S\",\"1\",1,false],[false,\"pound per square inch\",\"[psi]\",\"[PSI]\",\"pressure\",6894757.293168359,[-1,-2,1,0,0,0,0],\"psi\",\"misc\",false,null,null,1,false,false,0,\"psi; lb/in2; lb per in2\",\"UCUM\",\"Pres\",\"Clinical\",\"\",\"[lbf_av]/[in_i]2\",\"[LBF_AV]/[IN_I]2\",\"1\",1,false],[false,\"circle - plane angle\",\"circ\",\"CIRC\",\"plane angle\",6.283185307179586,[0,0,0,1,0,0,0],\"circ\",\"misc\",false,null,null,1,false,false,0,\"angles; circles\",\"UCUM\",\"Angle\",\"Clinical\",\"\",\"[pi].rad\",\"[PI].RAD\",\"2\",2,false],[false,\"spere - solid angle\",\"sph\",\"SPH\",\"solid angle\",12.566370614359172,[0,0,0,2,0,0,0],\"sph\",\"misc\",false,null,null,1,false,false,0,\"speres\",\"UCUM\",\"Angle\",\"Clinical\",\"equal to the solid angle of an entire sphere = 4πsr (sr = steradian) \",\"[pi].sr\",\"[PI].SR\",\"4\",4,false],[false,\"metric carat\",\"[car_m]\",\"[CAR_M]\",\"mass\",0.2,[0,0,1,0,0,0,0],\"ct<sub>m</sub>\",\"misc\",false,null,null,1,false,false,0,\"carats; ct; car m\",\"UCUM\",\"Mass\",\"Nonclinical\",\"unit of mass for gemstones\",\"g\",\"G\",\"2e-1\",0.2,false],[false,\"carat of gold alloys\",\"[car_Au]\",\"[CAR_AU]\",\"mass fraction\",0.041666666666666664,[0,0,0,0,0,0,0],\"ct<sub><r>Au</r></sub>\",\"misc\",false,null,null,1,false,false,0,\"karats; k; kt; car au; carats\",\"UCUM\",\"MFr\",\"Nonclinical\",\"unit of purity for gold alloys\",\"/24\",\"/24\",\"1\",1,false],[false,\"Smoot\",\"[smoot]\",\"[SMOOT]\",\"length\",1.7018000000000002,[1,0,0,0,0,0,0],null,\"misc\",false,null,null,1,false,false,0,\"\",\"UCUM\",\"Len\",\"Nonclinical\",\"prank unit of length from MIT\",\"[in_i]\",\"[IN_I]\",\"67\",67,false],[false,\"meter per square seconds per square root of hertz\",\"[m/s2/Hz^(1/2)]\",\"[M/S2/HZ^(1/2)]\",\"amplitude spectral density\",1,[2,-3,0,0,0,0,0],null,\"misc\",false,null,\"sqrt\",1,true,false,0,\"m/s2/(Hz^.5); m/s2/(Hz^(1/2)); m per s2 per Hz^1/2\",\"UCUM\",\"\",\"Constant\",\"measures amplitude spectral density, and is equal to the square root of power spectral density\\n \",\"m2/s4/Hz\",null,null,1,false],[false,\"bit - logarithmic\",\"bit_s\",\"BIT_S\",\"amount of information\",1,[0,0,0,0,0,0,0],\"bit<sub>s</sub>\",\"infotech\",false,null,\"ld\",1,true,false,0,\"bit-s; bit s; bit logarithmic\",\"UCUM\",\"LogA\",\"Nonclinical\",\"defined as the log base 2 of the number of distinct signals; cannot practically be used to express more than 1000 bits\\n\\nIn information theory, the definition of the amount of self-information and information entropy is often expressed with the binary logarithm (log base 2)\",\"1\",null,null,1,false],[false,\"bit\",\"bit\",\"BIT\",\"amount of information\",1,[0,0,0,0,0,0,0],\"bit\",\"infotech\",true,null,null,1,false,false,0,\"bits\",\"UCUM\",\"\",\"Nonclinical\",\"dimensionless information unit of 1 used in computing and digital communications\",\"1\",\"1\",\"1\",1,false],[false,\"byte\",\"By\",\"BY\",\"amount of information\",8,[0,0,0,0,0,0,0],\"B\",\"infotech\",true,null,null,1,false,false,0,\"bytes\",\"UCUM\",\"\",\"Nonclinical\",\"equal to 8 bits\",\"bit\",\"bit\",\"8\",8,false],[false,\"baud\",\"Bd\",\"BD\",\"signal transmission rate\",1,[0,1,0,0,0,0,0],\"Bd\",\"infotech\",true,null,\"inv\",1,false,false,0,\"Bd; bauds\",\"UCUM\",\"Freq\",\"Nonclinical\",\"unit to express rate in symbols per second or pulses per second. \",\"s\",\"/s\",\"1\",1,false],[false,\"per twelve hour\",\"/(12.h)\",\"/HR\",\"\",0.000023148148148148147,[0,-1,0,0,0,0,0],\"/h\",null,false,null,null,1,false,false,0,\"per 12 hours; 12hrs; 12 hrs; /12hrs\",\"LOINC\",\"Rat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per arbitrary unit\",\"/[arb'U]\",\"/[ARB'U]\",\"\",1,[0,0,0,0,0,0,0],\"/arb/ U\",null,false,null,null,1,false,true,0,\"/arbU\",\"LOINC\",\"InvA \",\"Clinical\",\"\",null,null,null,null,false],[false,\"per high power field\",\"/[HPF]\",\"/[HPF]\",\"\",1,[0,0,0,0,0,0,0],\"/HPF\",null,false,null,null,1,false,false,0,\"/HPF; per HPF\",\"LOINC\",\"Naric\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per international unit\",\"/[IU]\",\"/[IU]\",\"\",1,[0,0,0,0,0,0,0],\"/i/U.\",null,false,null,null,1,false,true,0,\"international units; /IU; per IU\",\"LOINC\",\"InvA\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",null,null,null,null,false],[false,\"per low power field\",\"/[LPF]\",\"/[LPF]\",\"\",1,[0,0,0,0,0,0,0],\"/LPF\",null,false,null,null,1,false,false,0,\"/LPF; per LPF\",\"LOINC\",\"Naric\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per 10 billion  \",\"/10*10\",\"/10*10\",\"\",1e-10,[0,0,0,0,0,0,0],\"/10<sup>10<.sup>\",null,false,null,null,1,false,false,0,\"/10^10; per 10*10\",\"LOINC\",\"NFr\",\"Clinical\",\"used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator\",null,null,null,null,false],[false,\"per trillion \",\"/10*12\",\"/10*12\",\"\",1e-12,[0,0,0,0,0,0,0],\"/10<sup>12<.sup>\",null,false,null,null,1,false,false,0,\"/10^12; per 10*12\",\"LOINC\",\"NFr\",\"Clinical\",\"used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator\",null,null,null,null,false],[false,\"per thousand\",\"/10*3\",\"/10*3\",\"\",0.001,[0,0,0,0,0,0,0],\"/10<sup>3<.sup>\",null,false,null,null,1,false,false,0,\"/10^3; per 10*3\",\"LOINC\",\"NFr\",\"Clinical\",\"used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator\",null,null,null,null,false],[false,\"per million\",\"/10*6\",\"/10*6\",\"\",0.000001,[0,0,0,0,0,0,0],\"/10<sup>6<.sup>\",null,false,null,null,1,false,false,0,\"/10^6; per 10*6;\",\"LOINC\",\"NFr\",\"Clinical\",\"used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator\",null,null,null,null,false],[false,\"per billion\",\"/10*9\",\"/10*9\",\"\",1e-9,[0,0,0,0,0,0,0],\"/10<sup>9<.sup>\",null,false,null,null,1,false,false,0,\"/10^9; per 10*9\",\"LOINC\",\"NFr\",\"Clinical\",\"used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator\",null,null,null,null,false],[false,\"per 100\",\"/100\",\"\",\"\",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"per hundred; 10^2; 10*2\",\"LOINC\",\"NFr\",\"Clinical\",\"used for counting entities, e.g. blood cells; usually these kinds of terms have numerators such as moles or milligrams, and counting that amount per the number in the denominator\",null,null,null,null,false],[false,\"per 100 cells\",\"/100{cells}\",\"\",\"\",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"/100 cells; /100cells; per hundred\",\"LOINC\",\"EntMass; EntNum; NFr\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per 100 neutrophils\",\"/100{neutrophils}\",\"\",\"\",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"/100 neutrophils; /100neutrophils; per hundred\",\"LOINC\",\"EntMass; EntNum; NFr\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per 100 spermatozoa\",\"/100{spermatozoa}\",\"\",\"\",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"/100 spermatozoa; /100spermatozoa; per hundred\",\"LOINC\",\"NFr\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per 100 white blood cells\",\"/100{WBCs}\",\"\",\"\",0.01,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"/100 WBCs; /100WBCs; per hundred\",\"LOINC\",\"Ratio; NFr\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per year\",\"/a\",\"/ANN\",\"\",3.168808781402895e-8,[0,-1,0,0,0,0,0],\"/a\",null,false,null,null,1,false,false,0,\"/Years; /yrs; yearly\",\"LOINC\",\"NRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per centimeter of water\",\"/cm[H2O]\",\"/CM[H2O]\",\"\",0.000010197162129779282,[1,2,-1,0,0,0,0],\"/cm HO<sub><r>2<.r></sub>\",null,false,null,null,1,false,false,0,\"/cmH2O; /cm H2O; centimeters; centimetres\",\"LOINC\",\"InvPress\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per day\",\"/d\",\"/D\",\"\",0.000011574074074074073,[0,-1,0,0,0,0,0],\"/d\",null,false,null,null,1,false,false,0,\"/dy; per day\",\"LOINC\",\"NRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per deciliter\",\"/dL\",\"/DL\",\"\",10000,[-3,0,0,0,0,0,0],\"/dL\",null,false,null,null,1,false,false,0,\"per dL; /deciliter; decilitre\",\"LOINC\",\"NCnc\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per gram\",\"/g\",\"/G\",\"\",1,[0,0,-1,0,0,0,0],\"/g\",null,false,null,null,1,false,false,0,\"/gm; /gram; per g\",\"LOINC\",\"NCnt\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per hour\",\"/h\",\"/HR\",\"\",0.0002777777777777778,[0,-1,0,0,0,0,0],\"/h\",null,false,null,null,1,false,false,0,\"/hr; /hour; per hr\",\"LOINC\",\"NRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per kilogram\",\"/kg\",\"/KG\",\"\",0.001,[0,0,-1,0,0,0,0],\"/kg\",null,false,null,null,1,false,false,0,\"per kg; per kilogram\",\"LOINC\",\"NCnt\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per liter\",\"/L\",\"/L\",\"\",1000,[-3,0,0,0,0,0,0],\"/L\",null,false,null,null,1,false,false,0,\"/liter; litre\",\"LOINC\",\"NCnc\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per square meter\",\"/m2\",\"/M2\",\"\",1,[-2,0,0,0,0,0,0],\"/m<sup>2<.sup>\",null,false,null,null,1,false,false,0,\"/m^2; /m*2; /sq. m; per square meter; meter squared; metre\",\"LOINC\",\"Naric\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per cubic meter\",\"/m3\",\"/M3\",\"\",1,[-3,0,0,0,0,0,0],\"/m<sup>3<.sup>\",null,false,null,null,1,false,false,0,\"/m^3; /m*3; /cu. m; per cubic meter; meter cubed; per m3; metre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per milligram\",\"/mg\",\"/MG\",\"\",1000,[0,0,-1,0,0,0,0],\"/mg\",null,false,null,null,1,false,false,0,\"/milligram; per mg\",\"LOINC\",\"NCnt\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per minute\",\"/min\",\"/MIN\",\"\",0.016666666666666666,[0,-1,0,0,0,0,0],\"/min\",null,false,null,null,1,false,false,0,\"/minute; per mins; breaths beats per minute\",\"LOINC\",\"NRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per milliliter\",\"/mL\",\"/ML\",\"\",1000000,[-3,0,0,0,0,0,0],\"/mL\",null,false,null,null,1,false,false,0,\"/milliliter; per mL; millilitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per millimeter\",\"/mm\",\"/MM\",\"\",1000,[-1,0,0,0,0,0,0],\"/mm\",null,false,null,null,1,false,false,0,\"/millimeter; per mm; millimetre\",\"LOINC\",\"InvLen\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per month\",\"/mo\",\"/MO\",\"\",3.802570537683474e-7,[0,-1,0,0,0,0,0],\"/mo\",null,false,null,null,1,false,false,0,\"/month; per mo; monthly; month\",\"LOINC\",\"NRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per second\",\"/s\",\"/S\",\"\",1,[0,-1,0,0,0,0,0],\"/s\",null,false,null,null,1,false,false,0,\"/second; /sec; per sec; frequency; Hertz; Herz; Hz; becquerels; Bq; s-1; s^-1\",\"LOINC\",\"NRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per enzyme unit\",\"/U\",\"/U\",\"\",9.963241120049633e-17,[0,1,0,0,0,0,0],\"/U\",null,false,null,null,1,false,false,-1,\"/enzyme units; per U\",\"LOINC\",\"InvC; NCat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",null,null,null,null,false],[false,\"per microliter\",\"/uL\",\"/UL\",\"\",999999999.9999999,[-3,0,0,0,0,0,0],\"/μL\",null,false,null,null,1,false,false,0,\"/microliter; microlitre; /mcl; per uL\",\"LOINC\",\"ACnc\",\"Clinical\",\"\",null,null,null,null,false],[false,\"per week\",\"/wk\",\"/WK\",\"\",0.0000016534391534391535,[0,-1,0,0,0,0,0],\"/wk\",null,false,null,null,1,false,false,0,\"/week; per wk; weekly, weeks\",\"LOINC\",\"NRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"APL unit per milliliter\",\"[APL'U]/mL\",\"[APL'U]/ML\",\"biologic activity of anticardiolipin IgA\",1000000,[-3,0,0,0,0,0,0],\"/mL\",\"chemical\",false,null,null,1,false,true,0,\"APL/mL; APL'U/mL; APL U/mL; APL/milliliter; IgA anticardiolipin units per milliliter; IgA Phospholipid Units; millilitre; biologic activity of\",\"LOINC\",\"ACnc\",\"Clinical\",\"Units for an anti phospholipid syndrome test\",\"1\",\"1\",\"1\",1,false],[false,\"arbitrary unit per milliliter\",\"[arb'U]/mL\",\"[ARB'U]/ML\",\"arbitrary\",1000000,[-3,0,0,0,0,0,0],\"(arb. U)/mL\",\"chemical\",false,null,null,1,false,true,0,\"arb'U/mL; arbU/mL; arb U/mL; arbitrary units per milliliter; millilitre\",\"LOINC\",\"ACnc\",\"Clinical\",\"relative unit of measurement to show the ratio of test measurement to reference measurement\",\"1\",\"1\",\"1\",1,false],[false,\"colony forming units per liter\",\"[CFU]/L\",\"[CFU]/L\",\"amount of a proliferating organism\",1000,[-3,0,0,0,0,0,0],\"CFU/L\",\"chemical\",false,null,null,1,false,true,0,\"CFU per Liter; CFU/L\",\"LOINC\",\"NCnc\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"colony forming units per milliliter\",\"[CFU]/mL\",\"[CFU]/ML\",\"amount of a proliferating organism\",1000000,[-3,0,0,0,0,0,0],\"CFU/mL\",\"chemical\",false,null,null,1,false,true,0,\"CFU per mL; CFU/mL\",\"LOINC\",\"NCnc\",\"Clinical\",\"\",\"1\",\"1\",\"1\",1,false],[false,\"foot per foot - US\",\"[ft_us]/[ft_us]\",\"[FT_US]/[FT_US]\",\"length\",1,[0,0,0,0,0,0,0],\"(ft<sub>us</sub>)/(ft<sub>us</sub>)\",\"us-lengths\",false,null,null,1,false,false,0,\"ft/ft; ft per ft; feet per feet; visual acuity\",\"\",\"LenRto\",\"Clinical\",\"distance ratio to measure 20:20 vision\",\"m/3937\",\"M/3937\",\"1200\",1200,false],[false,\"GPL unit per milliliter\",\"[GPL'U]/mL\",\"[GPL'U]/ML\",\"biologic activity of anticardiolipin IgG\",1000000,[-3,0,0,0,0,0,0],\"/mL\",\"chemical\",false,null,null,1,false,true,0,\"GPL U/mL; GPL'U/mL; GPL/mL; GPL U per mL; IgG Phospholipid Units per milliliters; IgG anticardiolipin units; millilitres \",\"LOINC\",\"ACnc; AMass\",\"Clinical\",\"Units for an antiphospholipid test\",\"1\",\"1\",\"1\",1,false],[false,\"international unit per 2 hour\",\"[IU]/(2.h)\",\"[IU]/HR\",\"arbitrary\",0.0001388888888888889,[0,-1,0,0,0,0,0],\"(i.U.)/h\",\"chemical\",true,null,null,1,false,true,0,\"IU/2hrs; IU/2 hours; IU per 2 hrs; international units per 2 hours\",\"LOINC\",\"ARat\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per 24 hour\",\"[IU]/(24.h)\",\"[IU]/HR\",\"arbitrary\",0.000011574074074074073,[0,-1,0,0,0,0,0],\"(i.U.)/h\",\"chemical\",true,null,null,1,false,true,0,\"IU/24hr; IU/24 hours; IU per 24 hrs; international units per 24 hours\",\"LOINC\",\"ARat\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per day\",\"[IU]/d\",\"[IU]/D\",\"arbitrary\",0.000011574074074074073,[0,-1,0,0,0,0,0],\"(i.U.)/d\",\"chemical\",true,null,null,1,false,true,0,\"IU/dy; IU/days; IU per dys; international units per day\",\"LOINC\",\"ARat\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per deciliter\",\"[IU]/dL\",\"[IU]/DL\",\"arbitrary\",10000,[-3,0,0,0,0,0,0],\"(i.U.)/dL\",\"chemical\",true,null,null,1,false,true,0,\"IU/dL; IU per dL; international units per deciliters; decilitres\",\"LOINC\",\"ACnc\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per gram\",\"[IU]/g\",\"[IU]/G\",\"arbitrary\",1,[0,0,-1,0,0,0,0],\"(i.U.)/g\",\"chemical\",true,null,null,1,false,true,0,\"IU/gm; IU/gram; IU per gm; IU per g; international units per gram\",\"LOINC\",\"ACnt\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per hour\",\"[IU]/h\",\"[IU]/HR\",\"arbitrary\",0.0002777777777777778,[0,-1,0,0,0,0,0],\"(i.U.)/h\",\"chemical\",true,null,null,1,false,true,0,\"IU/hrs; IU per hours; international units per hour\",\"LOINC\",\"ARat\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per kilogram\",\"[IU]/kg\",\"[IU]/KG\",\"arbitrary\",0.001,[0,0,-1,0,0,0,0],\"(i.U.)/kg\",\"chemical\",true,null,null,1,false,true,0,\"IU/kg; IU/kilogram; IU per kg; units\",\"LOINC\",\"ACnt\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per kilogram per day\",\"[IU]/kg/d\",\"[IU]/KG/D\",\"arbitrary\",1.1574074074074074e-8,[0,-1,-1,0,0,0,0],\"(i.U.)/kg/d\",\"chemical\",true,null,null,1,false,true,0,\"IU/kg/dy; IU/kg/day; IU/kilogram/day; IU per kg per day; units\",\"LOINC\",\"ACntRat\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per liter\",\"[IU]/L\",\"[IU]/L\",\"arbitrary\",1000,[-3,0,0,0,0,0,0],\"(i.U.)/L\",\"chemical\",true,null,null,1,false,true,0,\"IU/L; IU/liter; IU per liter; units; litre\",\"LOINC\",\"ACnc\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per minute\",\"[IU]/min\",\"[IU]/MIN\",\"arbitrary\",0.016666666666666666,[0,-1,0,0,0,0,0],\"(i.U.)/min\",\"chemical\",true,null,null,1,false,true,0,\"IU/min; IU/minute; IU per minute; international units\",\"LOINC\",\"ARat\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"international unit per milliliter\",\"[IU]/mL\",\"[IU]/ML\",\"arbitrary\",1000000,[-3,0,0,0,0,0,0],\"(i.U.)/mL\",\"chemical\",true,null,null,1,false,true,0,\"IU/mL; IU per mL; international units per milliliter; millilitre\",\"LOINC\",\"ACnc\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"MPL unit per milliliter\",\"[MPL'U]/mL\",\"[MPL'U]/ML\",\"biologic activity of anticardiolipin IgM\",1000000,[-3,0,0,0,0,0,0],\"/mL\",\"chemical\",false,null,null,1,false,true,0,\"MPL/mL; MPL U/mL; MPL'U/mL; IgM anticardiolipin units; IgM Phospholipid Units; millilitre \",\"LOINC\",\"ACnc\",\"Clinical\",\"units for antiphospholipid test\\n\",\"1\",\"1\",\"1\",1,false],[false,\"number per high power field\",\"{#}/[HPF]\",\"/[HPF]\",\"\",1,[0,0,0,0,0,0,0],\"/HPF\",null,false,null,null,1,false,false,0,\"#/HPF; # per HPF; number/HPF; numbers per high power field\",\"LOINC\",\"Naric\",\"Clinical\",\"\",null,null,null,null,false],[false,\"number per low power field\",\"{#}/[LPF]\",\"/[LPF]\",\"\",1,[0,0,0,0,0,0,0],\"/LPF\",null,false,null,null,1,false,false,0,\"#/LPF; # per LPF; number/LPF; numbers per low power field\",\"LOINC\",\"Naric\",\"Clinical\",\"\",null,null,null,null,false],[false,\"IgA antiphosphatidylserine unit \",\"{APS'U}\",\"\",\"\",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"APS Unit; Phosphatidylserine Antibody IgA Units\",\"LOINC\",\"ACnc\",\"Clinical\",\"unit for antiphospholipid test\",null,null,null,null,false],[false,\"EIA index\",\"{EIA_index}\",\"\",\"\",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"enzyme immunoassay index\",\"LOINC\",\"ACnc\",\"Clinical\",\"\",null,null,null,null,false],[false,\"kaolin clotting time\",\"{KCT'U}\",\"\",\"\",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"KCT\",\"LOINC\",\"Time\",\"Clinical\",\"sensitive test to detect lupus anticoagulants; measured in seconds\",null,null,null,null,false],[false,\"IgM antiphosphatidylserine unit\",\"{MPS'U}\",\"\",\"\",1,[0,0,0,0,0,0,0],null,null,false,null,null,1,false,false,0,\"Phosphatidylserine Antibody IgM Measurement \",\"LOINC\",\"ACnc\",\"Clinical\",\"\",null,null,null,null,false],[false,\"trillion per liter\",\"10*12/L\",\"(10*12)/L\",\"number\",1000000000000000,[-3,0,0,0,0,0,0],\"(10<sup>12</sup>)/L\",\"dimless\",false,null,null,1,false,false,0,\"10^12/L; 10*12 per Liter; trillion per liter; litre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"10^3 (used for cell count)\",\"10*3\",\"10*3\",\"number\",1000,[0,0,0,0,0,0,0],\"10<sup>3</sup>\",\"dimless\",false,null,null,1,false,false,0,\"10^3; thousand\",\"LOINC\",\"Num\",\"Clinical\",\"usually used for counting entities (e.g. blood cells) per volume\",\"1\",\"1\",\"10\",10,false],[false,\"thousand per liter\",\"10*3/L\",\"(10*3)/L\",\"number\",1000000,[-3,0,0,0,0,0,0],\"(10<sup>3</sup>)/L\",\"dimless\",false,null,null,1,false,false,0,\"10^3/L; 10*3 per liter; litre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"thousand per milliliter\",\"10*3/mL\",\"(10*3)/ML\",\"number\",1000000000,[-3,0,0,0,0,0,0],\"(10<sup>3</sup>)/mL\",\"dimless\",false,null,null,1,false,false,0,\"10^3/mL; 10*3 per mL; thousand per milliliter; millilitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"thousand per microliter\",\"10*3/uL\",\"(10*3)/UL\",\"number\",999999999999.9999,[-3,0,0,0,0,0,0],\"(10<sup>3</sup>)/μL\",\"dimless\",false,null,null,1,false,false,0,\"10^3/uL; 10*3 per uL; thousand per microliter; microlitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"10 thousand per microliter\",\"10*4/uL\",\"(10*4)/UL\",\"number\",10000000000000,[-3,0,0,0,0,0,0],\"(10<sup>4</sup>)/μL\",\"dimless\",false,null,null,1,false,false,0,\"10^4/uL; 10*4 per uL; microlitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"10^5 \",\"10*5\",\"10*5\",\"number\",100000,[0,0,0,0,0,0,0],\"10<sup>5</sup>\",\"dimless\",false,null,null,1,false,false,0,\"one hundred thousand\",\"LOINC\",\"Num\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"10^6\",\"10*6\",\"10*6\",\"number\",1000000,[0,0,0,0,0,0,0],\"10<sup>6</sup>\",\"dimless\",false,null,null,1,false,false,0,\"\",\"LOINC\",\"Num\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"million colony forming unit per liter\",\"10*6.[CFU]/L\",\"(10*6).[CFU]/L\",\"number\",1000000000,[-3,0,0,0,0,0,0],\"(10<sup>6</sup>).CFU/L\",\"dimless\",false,null,null,1,false,true,0,\"10*6 CFU/L; 10^6 CFU/L; 10^6CFU; 10^6 CFU per liter; million colony forming units; litre\",\"LOINC\",\"ACnc\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"million international unit\",\"10*6.[IU]\",\"(10*6).[IU]\",\"number\",1000000,[0,0,0,0,0,0,0],\"(10<sup>6</sup>).(i.U.)\",\"dimless\",false,null,null,1,false,true,0,\"10*6 IU; 10^6 IU; international units\",\"LOINC\",\"arb\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"1\",\"1\",\"10\",10,false],[false,\"million per 24 hour\",\"10*6/(24.h)\",\"(10*6)/HR\",\"number\",11.574074074074074,[0,-1,0,0,0,0,0],\"(10<sup>6</sup>)/h\",\"dimless\",false,null,null,1,false,false,0,\"10*6/24hrs; 10^6/24 hrs; 10*6 per 24 hrs; 10^6 per 24 hours\",\"LOINC\",\"NRat\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"million per kilogram\",\"10*6/kg\",\"(10*6)/KG\",\"number\",1000,[0,0,-1,0,0,0,0],\"(10<sup>6</sup>)/kg\",\"dimless\",false,null,null,1,false,false,0,\"10^6/kg; 10*6 per kg; 10*6 per kilogram; millions\",\"LOINC\",\"NCnt\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"million per liter\",\"10*6/L\",\"(10*6)/L\",\"number\",1000000000,[-3,0,0,0,0,0,0],\"(10<sup>6</sup>)/L\",\"dimless\",false,null,null,1,false,false,0,\"10^6/L; 10*6 per Liter; 10^6 per Liter; litre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"million per milliliter\",\"10*6/mL\",\"(10*6)/ML\",\"number\",1000000000000,[-3,0,0,0,0,0,0],\"(10<sup>6</sup>)/mL\",\"dimless\",false,null,null,1,false,false,0,\"10^6/mL; 10*6 per mL; 10*6 per milliliter; millilitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"million per microliter\",\"10*6/uL\",\"(10*6)/UL\",\"number\",1000000000000000,[-3,0,0,0,0,0,0],\"(10<sup>6</sup>)/μL\",\"dimless\",false,null,null,1,false,false,0,\"10^6/uL; 10^6 per uL; 10^6/mcl; 10^6 per mcl; 10^6 per microliter; microlitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"10^8\",\"10*8\",\"10*8\",\"number\",100000000,[0,0,0,0,0,0,0],\"10<sup>8</sup>\",\"dimless\",false,null,null,1,false,false,0,\"100 million; one hundred million; 10^8\",\"LOINC\",\"Num\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"billion per liter\",\"10*9/L\",\"(10*9)/L\",\"number\",1000000000000,[-3,0,0,0,0,0,0],\"(10<sup>9</sup>)/L\",\"dimless\",false,null,null,1,false,false,0,\"10^9/L; 10*9 per Liter; litre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"billion per milliliter\",\"10*9/mL\",\"(10*9)/ML\",\"number\",1000000000000000,[-3,0,0,0,0,0,0],\"(10<sup>9</sup>)/mL\",\"dimless\",false,null,null,1,false,false,0,\"10^9/mL; 10*9 per mL; 10^9 per mL; 10*9 per milliliter; millilitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"billion per microliter\",\"10*9/uL\",\"(10*9)/UL\",\"number\",1000000000000000000,[-3,0,0,0,0,0,0],\"(10<sup>9</sup>)/μL\",\"dimless\",false,null,null,1,false,false,0,\"10^9/uL; 10^9 per uL; 10^9/mcl; 10^9 per mcl; 10*9 per uL; 10*9 per mcl; 10*9/mcl; 10^9 per microliter; microlitre\",\"LOINC\",\"NCncn\",\"Clinical\",\"\",\"1\",\"1\",\"10\",10,false],[false,\"10 liter per minute per square meter\",\"10.L/(min.m2)\",\"L/(MIN.M2)\",\"\",0.00016666666666666666,[1,-1,0,0,0,0,0],\"L/(min.(m<sup>2</sup>))\",null,false,null,null,1,false,false,0,\"10 liters per minutes per square meter; 10 L per min per m2; m^2; 10 L/(min*m2); 10L/(min*m^2); litres; sq. meter; metre; meters squared\",\"LOINC\",\"ArVRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"10 liter per minute\",\"10.L/min\",\"L/MIN\",\"\",0.00016666666666666666,[3,-1,0,0,0,0,0],\"L/min\",null,false,null,null,1,false,false,0,\"10 liters per minute; 10 L per min; 10L; 10 L/min; litre\",\"LOINC\",\"VRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"10 micronewton second per centimeter to the fifth power per square meter\",\"10.uN.s/(cm5.m2)\",\"(UN.S)/(CM5.M2)\",\"\",100000000,[-6,-1,1,0,0,0,0],\"(μN.s)/(cm<sup>5</sup>).(m<sup>2</sup>)\",null,false,null,null,1,false,false,0,\"dyne seconds per centimeter5 and square meter; dyn.s/(cm5.m2); dyn.s/cm5/m2; cm^5; m^2\",\"LOINC\",\"\",\"Clinical\",\"unit to measure systemic vascular resistance per body surface area\",null,null,null,null,false],[false,\"24 hour\",\"24.h\",\"HR\",\"\",86400,[0,1,0,0,0,0,0],\"h\",null,false,null,null,1,false,false,0,\"24hrs; 24 hrs; 24 hours; days; dy\",\"LOINC\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[false,\"ampere per meter\",\"A/m\",\"A/M\",\"electric current\",1,[-1,-1,0,0,0,1,0],\"A/m\",\"si\",true,null,null,1,false,false,0,\"A/m; amp/meter; magnetic field strength; H; B; amperes per meter; metre\",\"LOINC\",\"\",\"Clinical\",\"unit of magnetic field strength\",\"C/s\",\"C/S\",\"1\",1,false],[true,\"centigram\",\"cg\",\"CG\",\"mass\",0.01,[0,0,1,0,0,0,0],\"cg\",null,false,\"M\",null,1,false,false,0,\"centigrams; cg; cgm\",\"LOINC\",\"Mass\",\"Clinical\",\"\",null,null,null,null,false],[false,\"centiliter\",\"cL\",\"CL\",\"volume\",0.00001,[3,0,0,0,0,0,0],\"cL\",\"iso1000\",true,null,null,1,false,false,0,\"centiliters; centilitres\",\"LOINC\",\"Vol\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[true,\"centimeter\",\"cm\",\"CM\",\"length\",0.01,[1,0,0,0,0,0,0],\"cm\",null,false,\"L\",null,1,false,false,0,\"centimeters; centimetres\",\"LOINC\",\"Len\",\"Clinical\",\"\",null,null,null,null,false],[false,\"centimeter of water\",\"cm[H2O]\",\"CM[H2O]\",\"pressure\",98066.5,[-1,-2,1,0,0,0,0],\"cm HO<sub><r>2</r></sub>\",\"clinical\",true,null,null,1,false,false,0,\"cm H2O; cmH2O; centimetres; pressure\",\"LOINC\",\"Pres\",\"Clinical\",\"unit of pressure mostly applies to blood pressure\",\"kPa\",\"KPAL\",\"980665e-5\",9.80665,false],[false,\"centimeter of water per liter per second\",\"cm[H2O]/L/s\",\"(CM[H2O]/L)/S\",\"pressure\",98066500,[-4,-3,1,0,0,0,0],\"(cm HO<sub><r>2</r></sub>)/L/s\",\"clinical\",true,null,null,1,false,false,0,\"cm[H2O]/(L/s); cm[H2O].s/L; cm H2O/L/sec; cmH2O/L/sec; cmH2O/Liter; cmH2O per L per secs; centimeters of water per liters per second; centimetres; litres; cm[H2O]/(L/s)\",\"LOINC\",\"PresRat\",\"Clinical\",\"unit used to measure mean pulmonary resistance\",\"kPa\",\"KPAL\",\"980665e-5\",9.80665,false],[false,\"centimeter of water per second per meter\",\"cm[H2O]/s/m\",\"(CM[H2O]/S)/M\",\"pressure\",98066.5,[-2,-3,1,0,0,0,0],\"(cm HO<sub><r>2</r></sub>)/s/m\",\"clinical\",true,null,null,1,false,false,0,\"cm[H2O]/(s.m); cm H2O/s/m; cmH2O; cmH2O/sec/m; cmH2O per secs per meters; centimeters of water per seconds per meter; centimetres; metre\",\"LOINC\",\"PresRat\",\"Clinical\",\"unit used to measure pulmonary pressure time product\",\"kPa\",\"KPAL\",\"980665e-5\",9.80665,false],[false,\"centimeter of mercury\",\"cm[Hg]\",\"CM[HG]\",\"pressure\",1333220,[-1,-2,1,0,0,0,0],\"cm Hg\",\"clinical\",true,null,null,1,false,false,0,\"centimeters of mercury; centimetres; cmHg; cm Hg\",\"LOINC\",\"Pres\",\"Clinical\",\"unit of pressure where 1 cmHg = 10 torr\",\"kPa\",\"KPAL\",\"133.3220\",133.322,false],[true,\"square centimeter\",\"cm2\",\"CM2\",\"length\",0.0001,[2,0,0,0,0,0,0],\"cm<sup>2</sup>\",null,false,\"L\",null,1,false,false,0,\"cm^2; sq cm; centimeters squared; square centimeters; centimetre; area\",\"LOINC\",\"Area\",\"Clinical\",\"\",null,null,null,null,false],[true,\"square centimeter per second\",\"cm2/s\",\"CM2/S\",\"length\",0.0001,[2,-1,0,0,0,0,0],\"(cm<sup>2</sup>)/s\",null,false,\"L\",null,1,false,false,0,\"cm^2/sec; square centimeters per second; sq cm per sec; cm2; centimeters squared; centimetres\",\"LOINC\",\"AreaRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"centipoise\",\"cP\",\"CP\",\"dynamic viscosity\",1,[-1,-1,1,0,0,0,0],\"cP\",\"cgs\",true,null,null,1,false,false,0,\"cps; centiposes\",\"LOINC\",\"Visc\",\"Clinical\",\"unit of dynamic viscosity in the CGS system with base units: 10^−3 Pa.s = 1 mPa·.s (1 millipascal second)\",\"dyn.s/cm2\",\"DYN.S/CM2\",\"1\",1,false],[false,\"centistoke\",\"cSt\",\"CST\",\"kinematic viscosity\",0.0000010000000000000002,[2,-1,0,0,0,0,0],\"cSt\",\"cgs\",true,null,null,1,false,false,0,\"centistokes\",\"LOINC\",\"Visc\",\"Clinical\",\"unit for kinematic viscosity with base units of mm^2/s (square millimeter per second)\",\"cm2/s\",\"CM2/S\",\"1\",1,false],[false,\"dekaliter per minute\",\"daL/min\",\"DAL/MIN\",\"volume\",0.00016666666666666666,[3,-1,0,0,0,0,0],\"daL/min\",\"iso1000\",true,null,null,1,false,false,0,\"dekalitres; dekaliters per minute; per min\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"dekaliter per minute per square meter\",\"daL/min/m2\",\"(DAL/MIN)/M2\",\"volume\",0.00016666666666666666,[1,-1,0,0,0,0,0],\"(daL/min)/(m<sup>2</sup>)\",\"iso1000\",true,null,null,1,false,false,0,\"daL/min/m^2; daL/minute/m2; sq. meter; dekaliters per minutes per square meter; meter squared; dekalitres; metre\",\"LOINC\",\"ArVRat\",\"Clinical\",\"The area usually is the body surface area used to normalize cardiovascular measures for patient's size\",\"l\",null,\"1\",1,false],[false,\"decibel\",\"dB\",\"DB\",\"level\",1,[0,0,0,0,0,0,0],\"dB\",\"levels\",true,null,\"lg\",0.1,true,false,0,\"decibels\",\"LOINC\",\"LogRto\",\"Clinical\",\"unit most commonly used in acoustics as unit of sound pressure level. (also see B[SPL] or bel sound pressure level). \",\"1\",null,null,1,false],[false,\"degree per second\",\"deg/s\",\"DEG/S\",\"plane angle\",0.017453292519943295,[0,-1,0,1,0,0,0],\"°/s\",\"iso1000\",false,null,null,1,false,false,0,\"deg/sec; deg per sec; °/sec; twist rate; angular speed; rotational speed\",\"LOINC\",\"ARat\",\"Clinical\",\"unit of angular (rotational) speed used to express turning rate\",\"[pi].rad/360\",\"[PI].RAD/360\",\"2\",2,false],[true,\"decigram\",\"dg\",\"DG\",\"mass\",0.1,[0,0,1,0,0,0,0],\"dg\",null,false,\"M\",null,1,false,false,0,\"decigrams; dgm; 0.1 grams; 1/10 gm\",\"LOINC\",\"Mass\",\"Clinical\",\"equal to 1/10 gram\",null,null,null,null,false],[false,\"deciliter\",\"dL\",\"DL\",\"volume\",0.0001,[3,0,0,0,0,0,0],\"dL\",\"iso1000\",true,null,null,1,false,false,0,\"deciliters; decilitres; 0.1 liters; 1/10 L\",\"LOINC\",\"Vol\",\"Clinical\",\"equal to 1/10 liter\",\"l\",null,\"1\",1,false],[true,\"decimeter\",\"dm\",\"DM\",\"length\",0.1,[1,0,0,0,0,0,0],\"dm\",null,false,\"L\",null,1,false,false,0,\"decimeters; decimetres; 0.1 meters; 1/10 m; 10 cm; centimeters\",\"LOINC\",\"Len\",\"Clinical\",\"equal to 1/10 meter or 10 centimeters\",null,null,null,null,false],[true,\"square decimeter per square second\",\"dm2/s2\",\"DM2/S2\",\"length\",0.010000000000000002,[2,-2,0,0,0,0,0],\"(dm<sup>2</sup>)/(s<sup>2</sup>)\",null,false,\"L\",null,1,false,false,0,\"dm2 per s2; dm^2/s^2; decimeters squared per second squared; sq dm; sq sec\",\"LOINC\",\"EngMass (massic energy)\",\"Clinical\",\"units for energy per unit mass or Joules per kilogram (J/kg = kg.m2/s2/kg = m2/s2) \",null,null,null,null,false],[false,\"dyne second per centimeter per square meter\",\"dyn.s/(cm.m2)\",\"(DYN.S)/(CM.M2)\",\"force\",1,[-2,-1,1,0,0,0,0],\"(dyn.s)/(cm.(m<sup>2</sup>))\",\"cgs\",true,null,null,1,false,false,0,\"(dyn*s)/(cm*m2); (dyn*s)/(cm*m^2); dyn s per cm per m2; m^2; dyne seconds per centimeters per square meter; centimetres; sq. meter; squared\",\"LOINC\",\"\",\"Clinical\",\"\",\"g.cm/s2\",\"G.CM/S2\",\"1\",1,false],[false,\"dyne second per centimeter\",\"dyn.s/cm\",\"(DYN.S)/CM\",\"force\",1,[0,-1,1,0,0,0,0],\"(dyn.s)/cm\",\"cgs\",true,null,null,1,false,false,0,\"(dyn*s)/cm; dyn sec per cm; seconds; centimetre; dyne seconds\",\"LOINC\",\"\",\"Clinical\",\"\",\"g.cm/s2\",\"G.CM/S2\",\"1\",1,false],[false,\"equivalent per liter\",\"eq/L\",\"EQ/L\",\"amount of substance\",6.0221366999999994e+26,[-3,0,0,0,0,0,0],\"eq/L\",\"chemical\",true,null,null,1,false,false,1,\"eq/liter; eq/litre; eqs; equivalents per liter; litre\",\"LOINC\",\"SCnc\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"equivalent per milliliter\",\"eq/mL\",\"EQ/ML\",\"amount of substance\",6.0221367e+29,[-3,0,0,0,0,0,0],\"eq/mL\",\"chemical\",true,null,null,1,false,false,1,\"equivalent/milliliter; equivalents per milliliter; eq per mL; millilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"equivalent per millimole\",\"eq/mmol\",\"EQ/MMOL\",\"amount of substance\",1000,[0,0,0,0,0,0,0],\"eq/mmol\",\"chemical\",true,null,null,1,false,false,0,\"equivalent/millimole; equivalents per millimole; eq per mmol\",\"LOINC\",\"SRto\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"equivalent per micromole\",\"eq/umol\",\"EQ/UMOL\",\"amount of substance\",1000000,[0,0,0,0,0,0,0],\"eq/μmol\",\"chemical\",true,null,null,1,false,false,0,\"equivalent/micromole; equivalents per micromole; eq per umol\",\"LOINC\",\"SRto\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[true,\"femtogram\",\"fg\",\"FG\",\"mass\",1e-15,[0,0,1,0,0,0,0],\"fg\",null,false,\"M\",null,1,false,false,0,\"fg; fgm; femtograms; weight\",\"LOINC\",\"Mass\",\"Clinical\",\"equal to 10^-15 grams\",null,null,null,null,false],[false,\"femtoliter\",\"fL\",\"FL\",\"volume\",1e-18,[3,0,0,0,0,0,0],\"fL\",\"iso1000\",true,null,null,1,false,false,0,\"femtolitres; femtoliters\",\"LOINC\",\"Vol; EntVol\",\"Clinical\",\"equal to 10^-15 liters\",\"l\",null,\"1\",1,false],[true,\"femtometer\",\"fm\",\"FM\",\"length\",1e-15,[1,0,0,0,0,0,0],\"fm\",null,false,\"L\",null,1,false,false,0,\"femtometres; femtometers\",\"LOINC\",\"Len\",\"Clinical\",\"equal to 10^-15 meters\",null,null,null,null,false],[false,\"femtomole\",\"fmol\",\"FMOL\",\"amount of substance\",602213670,[0,0,0,0,0,0,0],\"fmol\",\"si\",true,null,null,1,false,false,1,\"femtomoles\",\"LOINC\",\"EntSub\",\"Clinical\",\"equal to 10^-15 moles\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"femtomole per gram\",\"fmol/g\",\"FMOL/G\",\"amount of substance\",602213670,[0,0,-1,0,0,0,0],\"fmol/g\",\"si\",true,null,null,1,false,false,1,\"femtomoles; fmol/gm; fmol per gm\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"femtomole per liter\",\"fmol/L\",\"FMOL/L\",\"amount of substance\",602213670000,[-3,0,0,0,0,0,0],\"fmol/L\",\"si\",true,null,null,1,false,false,1,\"femtomoles; fmol per liter; litre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"femtomole per milligram\",\"fmol/mg\",\"FMOL/MG\",\"amount of substance\",602213670000,[0,0,-1,0,0,0,0],\"fmol/mg\",\"si\",true,null,null,1,false,false,1,\"fmol per mg; femtomoles\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"femtomole per milliliter\",\"fmol/mL\",\"FMOL/ML\",\"amount of substance\",602213670000000,[-3,0,0,0,0,0,0],\"fmol/mL\",\"si\",true,null,null,1,false,false,1,\"femtomoles; millilitre; fmol per mL; fmol per milliliter\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[true,\"gram meter\",\"g.m\",\"G.M\",\"mass\",1,[1,0,1,0,0,0,0],\"g.m\",null,false,\"M\",null,1,false,false,0,\"g*m; gxm; meters; metres\",\"LOINC\",\"Enrg\",\"Clinical\",\"Unit for measuring stroke work (heart work)\",null,null,null,null,false],[true,\"gram per 100 gram\",\"g/(100.g)\",\"G/G\",\"mass\",0.01,[0,0,0,0,0,0,0],\"g/g\",null,false,\"M\",null,1,false,false,0,\"g/100 gm; 100gm; grams per 100 grams; gm per 100 gm\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 12 hour\",\"g/(12.h)\",\"G/HR\",\"mass\",0.000023148148148148147,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/12hrs; 12 hrs; gm per 12 hrs; 12hrs; grams per 12 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 24 hour\",\"g/(24.h)\",\"G/HR\",\"mass\",0.000011574074074074073,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/24hrs; gm/24 hrs; gm per 24 hrs; 24hrs; grams per 24 hours; gm/dy; gm per dy; grams per day\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 3 days\",\"g/(3.d)\",\"G/D\",\"mass\",0.000003858024691358025,[0,-1,1,0,0,0,0],\"g/d\",null,false,\"M\",null,1,false,false,0,\"gm/3dy; gm/3 dy; gm per 3 days; grams\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 4 hour\",\"g/(4.h)\",\"G/HR\",\"mass\",0.00006944444444444444,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/4hrs; gm/4 hrs; gm per 4 hrs; 4hrs; grams per 4 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 48 hour\",\"g/(48.h)\",\"G/HR\",\"mass\",0.000005787037037037037,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/48hrs; gm/48 hrs; gm per 48 hrs; 48hrs; grams per 48 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 5 hour\",\"g/(5.h)\",\"G/HR\",\"mass\",0.00005555555555555556,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/5hrs; gm/5 hrs; gm per 5 hrs; 5hrs; grams per 5 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 6 hour\",\"g/(6.h)\",\"G/HR\",\"mass\",0.000046296296296296294,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/6hrs; gm/6 hrs; gm per 6 hrs; 6hrs; grams per 6 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per 72 hour\",\"g/(72.h)\",\"G/HR\",\"mass\",0.000003858024691358025,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/72hrs; gm/72 hrs; gm per 72 hrs; 72hrs; grams per 72 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per cubic centimeter\",\"g/cm3\",\"G/CM3\",\"mass\",999999.9999999999,[-3,0,1,0,0,0,0],\"g/(cm<sup>3</sup>)\",null,false,\"M\",null,1,false,false,0,\"g/cm^3; gm per cm3; g per cm^3; grams per centimeter cubed; cu. cm; centimetre; g/mL; gram per milliliter; millilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"g/cm3 = g/mL\",null,null,null,null,false],[true,\"gram per day\",\"g/d\",\"G/D\",\"mass\",0.000011574074074074073,[0,-1,1,0,0,0,0],\"g/d\",null,false,\"M\",null,1,false,false,0,\"gm/dy; gm per dy; grams per day; gm/24hrs; gm/24 hrs; gm per 24 hrs; 24hrs; grams per 24 hours; serving\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per deciliter\",\"g/dL\",\"G/DL\",\"mass\",10000,[-3,0,1,0,0,0,0],\"g/dL\",null,false,\"M\",null,1,false,false,0,\"gm/dL; gm per dL; grams per deciliter; decilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per gram\",\"g/g\",\"G/G\",\"mass\",1,[0,0,0,0,0,0,0],\"g/g\",null,false,\"M\",null,1,false,false,0,\"gm; grams\",\"LOINC\",\"MRto \",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per hour\",\"g/h\",\"G/HR\",\"mass\",0.0002777777777777778,[0,-1,1,0,0,0,0],\"g/h\",null,false,\"M\",null,1,false,false,0,\"gm/hr; gm per hr; grams; intake; output\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per hour per square meter\",\"g/h/m2\",\"(G/HR)/M2\",\"mass\",0.0002777777777777778,[-2,-1,1,0,0,0,0],\"(g/h)/(m<sup>2</sup>)\",null,false,\"M\",null,1,false,false,0,\"gm/hr/m2; gm/h/m2; /m^2; sq. m; g per hr per m2; grams per hours per square meter; meter squared; metre\",\"LOINC\",\"ArMRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per kilogram\",\"g/kg \",\"G/KG\",\"mass\",0.001,[0,0,0,0,0,0,0],\"g/kg\",null,false,\"M\",null,1,false,false,0,\"g per kg; gram per kilograms\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per kilogram per 8 hour \",\"g/kg/(8.h)\",\"(G/KG)/HR\",\"mass\",3.472222222222222e-8,[0,-1,0,0,0,0,0],\"(g/kg)/h\",null,false,\"M\",null,1,false,false,0,\"g/(8.kg.h); gm/kg/8hrs; 8 hrs; g per kg per 8 hrs; 8hrs; grams per kilograms per 8 hours; shift\",\"LOINC\",\"MCntRat; RelMRat\",\"Clinical\",\"unit often used to describe mass in grams of protein consumed in a 8 hours, divided by the subject's body weight in kilograms. Also used to measure mass dose rate per body mass\",null,null,null,null,false],[true,\"gram per kilogram per day\",\"g/kg/d\",\"(G/KG)/D\",\"mass\",1.1574074074074074e-8,[0,-1,0,0,0,0,0],\"(g/kg)/d\",null,false,\"M\",null,1,false,false,0,\"g/(kg.d); gm/kg/dy; gm per kg per dy; grams per kilograms per day\",\"LOINC\",\"RelMRat\",\"Clinical\",\"unit often used to describe mass in grams of protein consumed in a day, divided by the subject's body weight in kilograms. Also used to measure mass dose rate per body mass\",null,null,null,null,false],[true,\"gram per kilogram per hour\",\"g/kg/h\",\"(G/KG)/HR\",\"mass\",2.7777777777777776e-7,[0,-1,0,0,0,0,0],\"(g/kg)/h\",null,false,\"M\",null,1,false,false,0,\"g/(kg.h); g/kg/hr; g per kg per hrs; grams per kilograms per hour\",\"LOINC\",\"MCntRat; RelMRat\",\"Clinical\",\"unit used to measure mass dose rate per body mass\",null,null,null,null,false],[true,\"gram per kilogram per minute\",\"g/kg/min\",\"(G/KG)/MIN\",\"mass\",0.000016666666666666667,[0,-1,0,0,0,0,0],\"(g/kg)/min\",null,false,\"M\",null,1,false,false,0,\"g/(kg.min); g/kg/min; g per kg per min; grams per kilograms per minute\",\"LOINC\",\"MCntRat; RelMRat\",\"Clinical\",\"unit used to measure mass dose rate per body mass\",null,null,null,null,false],[true,\"gram per liter\",\"g/L\",\"G/L\",\"mass\",1000,[-3,0,1,0,0,0,0],\"g/L\",null,false,\"M\",null,1,false,false,0,\"gm per liter; g/liter; grams per liter; litre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per square meter\",\"g/m2\",\"G/M2\",\"mass\",1,[-2,0,1,0,0,0,0],\"g/(m<sup>2</sup>)\",null,false,\"M\",null,1,false,false,0,\"g/m^2; gram/square meter; g/sq m; g per m2; g per m^2; grams per square meter; meters squared; metre\",\"LOINC\",\"ArMass\",\"Clinical\",\"Tests measure myocardial mass (heart ventricle system) per body surface area; unit used to measure mass dose per body surface area\",null,null,null,null,false],[true,\"gram per milligram\",\"g/mg\",\"G/MG\",\"mass\",1000,[0,0,0,0,0,0,0],\"g/mg\",null,false,\"M\",null,1,false,false,0,\"g per mg; grams per milligram\",\"LOINC\",\"MCnt; MRto\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per minute\",\"g/min\",\"G/MIN\",\"mass\",0.016666666666666666,[0,-1,1,0,0,0,0],\"g/min\",null,false,\"M\",null,1,false,false,0,\"g per min; grams per minute; gram/minute\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per milliliter\",\"g/mL\",\"G/ML\",\"mass\",1000000,[-3,0,1,0,0,0,0],\"g/mL\",null,false,\"M\",null,1,false,false,0,\"g per mL; grams per milliliter; millilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"gram per millimole\",\"g/mmol\",\"G/MMOL\",\"mass\",1.6605401866749388e-21,[0,0,1,0,0,0,0],\"g/mmol\",null,false,\"M\",null,1,false,false,-1,\"grams per millimole; g per mmol\",\"LOINC\",\"Ratio\",\"Clinical\",\"\",null,null,null,null,false],[false,\"joule per liter\",\"J/L\",\"J/L\",\"energy\",1000000,[-1,-2,1,0,0,0,0],\"J/L\",\"si\",true,null,null,1,false,false,0,\"joules per liter; litre; J per L\",\"LOINC\",\"EngCnc\",\"Clinical\",\"\",\"N.m\",\"N.M\",\"1\",1,false],[true,\"degree Kelvin per Watt\",\"K/W\",\"K/W\",\"temperature\",0.001,[-2,3,-1,0,1,0,0],\"K/W\",null,false,\"C\",null,1,false,false,0,\"degree Kelvin/Watt; K per W; thermal ohm; thermal resistance; degrees\",\"LOINC\",\"TempEngRat\",\"Clinical\",\"unit for absolute thermal resistance equal to the reciprocal of thermal conductance. Unit used for tests to measure work of breathing\",null,null,null,null,false],[false,\"kilo international unit per liter\",\"k[IU]/L\",\"K[IU]/L\",\"arbitrary\",1000000,[-3,0,0,0,0,0,0],\"(ki.U.)/L\",\"chemical\",true,null,null,1,false,true,0,\"kIU/L; kIU per L; kIU per liter; kilo international units; litre; allergens; allergy units\",\"LOINC\",\"ACnc\",\"Clinical\",\"IgE has an WHO reference standard so IgE allergen testing can be reported as k[IU]/L\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"kilo international unit per milliliter\",\"k[IU]/mL\",\"K[IU]/ML\",\"arbitrary\",1000000000,[-3,0,0,0,0,0,0],\"(ki.U.)/mL\",\"chemical\",true,null,null,1,false,true,0,\"kIU/mL; kIU per mL; kIU per milliliter; kilo international units; millilitre; allergens; allergy units\",\"LOINC\",\"ACnc\",\"Clinical\",\"IgE has an WHO reference standard so IgE allergen testing can be reported as k[IU]/mL\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"katal per kilogram\",\"kat/kg\",\"KAT/KG\",\"catalytic activity\",602213670000000000000,[0,-1,-1,0,0,0,0],\"kat/kg\",\"chemical\",true,null,null,1,false,false,1,\"kat per kg; katals per kilogram; mol/s/kg; moles per seconds per kilogram\",\"LOINC\",\"CCnt\",\"Clinical\",\"kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.\",\"mol/s\",\"MOL/S\",\"1\",1,false],[false,\"katal per liter\",\"kat/L\",\"KAT/L\",\"catalytic activity\",6.0221366999999994e+26,[-3,-1,0,0,0,0,0],\"kat/L\",\"chemical\",true,null,null,1,false,false,1,\"kat per L; katals per liter; litre; mol/s/L; moles per seconds per liter\",\"LOINC\",\"CCnc\",\"Clinical\",\"kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.\",\"mol/s\",\"MOL/S\",\"1\",1,false],[false,\"kilocalorie\",\"kcal\",\"KCAL\",\"energy\",4184000,[2,-2,1,0,0,0,0],\"kcal\",\"heat\",true,null,null,1,false,false,0,\"kilogram calories; large calories; food calories; kcals\",\"LOINC\",\"EngRat\",\"Clinical\",\"It is equal to 1000 calories (equal to 4.184 kJ). But in practical usage, kcal refers to food calories which excludes caloric content in fiber and other constitutes that is not digestible by humans. Also see nutrition label Calories ([Cal])\",\"cal_th\",\"CAL_TH\",\"1\",1,false],[false,\"kilocalorie per 24 hour\",\"kcal/(24.h)\",\"KCAL/HR\",\"energy\",48.425925925925924,[2,-3,1,0,0,0,0],\"kcal/h\",\"heat\",true,null,null,1,false,false,0,\"kcal/24hrs; kcal/24 hrs; kcal per 24hrs; kilocalories per 24 hours; kilojoules; kJ/24hr; kJ/(24.h); kJ/dy; kilojoules per days; intake; calories burned; metabolic rate; food calories\",\"\",\"EngRat\",\"Clinical\",\"\",\"cal_th\",\"CAL_TH\",\"1\",1,false],[false,\"kilocalorie per ounce\",\"kcal/[oz_av]\",\"KCAL/[OZ_AV]\",\"energy\",147586.25679704445,[2,-2,0,0,0,0,0],\"kcal/oz\",\"heat\",true,null,null,1,false,false,0,\"kcal/oz; kcal per ozs; large calories per ounces; food calories; servings; international\",\"LOINC\",\"EngCnt\",\"Clinical\",\"used in nutrition to represent calorie of food\",\"cal_th\",\"CAL_TH\",\"1\",1,false],[false,\"kilocalorie per day\",\"kcal/d\",\"KCAL/D\",\"energy\",48.425925925925924,[2,-3,1,0,0,0,0],\"kcal/d\",\"heat\",true,null,null,1,false,false,0,\"kcal/dy; kcal per day; kilocalories per days; kilojoules; kJ/dy; kilojoules per days; intake; calories burned; metabolic rate; food calories\",\"LOINC\",\"EngRat\",\"Clinical\",\"unit in nutrition for food intake (measured in calories) in a day\",\"cal_th\",\"CAL_TH\",\"1\",1,false],[false,\"kilocalorie per hour\",\"kcal/h\",\"KCAL/HR\",\"energy\",1162.2222222222222,[2,-3,1,0,0,0,0],\"kcal/h\",\"heat\",true,null,null,1,false,false,0,\"kcal/hrs; kcals per hr; intake; kilocalories per hours; kilojoules\",\"LOINC\",\"EngRat\",\"Clinical\",\"used in nutrition to represent caloric requirement or consumption\",\"cal_th\",\"CAL_TH\",\"1\",1,false],[false,\"kilocalorie per kilogram per 24 hour\",\"kcal/kg/(24.h)\",\"(KCAL/KG)/HR\",\"energy\",0.04842592592592593,[2,-3,0,0,0,0,0],\"(kcal/kg)/h\",\"heat\",true,null,null,1,false,false,0,\"kcal/kg/24hrs; 24 hrs; kcal per kg per 24hrs; kilocalories per kilograms per 24 hours; kilojoules\",\"LOINC\",\"EngCntRat\",\"Clinical\",\"used in nutrition to represent caloric requirement per day based on subject's body weight in kilograms\",\"cal_th\",\"CAL_TH\",\"1\",1,false],[true,\"kilogram\",\"kg\",\"KG\",\"mass\",1000,[0,0,1,0,0,0,0],\"kg\",null,false,\"M\",null,1,false,false,0,\"kilograms; kgs\",\"LOINC\",\"Mass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"kilogram meter per second\",\"kg.m/s\",\"(KG.M)/S\",\"mass\",1000,[1,-1,1,0,0,0,0],\"(kg.m)/s\",null,false,\"M\",null,1,false,false,0,\"kg*m/s; kg.m per sec; kg*m per sec; p; momentum\",\"LOINC\",\"\",\"Clinical\",\"unit for momentum =  mass times velocity\",null,null,null,null,false],[true,\"kilogram per second per square meter\",\"kg/(s.m2)\",\"KG/(S.M2)\",\"mass\",1000,[-2,-1,1,0,0,0,0],\"kg/(s.(m<sup>2</sup>))\",null,false,\"M\",null,1,false,false,0,\"kg/(s*m2); kg/(s*m^2); kg per s per m2; per sec; per m^2; kilograms per seconds per square meter; meter squared; metre\",\"LOINC\",\"ArMRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"kilogram per hour\",\"kg/h\",\"KG/HR\",\"mass\",0.2777777777777778,[0,-1,1,0,0,0,0],\"kg/h\",null,false,\"M\",null,1,false,false,0,\"kg/hr; kg per hr; kilograms per hour\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"kilogram per liter\",\"kg/L\",\"KG/L\",\"mass\",1000000,[-3,0,1,0,0,0,0],\"kg/L\",null,false,\"M\",null,1,false,false,0,\"kg per liter; litre; kilograms\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"kilogram per square meter\",\"kg/m2\",\"KG/M2\",\"mass\",1000,[-2,0,1,0,0,0,0],\"kg/(m<sup>2</sup>)\",null,false,\"M\",null,1,false,false,0,\"kg/m^2; kg/sq. m; kg per m2; per m^2; per sq. m; kilograms; meter squared; metre; BMI\",\"LOINC\",\"Ratio\",\"Clinical\",\"units for body mass index (BMI)\",null,null,null,null,false],[true,\"kilogram per cubic meter\",\"kg/m3\",\"KG/M3\",\"mass\",1000,[-3,0,1,0,0,0,0],\"kg/(m<sup>3</sup>)\",null,false,\"M\",null,1,false,false,0,\"kg/m^3; kg/cu. m; kg per m3; per m^3; per cu. m; kilograms; meters cubed; metre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"kilogram per minute\",\"kg/min\",\"KG/MIN\",\"mass\",16.666666666666668,[0,-1,1,0,0,0,0],\"kg/min\",null,false,\"M\",null,1,false,false,0,\"kilogram/minute; kg per min; kilograms per minute\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"kilogram per mole\",\"kg/mol\",\"KG/MOL\",\"mass\",1.6605401866749388e-21,[0,0,1,0,0,0,0],\"kg/mol\",null,false,\"M\",null,1,false,false,-1,\"kilogram/mole; kg per mol; kilograms per mole\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"kilogram per second\",\"kg/s\",\"KG/S\",\"mass\",1000,[0,-1,1,0,0,0,0],\"kg/s\",null,false,\"M\",null,1,false,false,0,\"kg/sec; kilogram/second; kg per sec; kilograms; second\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"kiloliter\",\"kL\",\"KL\",\"volume\",1,[3,0,0,0,0,0,0],\"kL\",\"iso1000\",true,null,null,1,false,false,0,\"kiloliters; kilolitres; m3; m^3; meters cubed; metre\",\"LOINC\",\"Vol\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[true,\"kilometer\",\"km\",\"KM\",\"length\",1000,[1,0,0,0,0,0,0],\"km\",null,false,\"L\",null,1,false,false,0,\"kilometers; kilometres; distance\",\"LOINC\",\"Len\",\"Clinical\",\"\",null,null,null,null,false],[false,\"kilopascal\",\"kPa\",\"KPAL\",\"pressure\",1000000,[-1,-2,1,0,0,0,0],\"kPa\",\"si\",true,null,null,1,false,false,0,\"kilopascals; pressure\",\"LOINC\",\"Pres; PPresDiff\",\"Clinical\",\"\",\"N/m2\",\"N/M2\",\"1\",1,false],[true,\"kilosecond\",\"ks\",\"KS\",\"time\",1000,[0,1,0,0,0,0,0],\"ks\",null,false,\"T\",null,1,false,false,0,\"kiloseconds; ksec\",\"LOINC\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[false,\"kilo enzyme unit\",\"kU\",\"KU\",\"catalytic activity\",10036894500000000000,[0,-1,0,0,0,0,0],\"kU\",\"chemical\",true,null,null,1,false,false,1,\"units; mmol/min; millimoles per minute\",\"LOINC\",\"CAct\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"kilo enzyme unit per gram\",\"kU/g\",\"KU/G\",\"catalytic activity\",10036894500000000000,[0,-1,-1,0,0,0,0],\"kU/g\",\"chemical\",true,null,null,1,false,false,1,\"units per grams; kU per gm\",\"LOINC\",\"CCnt\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"kilo enzyme unit per liter\",\"kU/L\",\"KU/L\",\"catalytic activity\",1.00368945e+22,[-3,-1,0,0,0,0,0],\"kU/L\",\"chemical\",true,null,null,1,false,false,1,\"units per liter; litre; enzymatic activity; enzyme activity per volume; activities\",\"LOINC\",\"ACnc; CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"kilo enzyme unit per milliliter\",\"kU/mL\",\"KU/ML\",\"catalytic activity\",1.00368945e+25,[-3,-1,0,0,0,0,0],\"kU/mL\",\"chemical\",true,null,null,1,false,false,1,\"kU per mL; units per milliliter; millilitre; enzymatic activity per volume; enzyme activities\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 kU = 1 mmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"Liters per 24 hour\",\"L/(24.h)\",\"L/HR\",\"volume\",1.1574074074074074e-8,[3,-1,0,0,0,0,0],\"L/h\",\"iso1000\",true,null,null,1,false,false,0,\"L/24hrs; L/24 hrs; L per 24hrs; liters per 24 hours; day; dy; litres; volume flow rate\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"Liters per 8 hour\",\"L/(8.h)\",\"L/HR\",\"volume\",3.472222222222222e-8,[3,-1,0,0,0,0,0],\"L/h\",\"iso1000\",true,null,null,1,false,false,0,\"L/8hrs; L/8 hrs; L per 8hrs; liters per 8 hours; litres; volume flow rate; shift\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"Liters per minute per square meter\",\"L/(min.m2) \",\"L/(MIN.M2)\",\"volume\",0.000016666666666666667,[1,-1,0,0,0,0,0],\"L/(min.(m<sup>2</sup>))\",\"iso1000\",true,null,null,1,false,false,0,\"L/(min.m2); L/min/m^2; L/min/sq. meter; L per min per m2; m^2; liters per minutes per square meter; meter squared; litres; metre \",\"LOINC\",\"ArVRat\",\"Clinical\",\"unit for tests that measure cardiac output per body surface area (cardiac index)\",\"l\",null,\"1\",1,false],[false,\"Liters per day\",\"L/d\",\"L/D\",\"volume\",1.1574074074074074e-8,[3,-1,0,0,0,0,0],\"L/d\",\"iso1000\",true,null,null,1,false,false,0,\"L/dy; L per day; 24hrs; 24 hrs; 24 hours; liters; litres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"Liters per hour\",\"L/h\",\"L/HR\",\"volume\",2.7777777777777776e-7,[3,-1,0,0,0,0,0],\"L/h\",\"iso1000\",true,null,null,1,false,false,0,\"L/hr; L per hr; litres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"Liters per kilogram\",\"L/kg\",\"L/KG\",\"volume\",0.000001,[3,0,-1,0,0,0,0],\"L/kg\",\"iso1000\",true,null,null,1,false,false,0,\"L per kg; litre\",\"LOINC\",\"VCnt\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"Liters per liter\",\"L/L\",\"L/L\",\"volume\",1,[0,0,0,0,0,0,0],\"L/L\",\"iso1000\",true,null,null,1,false,false,0,\"L per L; liter/liter; litre\",\"LOINC\",\"VFr\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"Liters per minute\",\"L/min\",\"L/MIN\",\"volume\",0.000016666666666666667,[3,-1,0,0,0,0,0],\"L/min\",\"iso1000\",true,null,null,1,false,false,0,\"liters per minute; litre\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"Liters per minute per square meter\",\"L/min/m2\",\"(L/MIN)/M2\",\"volume\",0.000016666666666666667,[1,-1,0,0,0,0,0],\"(L/min)/(m<sup>2</sup>)\",\"iso1000\",true,null,null,1,false,false,0,\"L/(min.m2); L/min/m^2; L/min/sq. meter; L per min per m2; m^2; liters per minutes per square meter; meter squared; litres; metre \",\"\",\"ArVRat\",\"Clinical\",\"unit for tests that measure cardiac output per body surface area (cardiac index)\",\"l\",null,\"1\",1,false],[false,\"Liters per second\",\"L/s\",\"L/S\",\"volume\",0.001,[3,-1,0,0,0,0,0],\"L/s\",\"iso1000\",true,null,null,1,false,false,0,\"L per sec; litres\",\"LOINC\",\"VRat\",\"Clinical\",\"unit used often to measure gas flow and peak expiratory flow\",\"l\",null,\"1\",1,false],[false,\"Liters per second per square second\",\"L/s/s2\",\"(L/S)/S2\",\"volume\",0.001,[3,-3,0,0,0,0,0],\"(L/s)/(s<sup>2</sup>)\",\"iso1000\",true,null,null,1,false,false,0,\"L/s/s^2; L/sec/sec2; L/sec/sec^2; L/sec/sq. sec; L per s per s2; L per sec per sec2; s^2; sec^2; liters per seconds per square second; second squared; litres \",\"LOINC\",\"ArVRat\",\"Clinical\",\"unit for tests that measure cardiac output/body surface area\",\"l\",null,\"1\",1,false],[false,\"lumen square meter\",\"lm.m2\",\"LM.M2\",\"luminous flux\",1,[2,0,0,2,0,0,1],\"lm.(m<sup>2</sup>)\",\"si\",true,null,null,1,false,false,0,\"lm*m2; lm*m^2; lumen meters squared; lumen sq. meters; metres\",\"LOINC\",\"\",\"Clinical\",\"\",\"cd.sr\",\"CD.SR\",\"1\",1,false],[true,\"meter per second\",\"m/s\",\"M/S\",\"length\",1,[1,-1,0,0,0,0,0],\"m/s\",null,false,\"L\",null,1,false,false,0,\"meter/second; m per sec; meters per second; metres; velocity; speed\",\"LOINC\",\"Vel\",\"Clinical\",\"unit of velocity\",null,null,null,null,false],[true,\"meter per square second\",\"m/s2\",\"M/S2\",\"length\",1,[1,-2,0,0,0,0,0],\"m/(s<sup>2</sup>)\",null,false,\"L\",null,1,false,false,0,\"m/s^2; m/sq. sec; m per s2; per s^2; meters per square second; second squared; sq second; metres; acceleration\",\"LOINC\",\"Accel\",\"Clinical\",\"unit of acceleration\",null,null,null,null,false],[false,\"milli international unit per liter\",\"m[IU]/L\",\"M[IU]/L\",\"arbitrary\",1,[-3,0,0,0,0,0,0],\"(mi.U.)/L\",\"chemical\",true,null,null,1,false,true,0,\"mIU/L; m IU/L; mIU per liter; units; litre\",\"LOINC\",\"ACnc\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"milli  international unit per milliliter\",\"m[IU]/mL\",\"M[IU]/ML\",\"arbitrary\",1000.0000000000001,[-3,0,0,0,0,0,0],\"(mi.U.)/mL\",\"chemical\",true,null,null,1,false,true,0,\"mIU/mL; m IU/mL; mIU per mL; milli international units per milliliter; millilitre\",\"LOINC\",\"ACnc\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[true,\"square meter\",\"m2\",\"M2\",\"length\",1,[2,0,0,0,0,0,0],\"m<sup>2</sup>\",null,false,\"L\",null,1,false,false,0,\"m^2; sq m; square meters; meters squared; metres\",\"LOINC\",\"Area\",\"Clinical\",\"unit often used to represent body surface area\",null,null,null,null,false],[true,\"square meter per second\",\"m2/s\",\"M2/S\",\"length\",1,[2,-1,0,0,0,0,0],\"(m<sup>2</sup>)/s\",null,false,\"L\",null,1,false,false,0,\"m^2/sec; m2 per sec; m^2 per sec; sq m/sec; meters squared/seconds; sq m per sec; meters squared; metres\",\"LOINC\",\"ArRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"cubic meter per second\",\"m3/s\",\"M3/S\",\"length\",1,[3,-1,0,0,0,0,0],\"(m<sup>3</sup>)/s\",null,false,\"L\",null,1,false,false,0,\"m^3/sec; m3 per sec; m^3 per sec; cu m/sec; cubic meters per seconds; meters cubed; metres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"milliampere\",\"mA\",\"MA\",\"electric current\",0.001,[0,-1,0,0,0,1,0],\"mA\",\"si\",true,null,null,1,false,false,0,\"mamp; milliamperes\",\"LOINC\",\"ElpotRat\",\"Clinical\",\"unit of electric current\",\"C/s\",\"C/S\",\"1\",1,false],[false,\"millibar\",\"mbar\",\"MBAR\",\"pressure\",100000,[-1,-2,1,0,0,0,0],\"mbar\",\"iso1000\",true,null,null,1,false,false,0,\"millibars\",\"LOINC\",\"Pres\",\"Clinical\",\"unit of pressure\",\"Pa\",\"PAL\",\"1e5\",100000,false],[false,\"millibar second per liter\",\"mbar.s/L\",\"(MBAR.S)/L\",\"pressure\",100000000,[-4,-1,1,0,0,0,0],\"(mbar.s)/L\",\"iso1000\",true,null,null,1,false,false,0,\"mbar*s/L; mbar.s per L; mbar*s per L; millibar seconds per liter; millibar second per litre\",\"LOINC\",\"\",\"Clinical\",\"unit to measure expiratory resistance\",\"Pa\",\"PAL\",\"1e5\",100000,false],[false,\"millibar per liter per second\",\"mbar/L/s\",\"(MBAR/L)/S\",\"pressure\",100000000,[-4,-3,1,0,0,0,0],\"(mbar/L)/s\",\"iso1000\",true,null,null,1,false,false,0,\"mbar/(L.s); mbar/L/sec; mbar/liter/second; mbar per L per sec; mbar per liter per second; millibars per liters per seconds; litres\",\"LOINC\",\"PresCncRat\",\"Clinical\",\"unit to measure expiratory resistance\",\"Pa\",\"PAL\",\"1e5\",100000,false],[false,\"milliequivalent\",\"meq\",\"MEQ\",\"amount of substance\",602213670000000000000,[0,0,0,0,0,0,0],\"meq\",\"chemical\",true,null,null,1,false,false,1,\"milliequivalents; meqs\",\"LOINC\",\"Sub\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per 2 hour\",\"meq/(2.h)\",\"MEQ/HR\",\"amount of substance\",83640787500000000,[0,-1,0,0,0,0,0],\"meq/h\",\"chemical\",true,null,null,1,false,false,1,\"meq/2hrs; meq/2 hrs; meq per 2 hrs; milliequivalents per 2 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per 24 hour\",\"meq/(24.h)\",\"MEQ/HR\",\"amount of substance\",6970065625000000,[0,-1,0,0,0,0,0],\"meq/h\",\"chemical\",true,null,null,1,false,false,1,\"meq/24hrs; meq/24 hrs; meq per 24 hrs; milliequivalents per 24 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per 8 hour\",\"meq/(8.h)\",\"MEQ/HR\",\"amount of substance\",20910196875000000,[0,-1,0,0,0,0,0],\"meq/h\",\"chemical\",true,null,null,1,false,false,1,\"meq/8hrs; meq/8 hrs; meq per 8 hrs; milliequivalents per 8 hours; shift\",\"LOINC\",\"SRat\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per day\",\"meq/d\",\"MEQ/D\",\"amount of substance\",6970065625000000,[0,-1,0,0,0,0,0],\"meq/d\",\"chemical\",true,null,null,1,false,false,1,\"meq/dy; meq per day; milliquivalents per days; meq/24hrs; meq/24 hrs; meq per 24 hrs; milliequivalents per 24 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per deciliter\",\"meq/dL\",\"MEQ/DL\",\"amount of substance\",6.022136699999999e+24,[-3,0,0,0,0,0,0],\"meq/dL\",\"chemical\",true,null,null,1,false,false,1,\"meq per dL; milliequivalents per deciliter; decilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per gram\",\"meq/g\",\"MEQ/G\",\"amount of substance\",602213670000000000000,[0,0,-1,0,0,0,0],\"meq/g\",\"chemical\",true,null,null,1,false,false,1,\"mgq/gm; meq per gm; milliequivalents per gram\",\"LOINC\",\"MCnt\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per hour\",\"meq/h\",\"MEQ/HR\",\"amount of substance\",167281575000000000,[0,-1,0,0,0,0,0],\"meq/h\",\"chemical\",true,null,null,1,false,false,1,\"meq/hrs; meq per hrs; milliequivalents per hour\",\"LOINC\",\"SRat\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per kilogram\",\"meq/kg\",\"MEQ/KG\",\"amount of substance\",602213670000000000,[0,0,-1,0,0,0,0],\"meq/kg\",\"chemical\",true,null,null,1,false,false,1,\"meq per kg; milliequivalents per kilogram\",\"LOINC\",\"SCnt\",\"Clinical\",\"equivalence equals moles per valence; used to measure dose per patient body mass\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per kilogram per hour\",\"meq/kg/h\",\"(MEQ/KG)/HR\",\"amount of substance\",167281575000000,[0,-1,-1,0,0,0,0],\"(meq/kg)/h\",\"chemical\",true,null,null,1,false,false,1,\"meq/(kg.h); meq/kg/hr; meq per kg per hr; milliequivalents per kilograms per hour\",\"LOINC\",\"SCntRat\",\"Clinical\",\"equivalence equals moles per valence; unit used to measure dose rate per patient body mass\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per liter\",\"meq/L\",\"MEQ/L\",\"amount of substance\",6.0221367e+23,[-3,0,0,0,0,0,0],\"meq/L\",\"chemical\",true,null,null,1,false,false,1,\"milliequivalents per liter; litre; meq per l; acidity\",\"LOINC\",\"SCnc\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per square meter\",\"meq/m2\",\"MEQ/M2\",\"amount of substance\",602213670000000000000,[-2,0,0,0,0,0,0],\"meq/(m<sup>2</sup>)\",\"chemical\",true,null,null,1,false,false,1,\"meq/m^2; meq/sq. m; milliequivalents per square meter; meter squared; metre\",\"LOINC\",\"ArSub\",\"Clinical\",\"equivalence equals moles per valence; note that the use of m2 in clinical units ofter refers to body surface area\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per minute\",\"meq/min\",\"MEQ/MIN\",\"amount of substance\",10036894500000000000,[0,-1,0,0,0,0,0],\"meq/min\",\"chemical\",true,null,null,1,false,false,1,\"meq per min; milliequivalents per minute\",\"LOINC\",\"SRat\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliequivalent per milliliter\",\"meq/mL\",\"MEQ/ML\",\"amount of substance\",6.0221367e+26,[-3,0,0,0,0,0,0],\"meq/mL\",\"chemical\",true,null,null,1,false,false,1,\"meq per mL; milliequivalents per milliliter; millilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"equivalence equals moles per valence\",\"mol\",\"MOL\",\"1\",1,false],[true,\"milligram\",\"mg\",\"MG\",\"mass\",0.001,[0,0,1,0,0,0,0],\"mg\",null,false,\"M\",null,1,false,false,0,\"milligrams\",\"LOINC\",\"Mass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per 10 hour\",\"mg/(10.h)\",\"MG/HR\",\"mass\",2.7777777777777777e-8,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/10hrs; mg/10 hrs; mg per 10 hrs; milligrams per 10 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per 12 hour\",\"mg/(12.h)\",\"MG/HR\",\"mass\",2.3148148148148148e-8,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/12hrs; mg/12 hrs; per 12 hrs; 12hrs; milligrams per 12 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"units used for tests in urine\",null,null,null,null,false],[true,\"milligram per 2 hour\",\"mg/(2.h)\",\"MG/HR\",\"mass\",1.3888888888888888e-7,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/2hrs; mg/2 hrs; mg per 2 hrs; 2hrs; milligrams per 2 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"units used for tests in urine\",null,null,null,null,false],[true,\"milligram per 24 hour\",\"mg/(24.h)\",\"MG/HR\",\"mass\",1.1574074074074074e-8,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/24hrs; mg/24 hrs; milligrams per 24 hours; mg/kg/dy; mg per kg per day; milligrams per kilograms per days\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per 6 hour\",\"mg/(6.h)\",\"MG/HR\",\"mass\",4.6296296296296295e-8,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/6hrs; mg/6 hrs; mg per 6 hrs; 6hrs; milligrams per 6 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per 72 hour\",\"mg/(72.h)\",\"MG/HR\",\"mass\",3.858024691358025e-9,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/72hrs; mg/72 hrs; 72 hrs; 72hrs; milligrams per 72 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per 8 hour\",\"mg/(8.h)\",\"MG/HR\",\"mass\",3.472222222222222e-8,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/8hrs; mg/8 hrs; milligrams per 8 hours; shift\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per day\",\"mg/d\",\"MG/D\",\"mass\",1.1574074074074074e-8,[0,-1,1,0,0,0,0],\"mg/d\",null,false,\"M\",null,1,false,false,0,\"mg/24hrs; mg/24 hrs; milligrams per 24 hours; mg/dy; mg per day; milligrams\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per deciliter\",\"mg/dL\",\"MG/DL\",\"mass\",10,[-3,0,1,0,0,0,0],\"mg/dL\",null,false,\"M\",null,1,false,false,0,\"mg per dL; milligrams per deciliter; decilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per gram\",\"mg/g\",\"MG/G\",\"mass\",0.001,[0,0,0,0,0,0,0],\"mg/g\",null,false,\"M\",null,1,false,false,0,\"mg per gm; milligrams per gram\",\"LOINC\",\"MCnt; MRto\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per hour\",\"mg/h\",\"MG/HR\",\"mass\",2.7777777777777776e-7,[0,-1,1,0,0,0,0],\"mg/h\",null,false,\"M\",null,1,false,false,0,\"mg/hr; mg per hr; milligrams\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per kilogram\",\"mg/kg\",\"MG/KG\",\"mass\",0.000001,[0,0,0,0,0,0,0],\"mg/kg\",null,false,\"M\",null,1,false,false,0,\"mg per kg; milligrams per kilograms\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per kilogram per 8 hour\",\"mg/kg/(8.h)\",\"(MG/KG)/HR\",\"mass\",3.472222222222222e-11,[0,-1,0,0,0,0,0],\"(mg/kg)/h\",null,false,\"M\",null,1,false,false,0,\"mg/(8.h.kg); mg/kg/8hrs; mg/kg/8 hrs; mg per kg per 8hrs; 8 hrs; milligrams per kilograms per 8 hours; shift\",\"LOINC\",\"RelMRat; MCntRat\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"milligram per kilogram per day\",\"mg/kg/d\",\"(MG/KG)/D\",\"mass\",1.1574074074074074e-11,[0,-1,0,0,0,0,0],\"(mg/kg)/d\",null,false,\"M\",null,1,false,false,0,\"mg/(kg.d); mg/(kg.24.h)mg/kg/dy; mg per kg per day; milligrams per kilograms per days; mg/kg/(24.h); mg/kg/24hrs; 24 hrs; 24 hours\",\"LOINC\",\"RelMRat \",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"milligram per kilogram per hour\",\"mg/kg/h\",\"(MG/KG)/HR\",\"mass\",2.7777777777777777e-10,[0,-1,0,0,0,0,0],\"(mg/kg)/h\",null,false,\"M\",null,1,false,false,0,\"mg/(kg.h); mg/kg/hr; mg per kg per hr; milligrams per kilograms per hour\",\"LOINC\",\"RelMRat; MCntRat\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"milligram per kilogram per minute\",\"mg/kg/min\",\"(MG/KG)/MIN\",\"mass\",1.6666666666666667e-8,[0,-1,0,0,0,0,0],\"(mg/kg)/min\",null,false,\"M\",null,1,false,false,0,\"mg/(kg.min); mg per kg per min; milligrams per kilograms per minute\",\"LOINC\",\"RelMRat; MCntRat\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"milligram per liter\",\"mg/L\",\"MG/L\",\"mass\",1,[-3,0,1,0,0,0,0],\"mg/L\",null,false,\"M\",null,1,false,false,0,\"mg per l; milligrams per liter; litre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per square meter\",\"mg/m2\",\"MG/M2\",\"mass\",0.001,[-2,0,1,0,0,0,0],\"mg/(m<sup>2</sup>)\",null,false,\"M\",null,1,false,false,0,\"mg/m^2; mg/sq. m; mg per m2; mg per m^2; mg per sq. milligrams; meter squared; metre\",\"LOINC\",\"ArMass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per cubic meter\",\"mg/m3\",\"MG/M3\",\"mass\",0.001,[-3,0,1,0,0,0,0],\"mg/(m<sup>3</sup>)\",null,false,\"M\",null,1,false,false,0,\"mg/m^3; mg/cu. m; mg per m3; milligrams per cubic meter; meter cubed; metre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per milligram\",\"mg/mg\",\"MG/MG\",\"mass\",1,[0,0,0,0,0,0,0],\"mg/mg\",null,false,\"M\",null,1,false,false,0,\"mg per mg; milligrams; milligram/milligram\",\"LOINC\",\"MRto\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per minute\",\"mg/min\",\"MG/MIN\",\"mass\",0.000016666666666666667,[0,-1,1,0,0,0,0],\"mg/min\",null,false,\"M\",null,1,false,false,0,\"mg per min; milligrams per minutes; milligram/minute\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per milliliter\",\"mg/mL\",\"MG/ML\",\"mass\",1000.0000000000001,[-3,0,1,0,0,0,0],\"mg/mL\",null,false,\"M\",null,1,false,false,0,\"mg per mL; milligrams per milliliters; millilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per millimole\",\"mg/mmol\",\"MG/MMOL\",\"mass\",1.660540186674939e-24,[0,0,1,0,0,0,0],\"mg/mmol\",null,false,\"M\",null,1,false,false,-1,\"mg per mmol; milligrams per millimole; \",\"LOINC\",\"Ratio\",\"Clinical\",\"\",null,null,null,null,false],[true,\"milligram per week\",\"mg/wk\",\"MG/WK\",\"mass\",1.6534391534391535e-9,[0,-1,1,0,0,0,0],\"mg/wk\",null,false,\"M\",null,1,false,false,0,\"mg/week; mg per wk; milligrams per weeks; milligram/week\",\"LOINC\",\"Mrat\",\"Clinical\",\"\",null,null,null,null,false],[false,\"milliliter\",\"mL\",\"ML\",\"volume\",0.000001,[3,0,0,0,0,0,0],\"mL\",\"iso1000\",true,null,null,1,false,false,0,\"milliliters; millilitres\",\"LOINC\",\"Vol\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 10 hour\",\"mL/(10.h)\",\"ML/HR\",\"volume\",2.7777777777777777e-11,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/10hrs; ml/10 hrs; mL per 10hrs; 10 hrs; milliliters per 10 hours; millilitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 12 hour\",\"mL/(12.h)\",\"ML/HR\",\"volume\",2.3148148148148147e-11,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/12hrs; ml/12 hrs; mL per 12hrs; 12 hrs; milliliters per 12 hours; millilitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 2 hour\",\"mL/(2.h)\",\"ML/HR\",\"volume\",1.3888888888888888e-10,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/2hrs; ml/2 hrs; mL per 2hrs; 2 hrs; milliliters per 2 hours; millilitres \",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 24 hour\",\"mL/(24.h)\",\"ML/HR\",\"volume\",1.1574074074074074e-11,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/24hrs; ml/24 hrs; mL per 24hrs; 24 hrs; milliliters per 24 hours; millilitres; ml/dy; /day; ml per dy; days; fluid outputs; fluid inputs; flow rate\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 4 hour\",\"mL/(4.h)\",\"ML/HR\",\"volume\",6.944444444444444e-11,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/4hrs; ml/4 hrs; mL per 4hrs; 4 hrs; milliliters per 4 hours; millilitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 5 hour\",\"mL/(5.h)\",\"ML/HR\",\"volume\",5.5555555555555553e-11,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/5hrs; ml/5 hrs; mL per 5hrs; 5 hrs; milliliters per 5 hours; millilitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 6 hour\",\"mL/(6.h)\",\"ML/HR\",\"volume\",4.6296296296296294e-11,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/6hrs; ml/6 hrs; mL per 6hrs; 6 hrs; milliliters per 6 hours; millilitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 72 hour\",\"mL/(72.h)\",\"ML/HR\",\"volume\",3.8580246913580245e-12,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/72hrs; ml/72 hrs; mL per 72hrs; 72 hrs; milliliters per 72 hours; millilitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 8 hour\",\"mL/(8.h)\",\"ML/HR\",\"volume\",3.472222222222222e-11,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"ml/8hrs; ml/8 hrs; mL per 8hrs; 8 hrs; milliliters per 8 hours; millilitres; shift\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per 8 hour per kilogram\",\"mL/(8.h)/kg\",\"(ML/HR)/KG\",\"volume\",3.472222222222222e-14,[3,-1,-1,0,0,0,0],\"(mL/h)/kg\",\"iso1000\",true,null,null,1,false,false,0,\"mL/kg/(8.h); ml/8h/kg; ml/8 h/kg; ml/8hr/kg; ml/8 hr/kgr; mL per 8h per kg; 8 h; 8hr; 8 hr; milliliters per 8 hours per kilogram; millilitres; shift\",\"LOINC\",\"VRatCnt\",\"Clinical\",\"unit used to measure renal excretion volume rate per body mass\",\"l\",null,\"1\",1,false],[false,\"milliliter per square inch (international)\",\"mL/[sin_i]\",\"ML/[SIN_I]\",\"volume\",0.0015500031000061998,[1,0,0,0,0,0,0],\"mL\",\"iso1000\",true,null,null,1,false,false,0,\"mL/sin; mL/in2; mL/in^2; mL per sin; in2; in^2; sq. in; milliliters per square inch; inch squared\",\"LOINC\",\"ArVol\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per centimeter of water\",\"mL/cm[H2O]\",\"ML/CM[H2O]\",\"volume\",1.0197162129779282e-11,[4,2,-1,0,0,0,0],\"mL/(cm HO<sub><r>2</r></sub>)\",\"iso1000\",true,null,null,1,false,false,0,\"milliliters per centimeter of water; millilitre per centimetre of water; millilitres per centimetre of water; mL/cmH2O; mL/cm H2O; mL per cmH2O; mL per cm H2O\",\"LOINC\",\"Compli\",\"Clinical\",\"unit used to measure dynamic lung compliance\",\"l\",null,\"1\",1,false],[false,\"milliliter per day\",\"mL/d\",\"ML/D\",\"volume\",1.1574074074074074e-11,[3,-1,0,0,0,0,0],\"mL/d\",\"iso1000\",true,null,null,1,false,false,0,\"ml/day; ml per day; milliliters per day; 24 hours; 24hrs; millilitre;\",\"LOINC\",\"VRat\",\"Clinical\",\"usually used to measure fluid output or input; flow rate\",\"l\",null,\"1\",1,false],[false,\"milliliter per deciliter\",\"mL/dL\",\"ML/DL\",\"volume\",0.009999999999999998,[0,0,0,0,0,0,0],\"mL/dL\",\"iso1000\",true,null,null,1,false,false,0,\"mL per dL; millilitres; decilitre; milliliters\",\"LOINC\",\"VFr; VFrDiff\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per hour\",\"mL/h\",\"ML/HR\",\"volume\",2.7777777777777777e-10,[3,-1,0,0,0,0,0],\"mL/h\",\"iso1000\",true,null,null,1,false,false,0,\"mL/hr; mL per hr; milliliters per hour; millilitres; fluid intake; fluid output\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per kilogram\",\"mL/kg\",\"ML/KG\",\"volume\",9.999999999999999e-10,[3,0,-1,0,0,0,0],\"mL/kg\",\"iso1000\",true,null,null,1,false,false,0,\"mL per kg; milliliters per kilogram; millilitres\",\"LOINC\",\"VCnt\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per kilogram per 8 hour\",\"mL/kg/(8.h)\",\"(ML/KG)/HR\",\"volume\",3.472222222222222e-14,[3,-1,-1,0,0,0,0],\"(mL/kg)/h\",\"iso1000\",true,null,null,1,false,false,0,\"mL/(8.h.kg); mL/kg/8hrs; mL/kg/8 hrs; mL per kg per 8hrs; 8 hrs; milliliters per kilograms per 8 hours; millilitres; shift\",\"LOINC\",\"VCntRat; RelEngRat\",\"Clinical\",\"unit used to measure renal excretion volume rate per body mass\",\"l\",null,\"1\",1,false],[false,\"milliliter per kilogram per day\",\"mL/kg/d\",\"(ML/KG)/D\",\"volume\",1.1574074074074072e-14,[3,-1,-1,0,0,0,0],\"(mL/kg)/d\",\"iso1000\",true,null,null,1,false,false,0,\"mL/(kg.d); mL/kg/dy; mL per kg per day; milliliters per kilograms per day; mg/kg/24hrs; 24 hrs; per 24 hours millilitres\",\"LOINC\",\"VCntRat; RelEngRat\",\"Clinical\",\"unit used to measure renal excretion volume rate per body mass\",\"l\",null,\"1\",1,false],[false,\"milliliter per kilogram per hour\",\"mL/kg/h\",\"(ML/KG)/HR\",\"volume\",2.7777777777777774e-13,[3,-1,-1,0,0,0,0],\"(mL/kg)/h\",\"iso1000\",true,null,null,1,false,false,0,\"mL/(kg.h); mL/kg/hr; mL per kg per hr; milliliters per kilograms per hour; millilitres\",\"LOINC\",\"VCntRat; RelEngRat\",\"Clinical\",\"unit used to measure renal excretion volume rate per body mass\",\"l\",null,\"1\",1,false],[false,\"milliliter per kilogram per minute\",\"mL/kg/min\",\"(ML/KG)/MIN\",\"volume\",1.6666666666666664e-11,[3,-1,-1,0,0,0,0],\"(mL/kg)/min\",\"iso1000\",true,null,null,1,false,false,0,\"mL/(kg.min); mL/kg/dy; mL per kg per day; milliliters per kilograms per day; millilitres\",\"LOINC\",\"RelEngRat\",\"Clinical\",\"used for tests that measure activity metabolic rate compared to standard resting metabolic rate \",\"l\",null,\"1\",1,false],[false,\"milliliter per square meter\",\"mL/m2\",\"ML/M2\",\"volume\",0.000001,[1,0,0,0,0,0,0],\"mL/(m<sup>2</sup>)\",\"iso1000\",true,null,null,1,false,false,0,\"mL/m^2; mL/sq. meter; mL per m2; m^2; sq. meter; milliliters per square meter; millilitres; meter squared\",\"LOINC\",\"ArVol\",\"Clinical\",\"used for tests that relate to heart work - e.g. ventricular stroke volume; atrial volume per body surface area\",\"l\",null,\"1\",1,false],[false,\"milliliter per millibar\",\"mL/mbar\",\"ML/MBAR\",\"volume\",1e-11,[4,2,-1,0,0,0,0],\"mL/mbar\",\"iso1000\",true,null,null,1,false,false,0,\"mL per mbar; milliliters per millibar; millilitres\",\"LOINC\",\"\",\"Clinical\",\"unit used to measure dynamic lung compliance\",\"l\",null,\"1\",1,false],[false,\"milliliter per minute\",\"mL/min\",\"ML/MIN\",\"volume\",1.6666666666666667e-8,[3,-1,0,0,0,0,0],\"mL/min\",\"iso1000\",true,null,null,1,false,false,0,\"mL per min; milliliters; millilitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per minute per square meter\",\"mL/min/m2\",\"(ML/MIN)/M2\",\"volume\",1.6666666666666667e-8,[1,-1,0,0,0,0,0],\"(mL/min)/(m<sup>2</sup>)\",\"iso1000\",true,null,null,1,false,false,0,\"ml/min/m^2; ml/min/sq. meter; mL per min per m2; m^2; sq. meter; milliliters per minutes per square meter; millilitres; metre; meter squared\",\"LOINC\",\"ArVRat\",\"Clinical\",\"unit used to measure volume per body surface area; oxygen consumption index\",\"l\",null,\"1\",1,false],[false,\"milliliter per millimeter\",\"mL/mm\",\"ML/MM\",\"volume\",0.001,[2,0,0,0,0,0,0],\"mL/mm\",\"iso1000\",true,null,null,1,false,false,0,\"mL per mm; milliliters per millimeter; millilitres; millimetre\",\"LOINC\",\"Lineic Volume\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"milliliter per second\",\"mL/s\",\"ML/S\",\"volume\",0.000001,[3,-1,0,0,0,0,0],\"mL/s\",\"iso1000\",true,null,null,1,false,false,0,\"ml/sec; mL per sec; milliliters per second; millilitres\",\"LOINC\",\"Vel; VelRat; VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[true,\"millimeter\",\"mm\",\"MM\",\"length\",0.001,[1,0,0,0,0,0,0],\"mm\",null,false,\"L\",null,1,false,false,0,\"millimeters; millimetres; height; length; diameter; thickness; axis; curvature; size\",\"LOINC\",\"Len\",\"Clinical\",\"\",null,null,null,null,false],[true,\"millimeter per hour\",\"mm/h\",\"MM/HR\",\"length\",2.7777777777777776e-7,[1,-1,0,0,0,0,0],\"mm/h\",null,false,\"L\",null,1,false,false,0,\"mm/hr; mm per hr; millimeters per hour; millimetres\",\"LOINC\",\"Vel\",\"Clinical\",\"unit to measure sedimentation rate\",null,null,null,null,false],[true,\"millimeter per minute\",\"mm/min\",\"MM/MIN\",\"length\",0.000016666666666666667,[1,-1,0,0,0,0,0],\"mm/min\",null,false,\"L\",null,1,false,false,0,\"mm per min; millimeters per minute; millimetres\",\"LOINC\",\"Vel\",\"Clinical\",\"\",null,null,null,null,false],[false,\"millimeter of water\",\"mm[H2O]\",\"MM[H2O]\",\"pressure\",9806.65,[-1,-2,1,0,0,0,0],\"mm HO<sub><r>2</r></sub>\",\"clinical\",true,null,null,1,false,false,0,\"mmH2O; mm H2O; millimeters of water; millimetres\",\"LOINC\",\"Pres\",\"Clinical\",\"\",\"kPa\",\"KPAL\",\"980665e-5\",9.80665,false],[false,\"millimeter of mercury\",\"mm[Hg]\",\"MM[HG]\",\"pressure\",133322,[-1,-2,1,0,0,0,0],\"mm Hg\",\"clinical\",true,null,null,1,false,false,0,\"mmHg; mm Hg; millimeters of mercury; millimetres\",\"LOINC\",\"Pres; PPres; Ratio\",\"Clinical\",\"1 mm[Hg] = 1 torr; unit to measure blood pressure\",\"kPa\",\"KPAL\",\"133.3220\",133.322,false],[true,\"square millimeter\",\"mm2\",\"MM2\",\"length\",0.000001,[2,0,0,0,0,0,0],\"mm<sup>2</sup>\",null,false,\"L\",null,1,false,false,0,\"mm^2; sq. mm.; sq. millimeters; millimeters squared; millimetres\",\"LOINC\",\"Area\",\"Clinical\",\"\",null,null,null,null,false],[false,\"millimole\",\"mmol\",\"MMOL\",\"amount of substance\",602213670000000000000,[0,0,0,0,0,0,0],\"mmol\",\"si\",true,null,null,1,false,false,1,\"millimoles\",\"LOINC\",\"Sub\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per 12 hour\",\"mmol/(12.h)\",\"MMOL/HR\",\"amount of substance\",13940131250000000,[0,-1,0,0,0,0,0],\"mmol/h\",\"si\",true,null,null,1,false,false,1,\"mmol/12hrs; mmol/12 hrs; mmol per 12 hrs; 12hrs; millimoles per 12 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"unit for tests related to urine\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per 2 hour\",\"mmol/(2.h)\",\"MMOL/HR\",\"amount of substance\",83640787500000000,[0,-1,0,0,0,0,0],\"mmol/h\",\"si\",true,null,null,1,false,false,1,\"mmol/2hrs; mmol/2 hrs; mmol per 2 hrs; 2hrs; millimoles per 2 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"unit for tests related to urine\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per 24 hour\",\"mmol/(24.h)\",\"MMOL/HR\",\"amount of substance\",6970065625000000,[0,-1,0,0,0,0,0],\"mmol/h\",\"si\",true,null,null,1,false,false,1,\"mmol/24hrs; mmol/24 hrs; mmol per 24 hrs; 24hrs; millimoles per 24 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per 5 hour\",\"mmol/(5.h)\",\"MMOL/HR\",\"amount of substance\",33456315000000000,[0,-1,0,0,0,0,0],\"mmol/h\",\"si\",true,null,null,1,false,false,1,\"mmol/5hrs; mmol/5 hrs; mmol per 5 hrs; 5hrs; millimoles per 5 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"unit for tests related to doses\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per 6 hour\",\"mmol/(6.h)\",\"MMOL/HR\",\"amount of substance\",27880262500000000,[0,-1,0,0,0,0,0],\"mmol/h\",\"si\",true,null,null,1,false,false,1,\"mmol/6hrs; mmol/6 hrs; mmol per 6 hrs; 6hrs; millimoles per 6 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"unit for tests related to urine\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per 8 hour\",\"mmol/(8.h)\",\"MMOL/HR\",\"amount of substance\",20910196875000000,[0,-1,0,0,0,0,0],\"mmol/h\",\"si\",true,null,null,1,false,false,1,\"mmol/8hrs; mmol/8 hrs; mmol per 8 hrs; 8hrs; millimoles per 8 hours; shift\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per day\",\"mmol/d\",\"MMOL/D\",\"amount of substance\",6970065625000000,[0,-1,0,0,0,0,0],\"mmol/d\",\"si\",true,null,null,1,false,false,1,\"mmol/24hrs; mmol/24 hrs; mmol per 24 hrs; 24hrs; millimoles per 24 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per deciliter\",\"mmol/dL\",\"MMOL/DL\",\"amount of substance\",6.022136699999999e+24,[-3,0,0,0,0,0,0],\"mmol/dL\",\"si\",true,null,null,1,false,false,1,\"mmol per dL; millimoles; decilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per gram\",\"mmol/g\",\"MMOL/G\",\"amount of substance\",602213670000000000000,[0,0,-1,0,0,0,0],\"mmol/g\",\"si\",true,null,null,1,false,false,1,\"mmol per gram; millimoles\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per hour\",\"mmol/h\",\"MMOL/HR\",\"amount of substance\",167281575000000000,[0,-1,0,0,0,0,0],\"mmol/h\",\"si\",true,null,null,1,false,false,1,\"mmol/hr; mmol per hr; millimoles per hour\",\"LOINC\",\"SRat\",\"Clinical\",\"unit for tests related to urine\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per kilogram\",\"mmol/kg\",\"MMOL/KG\",\"amount of substance\",602213670000000000,[0,0,-1,0,0,0,0],\"mmol/kg\",\"si\",true,null,null,1,false,false,1,\"mmol per kg; millimoles per kilogram\",\"LOINC\",\"SCnt\",\"Clinical\",\"unit for tests related to stool\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per kilogram per 8 hour\",\"mmol/kg/(8.h)\",\"(MMOL/KG)/HR\",\"amount of substance\",20910196875000,[0,-1,-1,0,0,0,0],\"(mmol/kg)/h\",\"si\",true,null,null,1,false,false,1,\"mmol/(8.h.kg); mmol/kg/8hrs; mmol/kg/8 hrs; mmol per kg per 8hrs; 8 hrs; millimoles per kilograms per 8 hours; shift\",\"LOINC\",\"CCnt\",\"Clinical\",\"unit used to measure molar dose rate per patient body mass\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per kilogram per day\",\"mmol/kg/d\",\"(MMOL/KG)/D\",\"amount of substance\",6970065625000,[0,-1,-1,0,0,0,0],\"(mmol/kg)/d\",\"si\",true,null,null,1,false,false,1,\"mmol/kg/dy; mmol/kg/day; mmol per kg per dy; millimoles per kilograms per day\",\"LOINC\",\"RelSRat\",\"Clinical\",\"unit used to measure molar dose rate per patient body mass\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per kilogram per hour\",\"mmol/kg/h\",\"(MMOL/KG)/HR\",\"amount of substance\",167281575000000,[0,-1,-1,0,0,0,0],\"(mmol/kg)/h\",\"si\",true,null,null,1,false,false,1,\"mmol/kg/hr; mmol per kg per hr; millimoles per kilograms per hour\",\"LOINC\",\"CCnt\",\"Clinical\",\"unit used to measure molar dose rate per patient body mass\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per kilogram per minute\",\"mmol/kg/min\",\"(MMOL/KG)/MIN\",\"amount of substance\",10036894500000000,[0,-1,-1,0,0,0,0],\"(mmol/kg)/min\",\"si\",true,null,null,1,false,false,1,\"mmol/(kg.min); mmol/kg/min; mmol per kg per min; millimoles per kilograms per minute\",\"LOINC\",\"CCnt\",\"Clinical\",\"unit used to measure molar dose rate per patient body mass; note that the unit for the enzyme unit U = umol/min. mmol/kg/min = kU/kg; \",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per liter\",\"mmol/L\",\"MMOL/L\",\"amount of substance\",6.0221367e+23,[-3,0,0,0,0,0,0],\"mmol/L\",\"si\",true,null,null,1,false,false,1,\"mmol per L; millimoles per liter; litre\",\"LOINC\",\"SCnc\",\"Clinical\",\"unit for tests related to doses\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per square meter\",\"mmol/m2\",\"MMOL/M2\",\"amount of substance\",602213670000000000000,[-2,0,0,0,0,0,0],\"mmol/(m<sup>2</sup>)\",\"si\",true,null,null,1,false,false,1,\"mmol/m^2; mmol/sq. meter; mmol per m2; m^2; sq. meter; millimoles; meter squared; metre\",\"LOINC\",\"ArSub\",\"Clinical\",\"unit used to measure molar dose per patient body surface area\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per minute\",\"mmol/min\",\"MMOL/MIN\",\"amount of substance\",10036894500000000000,[0,-1,0,0,0,0,0],\"mmol/min\",\"si\",true,null,null,1,false,false,1,\"mmol per min; millimoles per minute\",\"LOINC\",\"Srat; CAct\",\"Clinical\",\"unit for the enzyme unit U = umol/min. mmol/min = kU\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per millimole\",\"mmol/mmol\",\"MMOL/MMOL\",\"amount of substance\",1,[0,0,0,0,0,0,0],\"mmol/mmol\",\"si\",true,null,null,1,false,false,0,\"mmol per mmol; millimoles per millimole\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per mole\",\"mmol/mol\",\"MMOL/MOL\",\"amount of substance\",0.001,[0,0,0,0,0,0,0],\"mmol/mol\",\"si\",true,null,null,1,false,false,0,\"mmol per mol; millimoles per mole\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"millimole per second per liter\",\"mmol/s/L\",\"(MMOL/S)/L\",\"amount of substance\",6.0221367e+23,[-3,-1,0,0,0,0,0],\"(mmol/s)/L\",\"si\",true,null,null,1,false,false,1,\"mmol/sec/L; mmol per s per L; per sec; millimoles per seconds per liter; litre\",\"LOINC\",\"CCnc \",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"mole per kilogram\",\"mol/kg\",\"MOL/KG\",\"amount of substance\",602213670000000000000,[0,0,-1,0,0,0,0],\"mol/kg\",\"si\",true,null,null,1,false,false,1,\"mol per kg; moles; mols\",\"LOINC\",\"SCnt\",\"Clinical\",\"unit for tests related to stool\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"mole per kilogram per second\",\"mol/kg/s\",\"(MOL/KG)/S\",\"amount of substance\",602213670000000000000,[0,-1,-1,0,0,0,0],\"(mol/kg)/s\",\"si\",true,null,null,1,false,false,1,\"mol/kg/sec; mol per kg per sec; moles per kilograms per second; mols\",\"LOINC\",\"CCnt\",\"Clinical\",\"unit of catalytic activity (mol/s) per mass (kg)\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"mole per liter\",\"mol/L\",\"MOL/L\",\"amount of substance\",6.0221366999999994e+26,[-3,0,0,0,0,0,0],\"mol/L\",\"si\",true,null,null,1,false,false,1,\"mol per L; moles per liter; litre; moles; mols\",\"LOINC\",\"SCnc\",\"Clinical\",\"unit often used in tests measuring oxygen content\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"mole per cubic meter\",\"mol/m3\",\"MOL/M3\",\"amount of substance\",6.0221367e+23,[-3,0,0,0,0,0,0],\"mol/(m<sup>3</sup>)\",\"si\",true,null,null,1,false,false,1,\"mol/m^3; mol/cu. m; mol per m3; m^3; cu. meter; mols; moles; meters cubed; metre; mole per kiloliter; kilolitre; mol/kL\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"mole per milliliter\",\"mol/mL\",\"MOL/ML\",\"amount of substance\",6.0221367e+29,[-3,0,0,0,0,0,0],\"mol/mL\",\"si\",true,null,null,1,false,false,1,\"mol per mL; moles; millilitre; mols\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"mole per mole\",\"mol/mol\",\"MOL/MOL\",\"amount of substance\",1,[0,0,0,0,0,0,0],\"mol/mol\",\"si\",true,null,null,1,false,false,0,\"mol per mol; moles per mol; mols\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"mole per second\",\"mol/s\",\"MOL/S\",\"amount of substance\",6.0221367e+23,[0,-1,0,0,0,0,0],\"mol/s\",\"si\",true,null,null,1,false,false,1,\"mol per sec; moles per second; mols\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"milliosmole\",\"mosm\",\"MOSM\",\"amount of substance (dissolved particles)\",602213670000000000000,[0,0,0,0,0,0,0],\"mosm\",\"chemical\",true,null,null,1,false,false,1,\"milliosmoles\",\"LOINC\",\"Osmol\",\"Clinical\",\"equal to 1/1000 of an osmole\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliosmole per kilogram\",\"mosm/kg\",\"MOSM/KG\",\"amount of substance (dissolved particles)\",602213670000000000,[0,0,-1,0,0,0,0],\"mosm/kg\",\"chemical\",true,null,null,1,false,false,1,\"mosm per kg; milliosmoles per kilogram\",\"LOINC\",\"Osmol\",\"Clinical\",\"\",\"mol\",\"MOL\",\"1\",1,false],[false,\"milliosmole per liter\",\"mosm/L\",\"MOSM/L\",\"amount of substance (dissolved particles)\",6.0221367e+23,[-3,0,0,0,0,0,0],\"mosm/L\",\"chemical\",true,null,null,1,false,false,1,\"mosm per liter; litre; milliosmoles\",\"LOINC\",\"Osmol\",\"Clinical\",\"\",\"mol\",\"MOL\",\"1\",1,false],[false,\"millipascal\",\"mPa\",\"MPAL\",\"pressure\",1,[-1,-2,1,0,0,0,0],\"mPa\",\"si\",true,null,null,1,false,false,0,\"millipascals\",\"LOINC\",\"Pres\",\"Clinical\",\"unit of pressure\",\"N/m2\",\"N/M2\",\"1\",1,false],[false,\"millipascal second\",\"mPa.s\",\"MPAL.S\",\"pressure\",1,[-1,-1,1,0,0,0,0],\"mPa.s\",\"si\",true,null,null,1,false,false,0,\"mPa*s; millipoise; mP; dynamic viscosity\",\"LOINC\",\"Visc\",\"Clinical\",\"base units for millipoise, a measurement of dynamic viscosity\",\"N/m2\",\"N/M2\",\"1\",1,false],[true,\"megasecond\",\"Ms\",\"MAS\",\"time\",1000000,[0,1,0,0,0,0,0],\"Ms\",null,false,\"T\",null,1,false,false,0,\"megaseconds\",\"LOINC\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[true,\"millisecond\",\"ms\",\"MS\",\"time\",0.001,[0,1,0,0,0,0,0],\"ms\",null,false,\"T\",null,1,false,false,0,\"milliseconds; duration\",\"LOINC\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[false,\"milli enzyme unit per gram\",\"mU/g\",\"MU/G\",\"catalytic activity\",10036894500000,[0,-1,-1,0,0,0,0],\"mU/g\",\"chemical\",true,null,null,1,false,false,1,\"mU per gm; milli enzyme units per gram; enzyme activity; enzymatic activity per mass\",\"LOINC\",\"CCnt\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"milli enzyme unit per liter\",\"mU/L\",\"MU/L\",\"catalytic activity\",10036894500000000,[-3,-1,0,0,0,0,0],\"mU/L\",\"chemical\",true,null,null,1,false,false,1,\"mU per liter; litre; milli enzyme units enzymatic activity per volume; enzyme activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"milli enzyme unit per milligram\",\"mU/mg\",\"MU/MG\",\"catalytic activity\",10036894500000000,[0,-1,-1,0,0,0,0],\"mU/mg\",\"chemical\",true,null,null,1,false,false,1,\"mU per mg; milli enzyme units per milligram\",\"LOINC\",\"CCnt\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"milli enzyme unit per milliliter\",\"mU/mL\",\"MU/ML\",\"catalytic activity\",10036894500000000000,[-3,-1,0,0,0,0,0],\"mU/mL\",\"chemical\",true,null,null,1,false,false,1,\"mU per mL; milli enzyme units per milliliter; millilitre; enzymatic activity per volume; enzyme activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"milli enzyme unit per milliliter per minute\",\"mU/mL/min\",\"(MU/ML)/MIN\",\"catalytic activity\",167281575000000000,[-3,-2,0,0,0,0,0],\"(mU/mL)/min\",\"chemical\",true,null,null,1,false,false,1,\"mU per mL per min; mU per milliliters per minute; millilitres; milli enzyme units; enzymatic activity; enzyme activity\",\"LOINC\",\"CCncRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 mU = 1 nmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"millivolt\",\"mV\",\"MV\",\"electric potential\",1,[2,-2,1,0,0,-1,0],\"mV\",\"si\",true,null,null,1,false,false,0,\"millivolts\",\"LOINC\",\"Elpot\",\"Clinical\",\"unit of electric potential (voltage)\",\"J/C\",\"J/C\",\"1\",1,false],[false,\"Newton centimeter\",\"N.cm\",\"N.CM\",\"force\",10,[2,-2,1,0,0,0,0],\"N.cm\",\"si\",true,null,null,1,false,false,0,\"N*cm; Ncm; N cm; Newton*centimeters; Newton* centimetres; torque; work\",\"LOINC\",\"\",\"Clinical\",\"as a measurement of work, N.cm = 1/100 Joules;\\nnote that N.m is the standard unit of measurement for torque (although dimensionally equivalent to Joule), and N.cm can also be thought of as a torqe unit\",\"kg.m/s2\",\"KG.M/S2\",\"1\",1,false],[false,\"Newton second\",\"N.s\",\"N.S\",\"force\",1000,[1,-1,1,0,0,0,0],\"N.s\",\"si\",true,null,null,1,false,false,0,\"Newton*seconds; N*s; N s; Ns; impulse; imp\",\"LOINC\",\"\",\"Clinical\",\"standard unit of impulse\",\"kg.m/s2\",\"KG.M/S2\",\"1\",1,false],[true,\"nanogram\",\"ng\",\"NG\",\"mass\",1e-9,[0,0,1,0,0,0,0],\"ng\",null,false,\"M\",null,1,false,false,0,\"nanograms\",\"LOINC\",\"Mass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per 24 hour\",\"ng/(24.h)\",\"NG/HR\",\"mass\",1.1574074074074075e-14,[0,-1,1,0,0,0,0],\"ng/h\",null,false,\"M\",null,1,false,false,0,\"ng/24hrs; ng/24 hrs; nanograms per 24 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per 8 hour\",\"ng/(8.h)\",\"NG/HR\",\"mass\",3.4722222222222224e-14,[0,-1,1,0,0,0,0],\"ng/h\",null,false,\"M\",null,1,false,false,0,\"ng/8hrs; ng/8 hrs; nanograms per 8 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per million\",\"ng/10*6\",\"NG/(10*6)\",\"mass\",1e-15,[0,0,1,0,0,0,0],\"ng/(10<sup>6</sup>)\",null,false,\"M\",null,1,false,false,0,\"ng/10^6; ng per 10*6; 10^6; nanograms\",\"LOINC\",\"MNum\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per day\",\"ng/d\",\"NG/D\",\"mass\",1.1574074074074075e-14,[0,-1,1,0,0,0,0],\"ng/d\",null,false,\"M\",null,1,false,false,0,\"ng/dy; ng per day; nanograms \",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per deciliter\",\"ng/dL\",\"NG/DL\",\"mass\",0.00001,[-3,0,1,0,0,0,0],\"ng/dL\",null,false,\"M\",null,1,false,false,0,\"ng per dL; nanograms per deciliter; decilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per gram\",\"ng/g\",\"NG/G\",\"mass\",1e-9,[0,0,0,0,0,0,0],\"ng/g\",null,false,\"M\",null,1,false,false,0,\"ng/gm; ng per gm; nanograms per gram\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per hour\",\"ng/h\",\"NG/HR\",\"mass\",2.777777777777778e-13,[0,-1,1,0,0,0,0],\"ng/h\",null,false,\"M\",null,1,false,false,0,\"ng/hr; ng per hr; nanograms per hour\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per kilogram\",\"ng/kg\",\"NG/KG\",\"mass\",1e-12,[0,0,0,0,0,0,0],\"ng/kg\",null,false,\"M\",null,1,false,false,0,\"ng per kg; nanograms per kilogram\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per kilogram per 8 hour\",\"ng/kg/(8.h)\",\"(NG/KG)/HR\",\"mass\",3.472222222222222e-17,[0,-1,0,0,0,0,0],\"(ng/kg)/h\",null,false,\"M\",null,1,false,false,0,\"ng/(8.h.kg); ng/kg/8hrs; ng/kg/8 hrs; ng per kg per 8hrs; 8 hrs; nanograms per kilograms per 8 hours; shift\",\"LOINC\",\"MRtoRat \",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"nanogram per kilogram per hour\",\"ng/kg/h\",\"(NG/KG)/HR\",\"mass\",2.7777777777777775e-16,[0,-1,0,0,0,0,0],\"(ng/kg)/h\",null,false,\"M\",null,1,false,false,0,\"ng/(kg.h); ng/kg/hr; ng per kg per hr; nanograms per kilograms per hour\",\"LOINC\",\"MRtoRat \",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"nanogram per kilogram per minute\",\"ng/kg/min\",\"(NG/KG)/MIN\",\"mass\",1.6666666666666667e-14,[0,-1,0,0,0,0,0],\"(ng/kg)/min\",null,false,\"M\",null,1,false,false,0,\"ng/(kg.min); ng per kg per min; nanograms per kilograms per minute\",\"LOINC\",\"MRtoRat \",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"nanogram per liter\",\"ng/L\",\"NG/L\",\"mass\",0.000001,[-3,0,1,0,0,0,0],\"ng/L\",null,false,\"M\",null,1,false,false,0,\"ng per L; nanograms per liter; litre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per square meter\",\"ng/m2\",\"NG/M2\",\"mass\",1e-9,[-2,0,1,0,0,0,0],\"ng/(m<sup>2</sup>)\",null,false,\"M\",null,1,false,false,0,\"ng/m^2; ng/sq. m; ng per m2; m^2; sq. meter; nanograms; meter squared; metre\",\"LOINC\",\"ArMass\",\"Clinical\",\"unit used to measure mass dose per patient body surface area\",null,null,null,null,false],[true,\"nanogram per milligram\",\"ng/mg\",\"NG/MG\",\"mass\",0.000001,[0,0,0,0,0,0,0],\"ng/mg\",null,false,\"M\",null,1,false,false,0,\"ng per mg; nanograms\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per milligram per hour\",\"ng/mg/h\",\"(NG/MG)/HR\",\"mass\",2.7777777777777777e-10,[0,-1,0,0,0,0,0],\"(ng/mg)/h\",null,false,\"M\",null,1,false,false,0,\"ng/mg/hr; ng per mg per hr; nanograms per milligrams per hour\",\"LOINC\",\"MRtoRat \",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per minute\",\"ng/min\",\"NG/MIN\",\"mass\",1.6666666666666667e-11,[0,-1,1,0,0,0,0],\"ng/min\",null,false,\"M\",null,1,false,false,0,\"ng per min; nanograms\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per millliiter\",\"ng/mL\",\"NG/ML\",\"mass\",0.001,[-3,0,1,0,0,0,0],\"ng/mL\",null,false,\"M\",null,1,false,false,0,\"ng per mL; nanograms; millilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per milliliter per hour\",\"ng/mL/h\",\"(NG/ML)/HR\",\"mass\",2.7777777777777776e-7,[-3,-1,1,0,0,0,0],\"(ng/mL)/h\",null,false,\"M\",null,1,false,false,0,\"ng/mL/hr; ng per mL per mL; nanograms per milliliter per hour; nanogram per millilitre per hour; nanograms per millilitre per hour; enzymatic activity per volume; enzyme activity per milliliters\",\"LOINC\",\"CCnc\",\"Clinical\",\"tests that measure enzymatic activity\",null,null,null,null,false],[true,\"nanogram per second\",\"ng/s\",\"NG/S\",\"mass\",1e-9,[0,-1,1,0,0,0,0],\"ng/s\",null,false,\"M\",null,1,false,false,0,\"ng/sec; ng per sec; nanograms per second\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanogram per enzyme unit\",\"ng/U\",\"NG/U\",\"mass\",9.963241120049634e-26,[0,1,1,0,0,0,0],\"ng/U\",null,false,\"M\",null,1,false,false,-1,\"ng per U; nanograms per enzyme unit\",\"LOINC\",\"CMass\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",null,null,null,null,false],[false,\"nanokatal\",\"nkat\",\"NKAT\",\"catalytic activity\",602213670000000,[0,-1,0,0,0,0,0],\"nkat\",\"chemical\",true,null,null,1,false,false,1,\"nanokatals\",\"LOINC\",\"CAct\",\"Clinical\",\"kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.\",\"mol/s\",\"MOL/S\",\"1\",1,false],[false,\"nanoliter\",\"nL\",\"NL\",\"volume\",1.0000000000000002e-12,[3,0,0,0,0,0,0],\"nL\",\"iso1000\",true,null,null,1,false,false,0,\"nanoliters; nanolitres\",\"LOINC\",\"Vol\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[true,\"nanometer\",\"nm\",\"NM\",\"length\",1e-9,[1,0,0,0,0,0,0],\"nm\",null,false,\"L\",null,1,false,false,0,\"nanometers; nanometres\",\"LOINC\",\"Len\",\"Clinical\",\"\",null,null,null,null,false],[true,\"nanometer per second per liter\",\"nm/s/L\",\"(NM/S)/L\",\"length\",0.000001,[-2,-1,0,0,0,0,0],\"(nm/s)/L\",null,false,\"L\",null,1,false,false,0,\"nm/sec/liter; nm/sec/litre; nm per s per l; nm per sec per l; nanometers per second per liter; nanometre per second per litre; nanometres per second per litre\",\"LOINC\",\"VelCnc\",\"Clinical\",\"\",null,null,null,null,false],[false,\"nanomole\",\"nmol\",\"NMOL\",\"amount of substance\",602213670000000,[0,0,0,0,0,0,0],\"nmol\",\"si\",true,null,null,1,false,false,1,\"nanomoles\",\"LOINC\",\"Sub\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per 24 hour\",\"nmol/(24.h)\",\"NMOL/HR\",\"amount of substance\",6970065625,[0,-1,0,0,0,0,0],\"nmol/h\",\"si\",true,null,null,1,false,false,1,\"nmol/24hr; nmol/24 hr; nanomoles per 24 hours; nmol/day; nanomoles per day; nmol per day; nanomole/day; nanomol/day\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per day\",\"nmol/d\",\"NMOL/D\",\"amount of substance\",6970065625,[0,-1,0,0,0,0,0],\"nmol/d\",\"si\",true,null,null,1,false,false,1,\"nmol/day; nanomoles per day; nmol per day; nanomole/day; nanomol/day; nmol/24hr; nmol/24 hr; nanomoles per 24 hours; \",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per deciliter\",\"nmol/dL\",\"NMOL/DL\",\"amount of substance\",6022136700000000000,[-3,0,0,0,0,0,0],\"nmol/dL\",\"si\",true,null,null,1,false,false,1,\"nmol per dL; nanomoles per deciliter; nanomole per decilitre; nanomoles per decilitre; nanomole/deciliter; nanomole/decilitre; nanomol/deciliter; nanomol/decilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per gram\",\"nmol/g\",\"NMOL/G\",\"amount of substance\",602213670000000,[0,0,-1,0,0,0,0],\"nmol/g\",\"si\",true,null,null,1,false,false,1,\"nmol per gram; nanomoles per gram; nanomole/gram\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per hour per liter\",\"nmol/h/L\",\"(NMOL/HR)/L\",\"amount of substance\",167281575000000,[-3,-1,0,0,0,0,0],\"(nmol/h)/L\",\"si\",true,null,null,1,false,false,1,\"nmol/hrs/L; nmol per hrs per L; nanomoles per hours per liter; litre; enzymatic activity per volume; enzyme activities\",\"LOINC\",\"CCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per liter\",\"nmol/L\",\"NMOL/L\",\"amount of substance\",602213670000000000,[-3,0,0,0,0,0,0],\"nmol/L\",\"si\",true,null,null,1,false,false,1,\"nmol per L; nanomoles per liter; litre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per milligram\",\"nmol/mg\",\"NMOL/MG\",\"amount of substance\",602213670000000000,[0,0,-1,0,0,0,0],\"nmol/mg\",\"si\",true,null,null,1,false,false,1,\"nmol per mg; nanomoles per milligram\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per milligram per hour\",\"nmol/mg/h\",\"(NMOL/MG)/HR\",\"amount of substance\",167281575000000,[0,-1,-1,0,0,0,0],\"(nmol/mg)/h\",\"si\",true,null,null,1,false,false,1,\"nmol/mg/hr; nmol per mg per hr; nanomoles per milligrams per hour\",\"LOINC\",\"SCntRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per milligram of protein\",\"nmol/mg{prot}\",\"NMOL/MG\",\"amount of substance\",602213670000000000,[0,0,-1,0,0,0,0],\"nmol/mg\",\"si\",true,null,null,1,false,false,1,\"nanomoles; nmol/mg prot; nmol per mg prot\",\"LOINC\",\"Ratio; CCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per minute\",\"nmol/min\",\"NMOL/MIN\",\"amount of substance\",10036894500000,[0,-1,0,0,0,0,0],\"nmol/min\",\"si\",true,null,null,1,false,false,1,\"nmol per min; nanomoles per minute; milli enzyme units; enzyme activity per volume; enzymatic activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min. nmol/min = mU (milli enzyme unit)\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per minute per milliliter\",\"nmol/min/mL\",\"(NMOL/MIN)/ML\",\"amount of substance\",10036894500000000000,[-3,-1,0,0,0,0,0],\"(nmol/min)/mL\",\"si\",true,null,null,1,false,false,1,\"nmol per min per mL; nanomoles per minutes per milliliter; millilitre; milli enzyme units per volume; enzyme activity; enzymatic activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min. nmol/mL/min = mU/mL\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per milliliter\",\"nmol/mL\",\"NMOL/ML\",\"amount of substance\",602213670000000000000,[-3,0,0,0,0,0,0],\"nmol/mL\",\"si\",true,null,null,1,false,false,1,\"nmol per mL; nanomoles per milliliter; millilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per milliliter per hour\",\"nmol/mL/h\",\"(NMOL/ML)/HR\",\"amount of substance\",167281575000000000,[-3,-1,0,0,0,0,0],\"(nmol/mL)/h\",\"si\",true,null,null,1,false,false,1,\"nmol/mL/hr; nmol per mL per hr; nanomoles per milliliters per hour; millilitres; milli enzyme units per volume; enzyme activity; enzymatic activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min.\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per milliliter per minute\",\"nmol/mL/min\",\"(NMOL/ML)/MIN\",\"amount of substance\",10036894500000000000,[-3,-1,0,0,0,0,0],\"(nmol/mL)/min\",\"si\",true,null,null,1,false,false,1,\"nmol per mL per min; nanomoles per milliliters per min; millilitres; milli enzyme units per volume; enzyme activity; enzymatic activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min. nmol/mL/min = mU/mL\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per millimole\",\"nmol/mmol\",\"NMOL/MMOL\",\"amount of substance\",0.000001,[0,0,0,0,0,0,0],\"nmol/mmol\",\"si\",true,null,null,1,false,false,0,\"nmol per mmol; nanomoles per millimole\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per millimole of creatinine\",\"nmol/mmol{creat}\",\"NMOL/MMOL\",\"amount of substance\",0.000001,[0,0,0,0,0,0,0],\"nmol/mmol\",\"si\",true,null,null,1,false,false,0,\"nanomoles\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per mole\",\"nmol/mol\",\"NMOL/MOL\",\"amount of substance\",1e-9,[0,0,0,0,0,0,0],\"nmol/mol\",\"si\",true,null,null,1,false,false,0,\"nmol per mole; nanomoles\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per nanomole\",\"nmol/nmol\",\"NMOL/NMOL\",\"amount of substance\",1,[0,0,0,0,0,0,0],\"nmol/nmol\",\"si\",true,null,null,1,false,false,0,\"nmol per nmol; nanomoles\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per second\",\"nmol/s\",\"NMOL/S\",\"amount of substance\",602213670000000,[0,-1,0,0,0,0,0],\"nmol/s\",\"si\",true,null,null,1,false,false,1,\"nmol/sec; nmol per sec; nanomoles per sercond; milli enzyme units; enzyme activity; enzymatic activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min.\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"nanomole per second per liter\",\"nmol/s/L\",\"(NMOL/S)/L\",\"amount of substance\",602213670000000000,[-3,-1,0,0,0,0,0],\"(nmol/s)/L\",\"si\",true,null,null,1,false,false,1,\"nmol/sec/L; nmol per s per L; nmol per sec per L; nanomoles per seconds per liter; litre; milli enzyme units per volume; enzyme activity; enzymatic activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min.\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[true,\"nanosecond\",\"ns\",\"NS\",\"time\",1e-9,[0,1,0,0,0,0,0],\"ns\",null,false,\"T\",null,1,false,false,0,\"nanoseconds\",\"LOINC\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[false,\"nanoenzyme unit per milliliter\",\"nU/mL\",\"NU/ML\",\"catalytic activity\",10036894500000,[-3,-1,0,0,0,0,0],\"nU/mL\",\"chemical\",true,null,null,1,false,false,1,\"nU per mL; nanoenzyme units per milliliter; millilitre; enzymatic activity per volume; enzyme activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 fU = pmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"Ohm meter\",\"Ohm.m\",\"OHM.M\",\"electric resistance\",1000,[3,-1,1,0,0,-2,0],\"Ω.m\",\"si\",true,null,null,1,false,false,0,\"electric resistivity; meters; metres\",\"LOINC\",\"\",\"Clinical\",\"unit of electric resistivity\",\"V/A\",\"V/A\",\"1\",1,false],[false,\"osmole per kilogram\",\"osm/kg\",\"OSM/KG\",\"amount of substance (dissolved particles)\",602213670000000000000,[0,0,-1,0,0,0,0],\"osm/kg\",\"chemical\",true,null,null,1,false,false,1,\"osm per kg; osmoles per kilogram; osmols\",\"LOINC\",\"Osmol\",\"Clinical\",\"\",\"mol\",\"MOL\",\"1\",1,false],[false,\"osmole per liter\",\"osm/L\",\"OSM/L\",\"amount of substance (dissolved particles)\",6.0221366999999994e+26,[-3,0,0,0,0,0,0],\"osm/L\",\"chemical\",true,null,null,1,false,false,1,\"osm per L; osmoles per liter; litre; osmols\",\"LOINC\",\"Osmol\",\"Clinical\",\"\",\"mol\",\"MOL\",\"1\",1,false],[false,\"picoampere\",\"pA\",\"PA\",\"electric current\",1e-12,[0,-1,0,0,0,1,0],\"pA\",\"si\",true,null,null,1,false,false,0,\"picoamperes\",\"LOINC\",\"\",\"Clinical\",\"equal to 10^-12 amperes\",\"C/s\",\"C/S\",\"1\",1,false],[true,\"picogram\",\"pg\",\"PG\",\"mass\",1e-12,[0,0,1,0,0,0,0],\"pg\",null,false,\"M\",null,1,false,false,0,\"picograms\",\"LOINC\",\"Mass; EntMass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"picogram per deciliter\",\"pg/dL\",\"PG/DL\",\"mass\",9.999999999999999e-9,[-3,0,1,0,0,0,0],\"pg/dL\",null,false,\"M\",null,1,false,false,0,\"pg per dL; picograms; decilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"picogram per liter\",\"pg/L\",\"PG/L\",\"mass\",1e-9,[-3,0,1,0,0,0,0],\"pg/L\",null,false,\"M\",null,1,false,false,0,\"pg per L; picograms; litre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"picogram per milligram\",\"pg/mg\",\"PG/MG\",\"mass\",1e-9,[0,0,0,0,0,0,0],\"pg/mg\",null,false,\"M\",null,1,false,false,0,\"pg per mg; picograms\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"picogram per milliliter\",\"pg/mL\",\"PG/ML\",\"mass\",0.000001,[-3,0,1,0,0,0,0],\"pg/mL\",null,false,\"M\",null,1,false,false,0,\"pg per mL; picograms per milliliter; millilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"picogram per millimeter\",\"pg/mm\",\"PG/MM\",\"mass\",1e-9,[-1,0,1,0,0,0,0],\"pg/mm\",null,false,\"M\",null,1,false,false,0,\"pg per mm; picogram/millimeter; picogram/millimetre; picograms per millimeter; millimetre\",\"LOINC\",\"Lineic Mass\",\"Clinical\",\"\",null,null,null,null,false],[false,\"picokatal\",\"pkat\",\"PKAT\",\"catalytic activity\",602213670000,[0,-1,0,0,0,0,0],\"pkat\",\"chemical\",true,null,null,1,false,false,1,\"pkats; picokatals\",\"LOINC\",\"CAct\",\"Clinical\",\"kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.\",\"mol/s\",\"MOL/S\",\"1\",1,false],[false,\"picoliter\",\"pL\",\"PL\",\"volume\",1e-15,[3,0,0,0,0,0,0],\"pL\",\"iso1000\",true,null,null,1,false,false,0,\"picoliters; picolitres\",\"LOINC\",\"Vol\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[true,\"picometer\",\"pm\",\"PM\",\"length\",1e-12,[1,0,0,0,0,0,0],\"pm\",null,false,\"L\",null,1,false,false,0,\"picometers; picometres\",\"LOINC\",\"Len\",\"Clinical\",\"\",null,null,null,null,false],[false,\"picomole\",\"pmol\",\"PMOL\",\"amount of substance\",602213670000,[0,0,0,0,0,0,0],\"pmol\",\"si\",true,null,null,1,false,false,1,\"picomoles; pmols\",\"LOINC\",\"Sub\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per 24 hour\",\"pmol/(24.h)\",\"PMOL/HR\",\"amount of substance\",6970065.625,[0,-1,0,0,0,0,0],\"pmol/h\",\"si\",true,null,null,1,false,false,1,\"pmol/24hrs; pmol/24 hrs; pmol per 24 hrs; 24hrs; days; dy; picomoles per 24 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per day\",\"pmol/d\",\"PMOL/D\",\"amount of substance\",6970065.625,[0,-1,0,0,0,0,0],\"pmol/d\",\"si\",true,null,null,1,false,false,1,\"pmol/dy; pmol per day; 24 hours; 24hrs; 24 hrs; picomoles\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per deciliter\",\"pmol/dL\",\"PMOL/DL\",\"amount of substance\",6022136700000000,[-3,0,0,0,0,0,0],\"pmol/dL\",\"si\",true,null,null,1,false,false,1,\"pmol per dL; picomoles per deciliter; decilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per gram\",\"pmol/g\",\"PMOL/G\",\"amount of substance\",602213670000,[0,0,-1,0,0,0,0],\"pmol/g\",\"si\",true,null,null,1,false,false,1,\"pmol per gm; picomoles per gram; picomole/gram\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per hour per milliliter \",\"pmol/h/mL\",\"(PMOL/HR)/ML\",\"amount of substance\",167281575000000,[-3,-1,0,0,0,0,0],\"(pmol/h)/mL\",\"si\",true,null,null,1,false,false,1,\"pmol/hrs/mL; pmol per hrs per mL; picomoles per hour per milliliter; millilitre; micro enzyme units per volume; enzymatic activity; enzyme activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min. \",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per liter\",\"pmol/L\",\"PMOL/L\",\"amount of substance\",602213670000000,[-3,0,0,0,0,0,0],\"pmol/L\",\"si\",true,null,null,1,false,false,1,\"picomole/liter; pmol per L; picomoles; litre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per minute\",\"pmol/min\",\"PMOL/MIN\",\"amount of substance\",10036894500,[0,-1,0,0,0,0,0],\"pmol/min\",\"si\",true,null,null,1,false,false,1,\"picomole/minute; pmol per min; picomoles per minute; micro enzyme units; enzymatic activity; enzyme activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min. pmol/min = uU (micro enzyme unit)\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per milliliter\",\"pmol/mL\",\"PMOL/ML\",\"amount of substance\",602213670000000000,[-3,0,0,0,0,0,0],\"pmol/mL\",\"si\",true,null,null,1,false,false,1,\"picomole/milliliter; picomole/millilitre; pmol per mL; picomoles; millilitre; picomols; pmols\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"picomole per micromole\",\"pmol/umol\",\"PMOL/UMOL\",\"amount of substance\",0.000001,[0,0,0,0,0,0,0],\"pmol/μmol\",\"si\",true,null,null,1,false,false,0,\"pmol/mcgmol; picomole/micromole; pmol per umol; pmol per mcgmol; picomoles \",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[true,\"picosecond\",\"ps\",\"PS\",\"time\",1e-12,[0,1,0,0,0,0,0],\"ps\",null,false,\"T\",null,1,false,false,0,\"picoseconds; psec\",\"LOINC\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[false,\"picotesla\",\"pT\",\"PT\",\"magnetic flux density\",1e-9,[0,-1,1,0,0,-1,0],\"pT\",\"si\",true,null,null,1,false,false,0,\"picoteslas\",\"LOINC\",\"\",\"Clinical\",\"SI unit of magnetic field strength for magnetic field B\",\"Wb/m2\",\"WB/M2\",\"1\",1,false],[false,\"enzyme unit per 12 hour\",\"U/(12.h)\",\"U/HR\",\"catalytic activity\",232335520833.33334,[0,-2,0,0,0,0,0],\"U/h\",\"chemical\",true,null,null,1,false,false,1,\"U/12hrs; U/ 12hrs; U per 12 hrs; 12hrs; enzyme units per 12 hours; enzyme activity; enzymatic activity per time; umol per min per 12 hours; micromoles per minute per 12 hours; umol/min/12hr\",\"LOINC\",\"CRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per 2 hour\",\"U/(2.h)\",\"U/HR\",\"catalytic activity\",1394013125000,[0,-2,0,0,0,0,0],\"U/h\",\"chemical\",true,null,null,1,false,false,1,\"U/2hrs; U/ 2hrs; U per 2 hrs; 2hrs; enzyme units per 2 hours; enzyme activity; enzymatic activity per time; umol per minute per 2 hours; micromoles per minute; umol/min/2hr; umol per min per 2hr\",\"LOINC\",\"CRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per 24 hour\",\"U/(24.h)\",\"U/HR\",\"catalytic activity\",116167760416.66667,[0,-2,0,0,0,0,0],\"U/h\",\"chemical\",true,null,null,1,false,false,1,\"U/24hrs; U/ 24hrs; U per 24 hrs; 24hrs; enzyme units per 24 hours; enzyme activity; enzymatic activity per time; micromoles per minute per 24 hours; umol/min/24hr; umol per min per 24hr\",\"LOINC\",\"CRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per 10\",\"U/10\",\"U\",\"catalytic activity\",1003689450000000,[0,-1,0,0,0,0,0],\"U\",\"chemical\",true,null,null,1,false,false,1,\"enzyme unit/10; U per 10; enzyme units per 10; enzymatic activity; enzyme activity; micromoles per minute; umol/min/10\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per 10 billion\",\"U/10*10\",\"U/(10*10)\",\"catalytic activity\",1003689.45,[0,-1,0,0,0,0,0],\"U/(10<sup>10</sup>)\",\"chemical\",true,null,null,1,false,false,1,\"U per 10*10; enzyme units per 10*10; U per 10 billion; enzyme units; enzymatic activity; micromoles per minute per 10 billion; umol/min/10*10\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per trillion\",\"U/10*12\",\"U/(10*12)\",\"catalytic activity\",10036.8945,[0,-1,0,0,0,0,0],\"U/(10<sup>12</sup>)\",\"chemical\",true,null,null,1,false,false,1,\"enzyme unit/10*12; U per 10*12; enzyme units per 10*12; enzyme units per trillion; enzymatic activity; micromoles per minute per trillion; umol/min/10*12; umol per min per 10*12\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per million\",\"U/10*6\",\"U/(10*6)\",\"catalytic activity\",10036894500,[0,-1,0,0,0,0,0],\"U/(10<sup>6</sup>)\",\"chemical\",true,null,null,1,false,false,1,\"enzyme unit/10*6; U per 10*6; enzyme units per 10*6; enzyme units; enzymatic activity per volume; micromoles per minute per million; umol/min/10*6; umol per min per 10*6\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per billion\",\"U/10*9\",\"U/(10*9)\",\"catalytic activity\",10036894.5,[0,-1,0,0,0,0,0],\"U/(10<sup>9</sup>)\",\"chemical\",true,null,null,1,false,false,1,\"enzyme unit/10*9; U per 10*9; enzyme units per 10*9; enzymatic activity per volume; micromoles per minute per billion; umol/min/10*9; umol per min per 10*9\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per day\",\"U/d\",\"U/D\",\"catalytic activity\",116167760416.66667,[0,-2,0,0,0,0,0],\"U/d\",\"chemical\",true,null,null,1,false,false,1,\"U/dy; enzyme units per day; enzyme units; enzyme activity; enzymatic activity per time; micromoles per minute per day; umol/min/day; umol per min per day\",\"LOINC\",\"CRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per deciliter\",\"U/dL\",\"U/DL\",\"catalytic activity\",100368945000000000000,[-3,-1,0,0,0,0,0],\"U/dL\",\"chemical\",true,null,null,1,false,false,1,\"U per dL; enzyme units per deciliter; decilitre; micromoles per minute per deciliter; umol/min/dL; umol per min per dL\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per gram\",\"U/g\",\"U/G\",\"catalytic activity\",10036894500000000,[0,-1,-1,0,0,0,0],\"U/g\",\"chemical\",true,null,null,1,false,false,1,\"U/gm; U per gm; enzyme units per gram; micromoles per minute per gram; umol/min/g; umol per min per g\",\"LOINC\",\"CCnt\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per hour\",\"U/h\",\"U/HR\",\"catalytic activity\",2788026250000,[0,-2,0,0,0,0,0],\"U/h\",\"chemical\",true,null,null,1,false,false,1,\"U/hr; U per hr; enzyme units per hour; micromoles per minute per hour; umol/min/hr; umol per min per hr\",\"LOINC\",\"CRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per liter\",\"U/L\",\"U/L\",\"catalytic activity\",10036894500000000000,[-3,-1,0,0,0,0,0],\"U/L\",\"chemical\",true,null,null,1,false,false,1,\"enzyme unit/liter; enzyme unit/litre; U per L; enzyme units per liter; enzyme unit per litre; micromoles per minute per liter; umol/min/L; umol per min per L\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per minute\",\"U/min\",\"U/MIN\",\"catalytic activity\",167281575000000,[0,-2,0,0,0,0,0],\"U/min\",\"chemical\",true,null,null,1,false,false,1,\"enzyme unit/minute; U per min; enzyme units; umol/min/min; micromoles per minute per minute; micromoles per min per min; umol\",\"LOINC\",\"CRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per milliliter\",\"U/mL\",\"U/ML\",\"catalytic activity\",1.00368945e+22,[-3,-1,0,0,0,0,0],\"U/mL\",\"chemical\",true,null,null,1,false,false,1,\"U per mL; enzyme units per milliliter; millilitre; micromoles per minute per milliliter; umol/min/mL; umol per min per mL\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"enzyme unit per second\",\"U/s\",\"U/S\",\"catalytic activity\",10036894500000000,[0,-2,0,0,0,0,0],\"U/s\",\"chemical\",true,null,null,1,false,false,1,\"U/sec; U per second; enzyme units per second; micromoles per minute per second; umol/min/sec; umol per min per sec\",\"LOINC\",\"CRat\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min)\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"micro international unit\",\"u[IU]\",\"U[IU]\",\"arbitrary\",0.000001,[0,0,0,0,0,0,0],\"μi.U.\",\"chemical\",true,null,null,1,false,true,0,\"uIU; u IU; microinternational units\",\"LOINC\",\"Arb\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"micro international unit per liter\",\"u[IU]/L\",\"U[IU]/L\",\"arbitrary\",0.001,[-3,0,0,0,0,0,0],\"(μi.U.)/L\",\"chemical\",true,null,null,1,false,true,0,\"uIU/L; u IU/L; uIU per L; microinternational units per liter; litre; \",\"LOINC\",\"ACnc\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"micro international unit per milliliter\",\"u[IU]/mL\",\"U[IU]/ML\",\"arbitrary\",1,[-3,0,0,0,0,0,0],\"(μi.U.)/mL\",\"chemical\",true,null,null,1,false,true,0,\"uIU/mL; u IU/mL; uIU per mL; microinternational units per milliliter; millilitre\",\"LOINC\",\"ACnc\",\"Clinical\",\"International units (IU) are analyte and reference specimen  specific arbitrary units (held at WHO)\",\"[iU]\",\"[IU]\",\"1\",1,false],[false,\"microequivalent\",\"ueq\",\"UEQ\",\"amount of substance\",602213670000000000,[0,0,0,0,0,0,0],\"μeq\",\"chemical\",true,null,null,1,false,false,1,\"microequivalents; 10^-6 equivalents; 10-6 equivalents\",\"LOINC\",\"Sub\",\"Clinical\",\"\",\"mol\",\"MOL\",\"1\",1,false],[false,\"microequivalent per liter\",\"ueq/L\",\"UEQ/L\",\"amount of substance\",602213670000000000000,[-3,0,0,0,0,0,0],\"μeq/L\",\"chemical\",true,null,null,1,false,false,1,\"ueq per liter; litre; microequivalents\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",\"mol\",\"MOL\",\"1\",1,false],[false,\"microequivalent per milliliter\",\"ueq/mL\",\"UEQ/ML\",\"amount of substance\",6.0221367000000003e+23,[-3,0,0,0,0,0,0],\"μeq/mL\",\"chemical\",true,null,null,1,false,false,1,\"ueq per milliliter; millilitre; microequivalents\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",\"mol\",\"MOL\",\"1\",1,false],[true,\"microgram\",\"ug\",\"UG\",\"mass\",0.000001,[0,0,1,0,0,0,0],\"μg\",null,false,\"M\",null,1,false,false,0,\"mcg; micrograms; 10^-6 grams; 10-6 grams\",\"LOINC\",\"Mass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per 100 gram\",\"ug/(100.g)\",\"UG/G\",\"mass\",1e-8,[0,0,0,0,0,0,0],\"μg/g\",null,false,\"M\",null,1,false,false,0,\"ug/100gm; ug/100 gm; mcg; ug per 100g; 100 gm; mcg per 100g; micrograms per 100 grams\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per 24 hour\",\"ug/(24.h)\",\"UG/HR\",\"mass\",1.1574074074074074e-11,[0,-1,1,0,0,0,0],\"μg/h\",null,false,\"M\",null,1,false,false,0,\"ug/24hrs; ug/24 hrs; mcg/24hrs; ug per 24hrs; mcg per 24hrs; 24 hrs; micrograms per 24 hours\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per 8 hour\",\"ug/(8.h)\",\"UG/HR\",\"mass\",3.472222222222222e-11,[0,-1,1,0,0,0,0],\"μg/h\",null,false,\"M\",null,1,false,false,0,\"ug/8hrs; ug/8 hrs; mcg/8hrs; ug per 8hrs; mcg per 8hrs; 8 hrs; micrograms per 8 hours; shift\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per square foot (international)\",\"ug/[sft_i]\",\"UG/[SFT_I]\",\"mass\",0.000010763910416709721,[-2,0,1,0,0,0,0],\"μg\",null,false,\"M\",null,1,false,false,0,\"ug/sft; ug/ft2; ug/ft^2; ug/sq. ft; micrograms; sq. foot; foot squared\",\"LOINC\",\"ArMass\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per day\",\"ug/d\",\"UG/D\",\"mass\",1.1574074074074074e-11,[0,-1,1,0,0,0,0],\"μg/d\",null,false,\"M\",null,1,false,false,0,\"ug/dy; mcg/dy; ug per day; mcg; micrograms per day\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per deciliter\",\"ug/dL\",\"UG/DL\",\"mass\",0.009999999999999998,[-3,0,1,0,0,0,0],\"μg/dL\",null,false,\"M\",null,1,false,false,0,\"ug per dL; mcg/dl; mcg per dl; micrograms per deciliter; decilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per gram\",\"ug/g\",\"UG/G\",\"mass\",0.000001,[0,0,0,0,0,0,0],\"μg/g\",null,false,\"M\",null,1,false,false,0,\"ug per gm; mcg/gm; mcg per g; micrograms per gram\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per hour\",\"ug/h\",\"UG/HR\",\"mass\",2.7777777777777777e-10,[0,-1,1,0,0,0,0],\"μg/h\",null,false,\"M\",null,1,false,false,0,\"ug/hr; mcg/hr; mcg per hr; ug per hr; ug per hour; micrograms\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per kilogram\",\"ug/kg\",\"UG/KG\",\"mass\",9.999999999999999e-10,[0,0,0,0,0,0,0],\"μg/kg\",null,false,\"M\",null,1,false,false,0,\"ug per kg; mcg/kg; mcg per kg; micrograms per kilogram\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per kilogram per 8 hour\",\"ug/kg/(8.h)\",\"(UG/KG)/HR\",\"mass\",3.472222222222222e-14,[0,-1,0,0,0,0,0],\"(μg/kg)/h\",null,false,\"M\",null,1,false,false,0,\"ug/kg/8hrs; mcg/kg/8hrs; ug/kg/8 hrs; mcg/kg/8 hrs; ug per kg per 8hrs; 8 hrs; mcg per kg per 8hrs; micrograms per kilograms per 8 hours; shift\",\"LOINC\",\"\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"microgram per kilogram per day\",\"ug/kg/d\",\"(UG/KG)/D\",\"mass\",1.1574074074074072e-14,[0,-1,0,0,0,0,0],\"(μg/kg)/d\",null,false,\"M\",null,1,false,false,0,\"ug/(kg.d); ug/kg/dy; mcg/kg/day; ug per kg per dy; 24 hours; 24hrs; mcg; kilograms; microgram per kilogram and day\",\"LOINC\",\"\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"microgram per kilogram per hour\",\"ug/kg/h\",\"(UG/KG)/HR\",\"mass\",2.7777777777777774e-13,[0,-1,0,0,0,0,0],\"(μg/kg)/h\",null,false,\"M\",null,1,false,false,0,\"ug/(kg.h); ug/kg/hr; mcg/kg/hr; ug per kg per hr; mcg per kg per hr; kilograms\",\"LOINC\",\"\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"microgram per kilogram per minute\",\"ug/kg/min\",\"(UG/KG)/MIN\",\"mass\",1.6666666666666664e-11,[0,-1,0,0,0,0,0],\"(μg/kg)/min\",null,false,\"M\",null,1,false,false,0,\"ug/kg/min; ug/kg/min; mcg/kg/min; ug per kg per min; mcg; micrograms per kilograms per minute \",\"LOINC\",\"\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"microgram per liter\",\"ug/L\",\"UG/L\",\"mass\",0.001,[-3,0,1,0,0,0,0],\"μg/L\",null,false,\"M\",null,1,false,false,0,\"mcg/L; ug per L; mcg; micrograms per liter; litre \",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per liter per 24 hour\",\"ug/L/(24.h)\",\"(UG/L)/HR\",\"mass\",1.1574074074074074e-8,[-3,-1,1,0,0,0,0],\"(μg/L)/h\",null,false,\"M\",null,1,false,false,0,\"ug/L/24hrs; ug/L/24 hrs; mcg/L/24hrs; ug per L per 24hrs; 24 hrs; day; dy mcg; micrograms per liters per 24 hours; litres\",\"LOINC\",\"\",\"Clinical\",\"unit used to measure mass dose rate per patient body mass\",null,null,null,null,false],[true,\"microgram per square meter\",\"ug/m2\",\"UG/M2\",\"mass\",0.000001,[-2,0,1,0,0,0,0],\"μg/(m<sup>2</sup>)\",null,false,\"M\",null,1,false,false,0,\"ug/m^2; ug/sq. m; mcg/m2; mcg/m^2; mcg/sq. m; ug per m2; m^2; sq. meter; mcg; micrograms per square meter; meter squared; metre\",\"LOINC\",\"ArMass\",\"Clinical\",\"unit used to measure mass dose per patient body surface area\",null,null,null,null,false],[true,\"microgram per cubic meter\",\"ug/m3\",\"UG/M3\",\"mass\",0.000001,[-3,0,1,0,0,0,0],\"μg/(m<sup>3</sup>)\",null,false,\"M\",null,1,false,false,0,\"ug/m^3; ug/cu. m; mcg/m3; mcg/m^3; mcg/cu. m; ug per m3; ug per m^3; ug per cu. m; mcg; micrograms per cubic meter; meter cubed; metre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per milligram\",\"ug/mg\",\"UG/MG\",\"mass\",0.001,[0,0,0,0,0,0,0],\"μg/mg\",null,false,\"M\",null,1,false,false,0,\"ug per mg; mcg/mg; mcg per mg; micromilligrams per milligram\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per minute\",\"ug/min\",\"UG/MIN\",\"mass\",1.6666666666666667e-8,[0,-1,1,0,0,0,0],\"μg/min\",null,false,\"M\",null,1,false,false,0,\"ug per min; mcg/min; mcg per min; microminutes per minute\",\"LOINC\",\"MRat\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per milliliter\",\"ug/mL\",\"UG/ML\",\"mass\",1,[-3,0,1,0,0,0,0],\"μg/mL\",null,false,\"M\",null,1,false,false,0,\"ug per mL; mcg/mL; mcg per mL; micrograms per milliliter; millilitre\",\"LOINC\",\"MCnc\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per millimole\",\"ug/mmol\",\"UG/MMOL\",\"mass\",1.660540186674939e-27,[0,0,1,0,0,0,0],\"μg/mmol\",null,false,\"M\",null,1,false,false,-1,\"ug per mmol; mcg/mmol; mcg per mmol; micrograms per millimole\",\"LOINC\",\"Ratio\",\"Clinical\",\"\",null,null,null,null,false],[true,\"microgram per nanogram\",\"ug/ng\",\"UG/NG\",\"mass\",999.9999999999999,[0,0,0,0,0,0,0],\"μg/ng\",null,false,\"M\",null,1,false,false,0,\"ug per ng; mcg/ng; mcg per ng; micrograms per nanogram\",\"LOINC\",\"MCnt\",\"Clinical\",\"\",null,null,null,null,false],[false,\"microkatal\",\"ukat\",\"UKAT\",\"catalytic activity\",602213670000000000,[0,-1,0,0,0,0,0],\"μkat\",\"chemical\",true,null,null,1,false,false,1,\"microkatals; ukats\",\"LOINC\",\"CAct\",\"Clinical\",\"kat is a unit of catalytic activity with base units = mol/s. Rarely used because its units are too large to practically express catalytic activity. See enzyme unit [U] which is the standard unit for catalytic activity.\",\"mol/s\",\"MOL/S\",\"1\",1,false],[false,\"microliter\",\"uL\",\"UL\",\"volume\",1e-9,[3,0,0,0,0,0,0],\"μL\",\"iso1000\",true,null,null,1,false,false,0,\"microliters; microlitres; mcl\",\"LOINC\",\"Vol\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"microliter per 2 hour\",\"uL/(2.h)\",\"UL/HR\",\"volume\",1.388888888888889e-13,[3,-1,0,0,0,0,0],\"μL/h\",\"iso1000\",true,null,null,1,false,false,0,\"uL/2hrs; uL/2 hrs; mcg/2hr; mcg per 2hr; uL per 2hr; uL per 2 hrs; microliters per 2 hours; microlitres \",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[false,\"microliter per hour\",\"uL/h\",\"UL/HR\",\"volume\",2.777777777777778e-13,[3,-1,0,0,0,0,0],\"μL/h\",\"iso1000\",true,null,null,1,false,false,0,\"uL/hr; mcg/hr; mcg per hr; uL per hr; microliters per hour; microlitres\",\"LOINC\",\"VRat\",\"Clinical\",\"\",\"l\",null,\"1\",1,false],[true,\"micrometer\",\"um\",\"UM\",\"length\",0.000001,[1,0,0,0,0,0,0],\"μm\",null,false,\"L\",null,1,false,false,0,\"micrometers; micrometres; μm; microns\",\"LOINC\",\"Len\",\"Clinical\",\"Unit of length that is usually used in tests related to the eye\",null,null,null,null,false],[true,\"microns per second\",\"um/s\",\"UM/S\",\"length\",0.000001,[1,-1,0,0,0,0,0],\"μm/s\",null,false,\"L\",null,1,false,false,0,\"um/sec; micron/second; microns/second; um per sec; micrometers per second; micrometres\",\"LOINC\",\"Vel\",\"Clinical\",\"\",null,null,null,null,false],[false,\"micromole\",\"umol\",\"UMOL\",\"amount of substance\",602213670000000000,[0,0,0,0,0,0,0],\"μmol\",\"si\",true,null,null,1,false,false,1,\"micromoles; umols\",\"LOINC\",\"Sub\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per 2 hour\",\"umol/(2.h)\",\"UMOL/HR\",\"amount of substance\",83640787500000,[0,-1,0,0,0,0,0],\"μmol/h\",\"si\",true,null,null,1,false,false,1,\"umol/2hrs; umol/2 hrs; umol per 2 hrs; 2hrs; micromoles per 2 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per 24 hour\",\"umol/(24.h)\",\"UMOL/HR\",\"amount of substance\",6970065625000,[0,-1,0,0,0,0,0],\"μmol/h\",\"si\",true,null,null,1,false,false,1,\"umol/24hrs; umol/24 hrs; umol per 24 hrs; per 24hrs; micromoles per 24 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per 8 hour\",\"umol/(8.h)\",\"UMOL/HR\",\"amount of substance\",20910196875000,[0,-1,0,0,0,0,0],\"μmol/h\",\"si\",true,null,null,1,false,false,1,\"umol/8hr; umol/8 hr; umol per 8 hr; umol per 8hr; umols per 8hr; umol per 8 hours; micromoles per 8 hours; shift\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per day\",\"umol/d\",\"UMOL/D\",\"amount of substance\",6970065625000,[0,-1,0,0,0,0,0],\"μmol/d\",\"si\",true,null,null,1,false,false,1,\"umol/day; umol per day; umols per day; umol per days; micromoles per days; umol/24hr; umol/24 hr; umol per 24 hr; umol per 24hr; umols per 24hr; umol per 24 hours; micromoles per 24 hours\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per deciliter\",\"umol/dL\",\"UMOL/DL\",\"amount of substance\",6.0221367e+21,[-3,0,0,0,0,0,0],\"μmol/dL\",\"si\",true,null,null,1,false,false,1,\"micromole/deciliter; micromole/decilitre; umol per dL; micromoles per deciliters; micromole per decilitres\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per gram\",\"umol/g\",\"UMOL/G\",\"amount of substance\",602213670000000000,[0,0,-1,0,0,0,0],\"μmol/g\",\"si\",true,null,null,1,false,false,1,\"micromole/gram; umol per g; micromoles per gram\",\"LOINC\",\"SCnt; Ratio\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per hour\",\"umol/h\",\"UMOL/HR\",\"amount of substance\",167281575000000,[0,-1,0,0,0,0,0],\"μmol/h\",\"si\",true,null,null,1,false,false,1,\"umol/hr; umol per hr; umol per hour; micromoles per hours\",\"LOINC\",\"SRat\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per kilogram\",\"umol/kg\",\"UMOL/KG\",\"amount of substance\",602213670000000,[0,0,-1,0,0,0,0],\"μmol/kg\",\"si\",true,null,null,1,false,false,1,\"umol per kg; micromoles per kilogram\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per liter\",\"umol/L\",\"UMOL/L\",\"amount of substance\",602213670000000000000,[-3,0,0,0,0,0,0],\"μmol/L\",\"si\",true,null,null,1,false,false,1,\"micromole/liter; micromole/litre; umol per liter; micromoles per liter; litre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per liter per hour\",\"umol/L/h\",\"(UMOL/L)/HR\",\"amount of substance\",167281575000000000,[-3,-1,0,0,0,0,0],\"(μmol/L)/h\",\"si\",true,null,null,1,false,false,1,\"umol/liter/hr; umol/litre/hr; umol per L per hr; umol per liter per hour; micromoles per liters per hour; litre\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min; umol/L/h is a derived unit of enzyme units\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per milligram\",\"umol/mg\",\"UMOL/MG\",\"amount of substance\",602213670000000000000,[0,0,-1,0,0,0,0],\"μmol/mg\",\"si\",true,null,null,1,false,false,1,\"micromole/milligram; umol per mg; micromoles per milligram\",\"LOINC\",\"SCnt\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per minute\",\"umol/min\",\"UMOL/MIN\",\"amount of substance\",10036894500000000,[0,-1,0,0,0,0,0],\"μmol/min\",\"si\",true,null,null,1,false,false,1,\"micromole/minute; umol per min; micromoles per minute; enzyme units\",\"LOINC\",\"CAct\",\"Clinical\",\"unit for the enzyme unit U = umol/min\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per minute per gram\",\"umol/min/g\",\"(UMOL/MIN)/G\",\"amount of substance\",10036894500000000,[0,-1,-1,0,0,0,0],\"(μmol/min)/g\",\"si\",true,null,null,1,false,false,1,\"umol/min/gm; umol per min per gm; micromoles per minutes per gram; U/g; enzyme units\",\"LOINC\",\"CCnt\",\"Clinical\",\"unit for the enzyme unit U = umol/min. umol/min/g = U/g\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per minute per liter\",\"umol/min/L\",\"(UMOL/MIN)/L\",\"amount of substance\",10036894500000000000,[-3,-1,0,0,0,0,0],\"(μmol/min)/L\",\"si\",true,null,null,1,false,false,1,\"umol/min/liter; umol/minute/liter; micromoles per minutes per liter; litre; enzyme units; U/L\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min. umol/min/L = U/L\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per milliliter\",\"umol/mL\",\"UMOL/ML\",\"amount of substance\",6.0221367000000003e+23,[-3,0,0,0,0,0,0],\"μmol/mL\",\"si\",true,null,null,1,false,false,1,\"umol per mL; micromoles per milliliter; millilitre\",\"LOINC\",\"SCnc\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per milliliter per minute\",\"umol/mL/min\",\"(UMOL/ML)/MIN\",\"amount of substance\",1.00368945e+22,[-3,-1,0,0,0,0,0],\"(μmol/mL)/min\",\"si\",true,null,null,1,false,false,1,\"umol per mL per min; micromoles per milliliters per minute; millilitres\",\"LOINC\",\"CCnc\",\"Clinical\",\"unit for the enzyme unit U = umol/min. umol/mL/min = U/mL\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per millimole\",\"umol/mmol\",\"UMOL/MMOL\",\"amount of substance\",0.001,[0,0,0,0,0,0,0],\"μmol/mmol\",\"si\",true,null,null,1,false,false,0,\"umol per mmol; micromoles per millimole\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per mole\",\"umol/mol\",\"UMOL/MOL\",\"amount of substance\",0.000001,[0,0,0,0,0,0,0],\"μmol/mol\",\"si\",true,null,null,1,false,false,0,\"umol per mol; micromoles per mole\",\"LOINC\",\"SRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"micromole per micromole\",\"umol/umol\",\"UMOL/UMOL\",\"amount of substance\",1,[0,0,0,0,0,0,0],\"μmol/μmol\",\"si\",true,null,null,1,false,false,0,\"umol per umol; micromoles per micromole\",\"LOINC\",\"Srto; SFr; EntSRto\",\"Clinical\",\"\",\"10*23\",\"10*23\",\"6.0221367\",6.0221367,false],[false,\"microOhm\",\"uOhm\",\"UOHM\",\"electric resistance\",0.001,[2,-1,1,0,0,-2,0],\"μΩ\",\"si\",true,null,null,1,false,false,0,\"microOhms; µΩ\",\"LOINC\",\"\",\"Clinical\",\"unit of electric resistance\",\"V/A\",\"V/A\",\"1\",1,false],[true,\"microsecond\",\"us\",\"US\",\"time\",0.000001,[0,1,0,0,0,0,0],\"μs\",null,false,\"T\",null,1,false,false,0,\"microseconds\",\"LOINC\",\"Time\",\"Clinical\",\"\",null,null,null,null,false],[false,\"micro enzyme unit per gram\",\"uU/g\",\"UU/G\",\"catalytic activity\",10036894500,[0,-1,-1,0,0,0,0],\"μU/g\",\"chemical\",true,null,null,1,false,false,1,\"uU per gm; micro enzyme units per gram; micro enzymatic activity per mass; enzyme activity\",\"LOINC\",\"CCnt\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 uU = 1pmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"micro enzyme unit per liter\",\"uU/L\",\"UU/L\",\"catalytic activity\",10036894500000,[-3,-1,0,0,0,0,0],\"μU/L\",\"chemical\",true,null,null,1,false,false,1,\"uU per L; micro enzyme units per liter; litre; enzymatic activity per volume; enzyme activity \",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 uU = 1pmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"micro enzyme unit per milliliter\",\"uU/mL\",\"UU/ML\",\"catalytic activity\",10036894500000000,[-3,-1,0,0,0,0,0],\"μU/mL\",\"chemical\",true,null,null,1,false,false,1,\"uU per mL; micro enzyme units per milliliter; millilitre; enzymatic activity per volume; enzyme activity\",\"LOINC\",\"CCnc\",\"Clinical\",\"1 U is the standard enzyme unit which equals 1 micromole substrate catalyzed per minute (1 umol/min); 1 uU = 1pmol/min\",\"umol/min\",\"UMOL/MIN\",\"1\",1,false],[false,\"microvolt\",\"uV\",\"UV\",\"electric potential\",0.001,[2,-2,1,0,0,-1,0],\"μV\",\"si\",true,null,null,1,false,false,0,\"microvolts\",\"LOINC\",\"Elpot\",\"Clinical\",\"unit of electric potential (voltage)\",\"J/C\",\"J/C\",\"1\",1,false]]}}\n","'use strict';\n\nmodule.exports = Number.isFinite || function (value) {\n\treturn !(typeof value !== 'number' || value !== value || value === Infinity || value === -Infinity);\n};\n","// https://github.com/paulmillr/es6-shim\n// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger\nvar isFinite = require(\"is-finite\");\nmodule.exports = Number.isInteger || function(val) {\n  return typeof val === \"number\" &&\n    isFinite(val) &&\n    Math.floor(val) === val;\n};\n","/*\n * This defines the namespace for the UCUM classes and provides\n * a place for the definition of global variables and constants.\n *\n * The javascript for this UCUM implementation uses syntax as\n * defined by the ECMAScript 6 standard\n */\n\nexport var Ucum = {\n\n  /**\n   *  Flag indicating whether or not we're using case sensitive labels\n   *  I don't think we need this.  I think we're just going with\n   *  case sensitive, per Clem.   Gunther's code has this flag, but I\n   *  am removing it, at least for now.  lm, 6/2016\n   */\n  //caseSensitive_: true ,\n\n  /**\n   *  The number of elements in a Dimension array.   Currently this\n   *  is set as a configuration variable, but when we get to the point\n   *  of loading the unit definitions from a file, this value will be\n   *  set from that.\n   */\n  dimLen_: 7,\n\n  /**\n   *  The characters used as valid operators in a UCUM unit expression,\n   *  where '.' is for multiplication and '/' is for division.\n   */\n  validOps_: ['.', '/'],\n\n\n  /**\n   * The string used to separate a unit code and unit name when they\n   * are displayed together\n   */\n  codeSep_ : ': ',\n\n  // Message text variations for validation methods and conversion methods\n  valMsgStart_ : 'Did you mean ',\n  valMsgEnd_ : '?' ,\n  cnvMsgStart_ : 'We assumed you meant ',\n  cnvMsgEnd_ : '.',\n\n\n/**\n   * Default opening string used to emphasize portions of error messages.\n   * Used when NOT displaying messages on a web site, i.e., for output\n   * from the library methods or to a file.\n   */\n  openEmph_ : ' ->',\n\n  /**\n   * Default closing string used to emphasize portions of error messages.\n   * Used when NOT displaying messages on a web site, i.e., for output\n   * from the library methods or to a file.\n   */\n  closeEmph_ : '<- ' ,\n\n  /**\n   * Opening HTML used to emphasize portions of error messages.  Used when\n   * displaying messages on a web site; should be blank when output is\n   * to a file.\n   */\n  openEmphHTML_ : '<span class=\"emphSpan\">',\n\n  /**\n   * Closing HTML used to emphasize portions of error messages.  Used when\n   * displaying messages on a web site; should be blank when output is\n   * to a file.\n   */\n  closeEmphHTML_ : '</span>' ,\n\n  /**\n   * Message that is displayed when annotations are included in a unit\n   * string, to let the user know how they are interpreted.\n   */\n  bracesMsg_ : 'FYI - annotations (text in curly braces {}) are ignored, ' +\n               'except that an annotation without a leading symbol implies ' +\n               'the default unit 1 (the unity).',\n\n  /**\n   * Message that is displayed or returned when a conversion is requested\n   * for two units where (only) a mass<->moles conversion is appropriate\n   * but no molecular weight was specified.\n   */\n  needMoleWeightMsg_ : 'Did you wish to convert between mass and moles?  The ' +\n                       'molecular weight of the substance represented by the ' +\n                       'units is required to perform the conversion.',\n\n  /**\n   * Hash that matches unit column names to names used in the csv file\n   * that is submitted to the data updater.\n   */\n  csvCols_ : {\n    'case-sensitive code' : 'csCode_',\n    'LOINC property' : 'loincProperty_',\n    'name (display)' : 'name_',\n    'synonyms' : 'synonyms_',\n    'source' : 'source_',\n    'category' : 'category_',\n    'Guidance' : 'guidance_'\n  } ,\n\n  /**\n   * Name of the column in the csv file that serves as the key\n   */\n  inputKey_ : 'case-sensitive code' ,\n\n  /**\n   * Special codes that contain operators within brackets.  The operator\n   * within these codes causes them to parse incorrectly if they are preceded\n   * by a prefix, because the parsing algorithm splits them up on the operator.\n   * So we use this object to identify them and substitute placeholders to\n   * avoid that.\n   */\n   specUnits_ : { 'B[10.nV]' : 'specialUnitOne',\n                  '[m/s2/Hz^(1/2)]' : 'specialUnitTwo'}\n} ;\n\n\n","/**\n * This class implements an object containing the vector of exponents for\n * a unit and its operations for addition, subtraction, and multiplication\n * with a scalar.\n *\n * This object should exist for each unit that can be expressed as a\n * vector of numbers.   This excludes arbitrary units, e.g., (10*23), and\n * units that are not numbers but are an expression based solely on numbers,\n * e.g., mol (mole) which is based on 10*23.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n */\nvar UC = require('./config.js');\nvar isInteger = require(\"is-integer\");\nexport class Dimension {\n\n  /**\n   * Constructor.\n   *\n   * @param dimSetting an optional parameter that may be:\n   *  null, which means that the dimVec_ attribute for this object will be null; or\n   *  an array, which must be the length defined by Ucum.dimLen_, and\n   *    whose contents will be copied to this new object's vector; or\n   *  an integer, which must be between 0 and 1 less than the vector length\n   *    defined by Ucum.dimLen_.  This new object's vector will be\n   *    initialized to zero for all elements except the one whose index\n   *    matches the number passed in.  That element will be set to one.\n\n   * @throws an error if the dimSetting parameter does not meet the types\n   *  listed above.\n   *  An error will also be thrown if Ucum.dimLen_ has not been set yet,\n   *  i.e., is still zero.   Currently that won't happen, because the\n   *  value is set in the config.js file.  But further down the road\n   *  the setting will come from a definitions input file, so we check\n   *  here anyway.\n   *\n   */\n  constructor(dimSetting) {\n\n    if (UC.Ucum.dimLen_ === 0) {\n      throw(new Error('Dimension.setDimensionLen must be called before ' +\n      'Dimension constructor'));\n    }\n    if (dimSetting === undefined || dimSetting === null) {\n      this.assignZero() ;\n    }\n    else if (dimSetting instanceof Array) {\n      if (dimSetting.length !== UC.Ucum.dimLen_) {\n        throw(new Error('Parameter error, incorrect length of vector passed to ' +\n            `Dimension constructor, vector = ${JSON.stringify(dimSetting)}`));\n      }\n      this.dimVec_ = [];\n      for (let d = 0; d < UC.Ucum.dimLen_; d++)\n        this.dimVec_.push(dimSetting[d]);\n    }\n\n    // In es6 this should be Number.isInteger(dimSetting).  But Babel\n    // doesn't transpile that correctly, so we need to use the isInteger\n    // module.  :0\n    else if (isInteger(dimSetting)) {\n      if (dimSetting < 0 || dimSetting >= UC.Ucum.dimLen_) {\n        throw(new Error('Parameter error, invalid element number specified for ' +\n        'Dimension constructor'));\n      }\n      this.assignZero() ;\n      this.dimVec_[dimSetting] = 1;\n    }\n  } // end constructor\n\n\n  /**\n   * Sets the element at the specified position to a specified value.  The\n   * default value is 1.  If the dimension vector is null when this is called\n   * a zero-filled vector is created and then the indicated position is set.\n   *\n   * @param indexPos the index of the element to be set\n   * @param value the value to assign to the specified element; optional,\n   *  default value is 1\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n  setElementAt(indexPos, value) {\n\n    if (!isInteger(indexPos) ||\n        indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw(new Error(`Dimension.setElementAt called with an invalid index ` +\n      `position (${indexPos})`));\n    }\n\n    if (!this.dimVec_) {\n      this.assignZero();\n    }\n    if (value === undefined || value === null)\n      value = 1 ;\n\n    this.dimVec_[indexPos] = value;\n  }\n\n\n  /**\n   * Gets the value of the element at the specified position\n   *\n   * @param indexPos the index of the element whose value is to be returned\n   * @return the value of the element at indexPos, or null if the dimension\n   *  vector is null\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n  getElementAt(indexPos) {\n    if (!isInteger(indexPos) ||\n        indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw(new Error(`Dimension.getElementAt called with an invalid index ` +\n      `position (${indexPos})`));\n    }\n    let ret = null;\n    if (this.dimVec_)\n      ret = this.dimVec_[indexPos];\n    return ret;\n  }\n\n\n  /**\n   * This returns the value of the property named by the parameter\n   * passed in.  Although we currently only have one property, dimVec_,\n   * that this will get, it's possible that we'll have additional\n   * properties.   If we don't this could just be replaced by a\n   * getVector function.\n   *\n   * @param propertyName name of the property to be returned, with\n   *        or without the trailing underscore.\n   * @return the requested property, if found for this Dimension\n   * @throws an error if the property is not found for this Dimension\n   */\n  getProperty(propertyName) {\n    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName : propertyName + '_';\n\n    return this[uProp] ;\n\n  } // end getProperty\n\n\n  /**\n   * Return a string that represents the dimension vector.  Returns null if\n   * the dimension vector is null.\n   *\n   * @return the string that represents the dimension vector.  The\n   *         values are enclosed in square brackets, each separated\n   *         by a comma and a space\n   **/\n  toString() {\n    let ret = null ;\n    if (this.dimVec_)\n      ret = '[' + this.dimVec_.join(', ') + ']';\n    return ret ;\n  }\n\n\n  /**\n   * Adds the vector of the dimension object passed in to this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   *\n   * @param dim2 the dimension whose vector is to be added to this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n  add(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.add called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] += dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Subtracts the vector of the dimension object passed in from this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   * @param dim2 the dimension whose vector is to be subtracted from this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n  sub(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.sub called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] -= dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Inverts this dimension object's vector (by multiplying each element\n   * by negative 1).  This object's vector is changed - unless it is null,\n   * in which case it stays that way.\n   *\n   * @return this object\n   **/\n  minus() {\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] = -this.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Multiplies this dimension object's vector with a scalar.  This is used\n   * when a unit is raised to a power.  This object's vector is changed unless\n   * the vector is null, in which case it stays that way.\n   *\n   * @param s the scalar to use\n   * @return this object\n   * @throws an exception if s is not a number\n   */\n  mul(s) {\n    if (!isInteger(s)) {\n      throw(new Error(`Dimension.sub called with an invalid parameter - ` +\n      `${typeof dim2} instead of a number`));\n    }\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] *= s;\n    }\n    return this;\n  }\n\n\n  /**\n   * Tests for equality of this dimension object's vector and that of\n   * the dimension object passed in.  If the dimension vector for one of\n   * the objects is null, the dimension vector for the other object must\n   * also be null for the two to be equal.  (I know - duh.  still)\n   *\n   * @param dim2 the dimension object whose vector is to be compared to this one\n   * @return true if the two vectors are equal; false otherwise.\n   * @throws an exception if dim2 is not a Dimension object\n   */\n  equals(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.equals called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    let isEqual = true ;\n    let dimVec2 = dim2.dimVec_;\n    if (this.dimVec_ && dimVec2) {\n      for (let i = 0; isEqual && i < UC.Ucum.dimLen_; i++)\n        isEqual = (this.dimVec_[i] === dimVec2[i]);\n    }\n    else {\n      isEqual = (this.dimVec_ === null && dimVec2 === null);\n    }\n    return isEqual;\n  }\n\n\n  /**\n   * Assigns the contents of the vector belonging to the dimension object\n   * passed in to this dimension's vector.  If this dimension vector is null\n   * and the other is not, this one will get the contents of the other.  If\n   * this dimension vector is not null but the one passed in is null, this\n   * one will be set to null.\n   *\n   * @param dim2 the dimension object with the vector whose contents are\n   *  to be assigned to this dimension's vector\n   * @return this object (not sure why)\n   * @throws an exception if dim2 is not a Dimension object\n   */\n  assignDim(dim2) {\n\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.assignDim called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (dim2.dimVec_ === null)\n      this.dimVec_ = null;\n    else {\n      if (this.dimVec_ === null) {\n        this.dimVec_ = [] ;\n      }\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] = dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Sets all elements of this dimension object's vector to zero.\n   * If this object's vector is null, it is created as a zero-filled vector.\n   *\n   * @return this object (not sure why)\n   */\n  assignZero() {\n    if (this.dimVec_ === null || this.dimVec_ === undefined)\n      this.dimVec_ = [];\n\n    for (let i = 0; i < UC.Ucum.dimLen_; i++) {\n      this.dimVec_.push(0);\n    }\n    return this;\n  }\n\n\n  /**\n   * Tests for a dimension vector set to all zeroes.\n   *\n   * @return true if exponents (elements) of this dimension's vector are all\n   * zero; false otherwise (including if the current vector is null).\n   *\n   */\n  isZero() {\n    let allZero = this.dimVec_ !== null ;\n    if (this.dimVec_) {\n      for (let i = 0; allZero && i < UC.Ucum.dimLen_; i++)\n        allZero = this.dimVec_[i] === 0;\n    }\n    return allZero;\n  }\n\n\n  /**\n   * Tests for a Dimension object with no dimension vector (dimVec_ is null).\n   *\n   * @return true the dimension vector is null; false if it is not\n   *\n   */\n  isNull() {\n    return (this.dimVec_ === null);\n  }\n\n\n  /**\n   * Creates and returns a clone of this Dimension object\n   *\n   * @return the clone\n   */\n  clone() {\n    let that = new Dimension();\n    that.assignDim(this);\n    return that;\n  }\n\n} // end Dimension class\n","/**\n * This file provides functions to reduce the size of an array of objects of the same structure in JSON.\n */\nconst pushFn = Array.prototype.push;\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * Makes human readable config used to pack/unpack array of objects of the same structure to store with packed data.\n * @param {Object} refObj - reference item of array of objects of the same structure\n * @returns {Array}\n */\nfunction createConfig(refObj) {\n  return Object.keys(refObj).reduce((config, key) => {\n    if (isObject(refObj[key])) {\n      pushFn.apply(config, createConfig(refObj[key]).map(keyTail => [key, ...[].concat(keyTail)]));\n    } else {\n      config.push(key);\n    }\n    return config;\n  }, [])\n}\n\n/**\n * Prepares config created with createConfig function to use in packItem/unpackItem functions.\n * @param {Array} config\n * @returns {Array}\n */\nfunction prepareConfig(config) {\n  return config.map(key => Array.isArray(key) ? key : [key]);\n}\n\n/**\n * Converts an object to an array of values in the order of keys from configuration array.\n * @param {Array} config - configuration array\n * @param {Object} item - input object\n * @returns {Array}\n */\nfunction packItem(config, item) {\n  if (config.join() !== prepareConfig(createConfig(item)).join()) {\n    throw new Error('Object of unusual structure')\n  }\n\n  return config.map(keyArr => {\n    let place = item;\n    keyArr.forEach(key => {\n      place = place[key];\n      if (place === undefined) {\n        throw new Error('Object of unusual structure')\n      }\n    });\n    return place;\n  });\n}\n\n/**\n * Performs the reverse of packItem function.\n * @param {Array} config - configuration array\n * @param {Array} item - input object\n * @returns {Object}\n */\nfunction unpackItem(config, item) {\n  let result = {};\n\n  config.forEach((keyArr, i) => {\n    let place = result;\n    for (let i = 0; i < keyArr.length - 1; i++) {\n      place = place[keyArr[i]] = place[keyArr[i]] || {};\n    }\n    place[keyArr[keyArr.length - 1]] = item[i];\n  });\n\n  return result;\n}\n\n/**\n * Reduces size of an array of objects of the same structure before serialize it to JSON\n * @param {Array} arr\n * @returns {Object}\n */\nexport function packArray(arr) {\n  if (arr && arr.length) {\n    const config = createConfig(arr[0]),\n      _config = prepareConfig(config);\n\n    if (config.length) {\n      return {\n        config: config,\n        data: arr.map(packItem.bind(null, _config))\n      };\n    }\n  }\n\n  return {\n    config: [],\n    data: arr\n  };\n}\n\n/**\n * Restores an array of objects of the same structure after deserializing this object from JSON\n * @param {Object} obj\n * @returns {Array}\n */\nexport function unpackArray(obj) {\n  const config = obj && obj.config;\n\n  if (config) {\n    if (config.length && obj.data) {\n      const _config = prepareConfig(config);\n\n      return obj.data.map(unpackItem.bind(null, _config));\n    } else {\n      return obj.data;\n    }\n  }\n\n  return obj;\n}","/**\n * Prefix objects are defined in this file.\n */\n\n/**\n * This class implements the prefix object.  Prefixes are used as multipliers\n * for units, e.g., km for kilometers\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nvar Ucum = require('./config.js');\n\nexport class Prefix {\n\n  /**\n   * Creates a single prefix object.\n   *\n   * @param attrs a hash of the values to use in creating the prefix object.\n   *  They should be:\n   *   code_ - which is the case-sensitive code used for the prefix,\n   *    e.g., k for kilo\n   *   ciCode_ - which is the case-insensitive code used for the prefix,\n   *    e.g., K for kilo\n   *   name_ - which is the name of the prefix, e.g., kilo\n   *   printSymbol_ - which is the print symbol for the prefix, e.g., k for kilo\n   *   value_ - which is teh value to use in multiplying the magnitude of\n   *    a unit, e.g., for a prefix of c the value will be .01.\n   *   exp_ - which is the exponent used to get the value. For decimal based\n   *    prefixes the base is 10 and the exp_ is applied to 10, e.g., for a\n   *    prefix of c, the exponent will be -2.  For prefixes that are not\n   *    decimal based, this will be null (but must not be undefined).\n   *\n   * @throws an error if the not all required parameters are provided\n   */\n  constructor(attrs) {\n\n    if (attrs['code_'] === undefined || attrs['code_'] === null ||\n        attrs['name_'] === undefined || attrs['name_'] === null ||\n        attrs['value_'] === undefined || attrs['value_'] === null ||\n        attrs['exp_'] === undefined) {\n      throw(new Error('Prefix constructor called missing one or more parameters.  ' +\n      'Prefix codes (cs or ci), name, value and exponent must all be specified ' +\n      'and all but the exponent must not be null.'));\n    }\n\n    /**\n     * The prefix code, e.g., k for kilo.  This should be the case-sensitive\n     * code.  Since there's no way to check to see if it's the case-sensitive\n     * one as opposed to the case-insensitive one (because although\n     * case-insensitive codes all seem to be uppercase, some case-sensitive\n     * codes are also all uppercase), we'll just have to believe that the\n     * right one was passed in.\n     */\n    this.code_ = attrs['code_'];\n\n    /**\n     * The case-insensitive code, e.g., K for kilo\n     */\n    this.ciCode_ = attrs['ciCode_'];\n\n    /**\n     * The prefix name, e.g., kilo\n     */\n    this.name_ = attrs['name_'];\n\n    /**\n     * The printSymbol for the prefix, e.g., k for kilo\n     */\n    this.printSymbol_ = attrs['printSymbol_'];\n\n    /**\n     * The value to use in multiplying the magnitude of a unit\n     */\n    if (typeof attrs['value_'] === 'string')\n      this.value_ = parseFloat(attrs['value_']);\n    else\n      this.value_ = attrs['value_'] ;\n\n    /**\n     * The exponent used to create the value from 10.  For prefixes that are\n     * not based on 10, this will be null.\n     */\n    this.exp_ = attrs['exp_'] ;\n\n  } // end constructor\n\n\n  /**\n   * Returns the value for the current prefix object\n   * @return the value for the prefix object with the specified code\n   * */\n  getValue() {\n    return this.value_;\n  }\n\n\n  /**\n   * Returns the prefix code for the current prefix object\n   * @return the code for the current prefix object\n   */\n  getCode() {\n    return this.code_;\n  }\n\n\n  /**\n   * Returns the case-insensitive code for the current prefix object\n   * @return the case_insensitive code for the current prefix object\n   */\n  getCiCode() {\n    return this.ciCode_;\n  }\n\n\n  /**\n   * Returns the prefix name for the current prefix object\n   * @return the name for the current prefix object\n   */\n  getName() {\n    return this.name_;\n  }\n\n\n  /**\n   * Returns the print symbol for the current prefix object\n   * @return the print symbol for the current prefix object\n   */\n  getPrintSymbol() {\n    return this.printSymbol_;\n  }\n\n\n  /**\n   * Returns the exponent for the current prefix object\n   * @return the exponent for the current prefix object\n   */\n  getExp() {\n    return this.exp_;\n  }\n\n\n  /**\n   * Provides way to tell if one prefix equals another.  The second prefix\n   * must match all attribute values.\n   *\n   * @param prefix2 prefix object to check for a match\n   * @return true for a match; false if one or more attributes don't match\n   */\n  equals(prefix2) {\n    return this.code_ === prefix2.code_ &&\n            this.ciCode_ === prefix2.ciCode_ &&\n            this.name_ === prefix2.name_ &&\n            this.printSymbol_ === prefix2.printSymbol_ &&\n            this.value_ === prefix2.value_ &&\n            this.exp_ === prefix2.exp_ ;\n  }\n} // end Prefix class\n","/**\n * The tables of defined prefixes is defined in this file.\n */\n\n/**\n * This class implements the table of multiplier prefixes.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nexport class PrefixTablesFactory {\n\n  /**\n   * Constructor.  This creates the empty PrefixTable hashes once.\n   * There is one hash whose key is the prefix code and one whose\n   * key is the prefix value.\n   *\n   * Implementation of this as a singleton is based on the UnitTables\n   * implementation.  See that class for details.\n   */\n  constructor(){\n    this.byCode_ = {} ;\n    this.byValue_ = {};\n  }\n\n\n  /**\n   * Provides the number of prefix objects in each table\n   * @returns count of the number of prefix objects in each table\n   */\n  prefixCount() {\n    return Object.keys(this.byCode_).length ;\n  }\n\n\n  /**\n   * This is used to get all prefix objects by value.  Currently it is used\n   * to create a csv file with all prefixes and units.\n   * @returns csv string containing all prefix objects, ordered by value.\n   */\n  allPrefixesByValue() {\n    let prefixBuff = '';\n    let pList = Object.keys(this.byValue_);\n    //pList.sort() ;\n    let pLen = pList.length;\n    for (let p = 0; p < pLen; p++) {\n      let pfx = this.getPrefixByValue(pList[p]) ;\n      prefixBuff += pfx.code_ + ',' + pfx.name_ + ',,' + pfx.value_ + '\\r\\n';\n    }\n    return prefixBuff ;\n  }\n\n  /**\n   * This is used to get all prefix objects.  Currently it is used\n   * to get the objects to write to the json ucum definitions file\n   * that is used to provide prefix and unit definition objects for\n   * conversions and validations.\n   *\n   * @returns an array containing all prefix objects, ordered by code.\n   */\n  allPrefixesByCode() {\n    let prefixList = [];\n    let pList = Object.keys(this.byCode_);\n    pList.sort() ;\n    let pLen = pList.length;\n    for (let p = 0; p < pLen; p++) {\n      prefixList.push(this.getPrefixByCode(pList[p])) ;\n    }\n    return prefixList ;\n  }\n\n  /**\n   * Adds a prefix object to the tables\n   *\n   * @param prefixObj the object to be added to the tables\n   */\n  add(prefixObj){\n    this.byCode_[prefixObj.getCode()] = prefixObj;\n    this.byValue_[prefixObj.getValue()] = prefixObj;\n  }\n\n\n  /**\n   * Tests whether a prefix object is found for a specified code.  This\n   * is used to determine whether or not a prefix object has been created\n   * for the code.\n   *\n   * @param code the code to be used to find the prefix object\n   * @return boolean indicating whether or not a prefix object was found\n   *  for the specified code\n   */\n  isDefined(code) {\n    return this.byCode_[code] !== null && this.byCode_[code] !== undefined ;\n  }\n\n\n  /**\n   * Obtains a prefix object for a specified code.\n   *\n   * @param code the code to be used to find the prefix object\n   * @return the prefix object found, or null if nothing was found\n   */\n  getPrefixByCode(code) {\n    return this.byCode_[code];\n  }\n\n\n  /**\n   * Obtains a prefix object for a specified value.\n   *\n   * @param value the value to be used to find the prefix object\n   * @return the prefix object found, or null if nothing was found\n   */\n  getPrefixByValue(value) {\n    return this.byValue_[value];\n  }\n\n} // end PrefixTablesFactory class\n\n\n// Create a singleton instance and (to preserve the existing API) an object that\n// provides that instance via getInstance().\nvar prefixTablesInstance = new PrefixTablesFactory();\nexport const PrefixTables = {\n  getInstance: function() {\n    return prefixTablesInstance;\n  }\n}\n","/*\n * This class manages the special functions used by some units.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\n\nclass UcumFunctions {\n\n  /**\n   * Constructor\n   *\n   * Creates the singleton object that contains the list of functions used\n   * to convert special units.\n   */\n  constructor() {\n\n    // Create the hash containing the function pairs\n    this.funcs = {};\n\n    // Celsius - convert to Celsius from kelvin and from Celsius to kelvin\n    // where kelvin is the base unit for temperature\n    this.funcs['cel'] = {cnvTo   : function(x){return x - 273.15;},\n                      cnvFrom : function(x){return x + 273.15;}};\n\n    // Fahrenheit - convert to Fahrenheit from kelvin and from Fahrenheit to\n    // kelvin - which is the base unit for temperature\n    this.funcs['degf'] = {cnvTo   : function(x){return x - 459.67;},\n                       cnvFrom : function(x){return x + 459.67;}};\n\n    // Reaumur - convert between Reaumur and Kelvin.   Because of the way the\n    // calling code in the Units class is set up (in the convertFrom method),\n    // what is given here as the convertTo function is actually the convert\n    // from method and vice versa.\n    //this.funcs['degre'] = {cnvTo   : function(x){return x + 273.15;},\n    //                    cnvFrom : function(x){return x - 273.15;}};\n    this.funcs['degre'] = {cnvTo   : function(x){return x - 273.15;},\n                        cnvFrom : function(x){return x + 273.15;}};\n\n    // pH - convert to pH from moles per liter and from moles per liter to pH\n    // where a mole is an amount of a substance (a count of particles)\n    this.funcs['ph'] = {cnvTo  : function(x){return - Math.log(x) / Math.LN10;},\n                     cnvFrom : function(x){return Math.pow(10, -x);}};\n\n    // ln - natural logarithm (base e 2.71828) - apply (cnvTo) and invert (cnvFrom)\n    // and 2ln - two times the natural logarithm\n    this.funcs['ln'] = {cnvTo : function(x){return Math.log(x);},\n                     cnvFrom : function(x){return Math.exp(x);}};\n    this.funcs['2ln'] = {cnvTo : function(x){return 2 * Math.log(x);},\n                      cnvFrom : function(x){return Math.exp(x / 2);}};\n\n    // lg - the decadic logarithm (base 10)\n    this.funcs['lg'] = {cnvTo : function(x){return Math.log(x) / Math.LN10;},\n                     cnvFrom : function(x){return Math.pow(10, x);}};\n    this.funcs['10lg'] = {cnvTo : function(x){return 10 * Math.log(x)/Math.LN10;},\n                       cnvFrom : function(x){return Math.pow(10, x / 10);}};\n    this.funcs['20lg'] = {cnvTo : function(x){return 20 * Math.log(x)/Math.LN10;},\n                       cnvFrom : function(x){return Math.pow(10, x / 20);}};\n    // The plain text ucum units file uses '2lg'\n    this.funcs['2lg'] = {cnvTo : function(x){return 2 * Math.log(x)/Math.LN10;},\n                           cnvFrom : function(x){return Math.pow(10, x / 2);}};\n    // The xml essence ucum file uses lgTimes2\n    this.funcs['lgtimes2'] = this.funcs['2lg'];\n\n    // ld - dual logarithm (base 2)\n    this.funcs['ld'] = {cnvTo : function(x){return Math.log(x)/Math.LN2;},\n                     cnvFrom : function(x){return Math.pow(2, x);}};\n\n    // tan - tangent\n    this.funcs['100tan'] = {cnvTo : function(x){return Math.tan(x) * 100;},\n                         cnvFrom : function(x){return Math.atan(x/100);}};\n    // the xml essence ucum file uses both 100tan and tanTimes100\n    this.funcs['tanTimes100'] = this.funcs['100tan'] ;\n\n    // sqrt - square root\n    this.funcs['sqrt'] = {cnvTo : function(x){return Math.sqrt(x);},\n                       cnvFrom : function(x){return x*x;}};\n\n    // inv - inverse\n    this.funcs['inv'] = {cnvTo : function(x){return 1.0 / x;},\n                      cnvFrom : function(x){return 1.0 / x;}};\n\n    // homeopathic potency functions\n    this.funcs['hpX'] = {cnvTo : function(x){return -(this.funcs['lg'](x));},\n                      cnvFrom : function(x){return Math.pow(10, -x);}};\n\n    this.funcs['hpC'] = {cnvTo : function(x){\n                              return -(this.func['ln'](x))/this.funcs['ln'](100);},\n                       cnvFrom : function(x){return Math.pow(100, -x);}};\n\n    this.funcs['hpM'] = {cnvTo : function(x){\n                              return -(this.funcs['ln'](x))/this.funcs['ln'](1000);},\n                      cnvFrom : function(x){return Math.pow(1000, -x);}};\n\n    this.funcs['hpQ'] = {cnvTo : function(x){\n                              return -(this.funcs['ln'](x))/this.funcs['ln'](50000);},\n                      cnvFrom : function(x){return Math.pow(50000, -x);}};\n\n  } // end of constructor\n\n\n  /**\n   * Returns the function with the name specified\n   *\n   * @param fname name of the function to be returned\n   * @return the function with the specified name\n   * @throws an error message if the function is not found\n   */\n  forName(fname) {\n    fname = fname.toLowerCase();\n\n    let f = this.funcs[fname] ;\n    if (f === null)\n      throw(new Error(`Requested function ${fname} is not defined`));\n    return f;\n  }\n\n\n  /**\n   * Returns a flag indicating whether or not the function has been\n   * defined.\n   *\n   * @param fname name of the function in question\n   * @return true if it has been defined; false if not\n   */\n  isDefined(fname) {\n    fname = fname.toLowerCase();\n    return this.funcs[fname] !== null;\n  }\n\n} // end of UcumFunctions class\n\nexport default new UcumFunctions(); // one singleton instance\n","/**\n * Internal utilities used by multiple UCUM classes.  For example,\n * isNumericString is used by both the UnitString and UcumLhcUtils\n * classes.  If it's in the UnitString class the UcumLhcUtils class\n * needs to require the UnitString class.  But the checkSynonyms\n * class is used by the UnitString class - but was in the UcumLhcUtils\n * class.  Requiring the UcumLhcUtils class from the UnitString class\n * made everything break (cyclical requires).\n *\n * So now they're here.\n */\n\n/**\n * This module implements internal ucum utilities.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\n\nvar UnitTables = require('./unitTables.js').UnitTables ;\n\n\n/**\n * This function tests a string to see if it contains only numbers (digits,\n * a period, leading - or +).  This code was taken from a stackoverflow\n * solution:\n * https://stackoverflow.com/questions/175739/is-there-a-built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number/42356340#42356340\n *\n * @params theString\n * @returns true if the string contains only numbers; false otherwise\n */\nexport function isNumericString(theString) {\n  let num = \"\" + theString; //coerce num to be a string\n  return !isNaN(num) && !isNaN(parseFloat(num));\n} // end isNumericString\n\n\n/**\n *  Checks whether a string qualifies as an integer unit.  Section 2.2.8 (\"integer\n *  numbers\", says, \"A positive integer number may appear in place of a simple\n *  unit symbol.  Only a pure string of decimal digits (‘0’–‘9’) is\n *  interpreted as a number.\"\n *  Note:  This leaves open the question of whether \"0\" is a valid unit, since\n *  it is positive, but you can't measure anything in units of zero.\n * @param str the string to check\n */\nexport function isIntegerUnit(str) {\n  return /^\\d+$/.test(str);\n}\n\n\n/**\n * This method accepts a term and looks for units that include it as\n * a synonym - or that include the term in its name.\n *\n * @param theSyn the term to search for.  This is assumed to be\n *  a string and not undefined.  The calling method should do any\n *  necessary checking before calling this.\n * @returns a hash with up to three elements:\n *  'status' contains the status of the request, which can be 'error',\n *    'failed' or succeeded';\n *  'msg' which contains a message for an error or if no units were found; and\n *  'units' which is an array that contains one array for each unit found:\n *    the unit's csCode_, the unit's name_, and the unit's guidance_\n *\n */\nexport function getSynonyms(theSyn) {\n\n  let retObj = {} ;\n  let utab = UnitTables.getInstance();\n  let resp = {} ;\n  resp = utab.getUnitBySynonym(theSyn);\n\n  // If we didn't get any units, transfer the status and message\n  if (!resp['units']) {\n    retObj['status'] = resp['status'];\n    retObj['msg'] = resp['msg'];\n  }\n  else {\n    retObj['status'] = 'succeeded';\n    let aLen = resp['units'].length ;\n    retObj['units'] = [];\n    for (let a = 0; a < aLen; a++) {\n      let theUnit = resp['units'][a];\n      retObj['units'][a] = {\n        'code': theUnit.csCode_,\n        'name': theUnit.name_,\n        'guidance': theUnit.guidance_};\n    } // end do for all units returned\n  } // end if we got a units list\n  return retObj ;\n\n} // end getSynonyms\n\n","/**\n * This class handles opening, reading and loading the JSON file of ucum\n * definitions (prefixes, base units, and unit atoms).\n *\n * @author Lee Mericle\n *\n */\n\nvar Pfx = require(\"./prefix.js\");\nvar PfxT = require(\"./prefixTables.js\");\nvar Un = require(\"./unit.js\");\nvar Utab = require('./unitTables.js');\nvar unpackArray = require('./jsonArrayPack.js').unpackArray;\n\nexport class UcumJsonDefs {\n\n  /**\n   * This method loads the JSON prefix and unit objects into the prefix and\n   * unit tables.\n   *\n   * @returns nothing\n   */\n  loadJsonDefs() {\n    // requiring the file will take care of opening it for use\n    const jsonDefs = require('../data/ucumDefs.min.json');\n    jsonDefs.prefixes = unpackArray(jsonDefs.prefixes);\n    jsonDefs.units = unpackArray(jsonDefs.units);\n\n    if (Utab.UnitTables.getInstance().unitsCount() === 0) {\n\n      let pTab = PfxT.PrefixTables.getInstance();\n      let prefixes = jsonDefs[\"prefixes\"];\n      let plen = prefixes.length;\n\n      for (let p = 0; p < plen; p++) {\n        let newPref = new Pfx.Prefix(prefixes[p]);\n        pTab.add(newPref);\n      }\n\n      let uTab = Utab.UnitTables.getInstance();\n      let units = jsonDefs[\"units\"];\n      let ulen = units.length;\n\n      for (let u = 0; u < ulen; u++) {\n        let newUnit = new Un.Unit(units[u]);\n        uTab.addUnit(newUnit);\n      }\n    } // end if the data has not already been loaded\n  } // end loadJsonDefs\n\n} // end UcumJsonDefs class\n\nvar ucumJsonDefs = new UcumJsonDefs();\nexport {ucumJsonDefs};\n","/**\n * This class provides a single point of access to the LHC UCUM utilities\n *\n * @author Lee Mericle\n *\n */\nvar Ucum = require('./config.js').Ucum;\nimport {ucumJsonDefs} from './ucumJsonDefs.js';\nvar UnitTables = require('./unitTables.js').UnitTables;\nvar UnitString = require('./unitString.js').UnitString;\n\nimport * as intUtils_ from \"./ucumInternalUtils.js\";\n\n/**\n * UCUM external utilities class\n */\nexport class UcumLhcUtils {\n\n  /**\n   * Constructor.  This loads the json prefix and unit definitions if\n   * they haven't been loaded already and creates itself as a singleton object.\n   *\n   */\n  constructor() {\n\n      if (UnitTables.getInstance().unitsCount() === 0) {\n\n        // Load the prefix and unit objects\n        ucumJsonDefs.loadJsonDefs();\n      }\n\n      // Get the UnitString parser that will be used with this instance\n      // of the LHC Utilities\n      this.uStrParser_ = UnitString.getInstance();\n\n  } // end constructor\n\n\n  /**\n   * This method calls the useHTMLInMessages method on the UnitString\n   * object.  It should be called by web applications that use\n   * these utilities.\n   *\n   * @param use flag indicating whether or not to use the braces message;\n   *  defaults to true\n   */\n  useHTMLInMessages(use) {\n    if (use === undefined)\n      use = true ;\n    this.uStrParser_.useHTMLInMessages(use);\n  }\n\n\n  /**\n   * This method calls the useBraceMsgForEachString method on the UnitString\n   * object.  It should be called by web applications where unit\n   * strings are validated individually (as opposed to validating a whole\n   * file of unit strings).\n   *\n   * @param use flag indicating whether or not to use the braces message;\n   *  defaults to true\n   */\n  useBraceMsgForEachString(use) {\n    if (use === undefined)\n      use = true ;\n    this.uStrParser_.useBraceMsgForEachString(use);\n  }\n\n\n  /**\n   * This method validates a unit string.  It first checks to see if the\n   * string passed in is a unit code that is found in the unit codes table.\n   * If it is not found it parses the string to see if it resolves to a\n   * valid unit string.\n   *\n   * If a valid unit cannot be found, the string is tested for some common\n   * errors, such as missing brackets or a missing multiplication operator.\n   * If found, the error is reported in the messages array that is returned.\n   *\n   * If a valid unit cannot be found and an error cannot be discerned, this\n   * may return, if requested, a list of suggested units in the messages\n   * array that is returned.  Suggestions are based on matching the expression\n   * with unit names and synonyms.\n   *\n   * @param uStr the string to be validated\n   * @param suggest a boolean to indicate whether or not suggestions are\n   *  requested for a string that cannot be resolved to a valid unit;\n   *  true indicates suggestions are wanted; false indicates they are not,\n   *  and is the default if the parameter is not specified;\n   * @param valConv a string indicating if this validation request was initiated\n   *  by a validation task ('validate') or a conversion task ('convert'),\n   *  used only for the demo code, and the default is 'Validator' if the\n   *  parameter is not specified;\n   * @returns an object with five properties:\n   *  'status' will be 'valid' (the uStr is a valid UCUM code), 'invalid'\n   *     (the uStr is not a valid UCUM code, and substitutions or\n   *     suggestions may or may not be returned, depending on what was\n   *     requested and found); or 'error' (an input or programming error\n   *     occurred);\n   *  'ucumCode' the valid ucum code, which may differ from what was passed\n   *    in (e.g., if 'Gauss' is passed in, this will contain 'G') OR null if\n   *    the string was flagged as invalid or an error occurred;\n   *  'msg' is an array of one or more messages, if the string is invalid or\n   *        an error occurred, indicating the problem, or an explanation of a\n   *        substitution such as the substitution of 'G' for 'Gauss', or\n   *        an empty array if no messages were generated;\n   *  'unit' which is null if no unit is found, or a hash for a unit found:\n   *    'code' is the unit's ucum code (G in the above example;\n   *    'name' is the unit's name (Gauss in the above example); and\n   *    'guidance' is the unit's guidance/description data; and\n   *  'suggestions' if suggestions were requested and found, this is an array\n   *     of one or more hash objects.  Each hash contains three elements:\n   *     'msg' which is a message indicating what part of the uStr input\n   *        parameter the suggestions are for;\n   *     'invalidUnit' which is the unit expression the suggestions are\n   *        for; and\n   *     'units' which is an array of data for each suggested unit found.\n   *        Each array will contain the unit code, the unit name and the\n   *        unit guidance (if any).\n   *     If no suggestions were requested and found, this property is not\n   *     returned.\n   */\n  validateUnitString(uStr, suggest, valConv) {\n\n    if (suggest === undefined)\n      suggest = false ;\n\n    if (valConv === undefined)\n      valConv = 'validate' ;\n\n    let resp = this.getSpecifiedUnit(uStr, valConv, suggest);\n    let theUnit = resp['unit'];\n    let retObj = {};\n    if (!theUnit) {\n      retObj = {'status': (!resp['origString'] || resp['origString'] === null) ?\n                           'error' : 'invalid',\n                'ucumCode': null};\n    }\n    else {\n      retObj = {'status': resp['origString'] === uStr ? 'valid': 'invalid',\n                'ucumCode': resp['origString'],\n                'unit': {'code': theUnit.csCode_,\n                         'name': theUnit.name_,\n                         'guidance': theUnit.guidance_ }};\n    }\n    if (resp['suggestions']) {\n      retObj['suggestions'] = resp['suggestions'];\n    }\n    retObj['msg'] = resp['retMsg'];\n    return retObj;\n\n  } // end validateUnitString\n\n\n  /**\n   * This method converts one unit to another\n   *\n   * @param fromUnitCode the unit code/expression/string of the unit to be converted\n   * @param fromVal the number of \"from\" units to be converted to \"to\" units\n   * @param toUnitCode the unit code/expression/string of the unit that the from\n   *  field is to be converted to\n   * @param suggest a boolean to indicate whether or not suggestions are\n   *  requested for a string that cannot be resolved to a valid unit;\n   *  true indicates suggestions are wanted; false indicates they are not,\n   *  and is the default if the parameter is not specified;\n   * @param molecularWeight the molecular weight of the substance in question\n   *  when a conversion is being requested from mass to moles and vice versa.\n   *  This is required when one of the units represents a value in moles.  It is\n   *  ignored if neither unit includes a measurement in moles.\n   * @returns a hash with six elements:\n   *  'status' that will be: 'succeeded' if the conversion was successfully\n   *     calculated; 'failed' if the conversion could not be made, e.g., if\n   *     the units are not commensurable; or 'error' if an error occurred;\n   *  'toVal' the numeric value indicating the conversion amount, or null\n   *     if the conversion failed (e.g., if the units are not commensurable);\n   *  'msg' is an array message, if the string is invalid or an error occurred,\n   *        indicating the problem, or an explanation of a substitution such as\n   *        the substitution of 'G' for 'Gauss', or an empty array if no\n   *        messages were generated;\n   *  'suggestions' if suggestions were requested and found, this is a hash\n   *     that contains at most two elements:\n   *     'from' which, if the fromUnitCode input parameter or one or more of\n   *       its components could not be found, is an array one or more hash\n   *       objects.  Each hash contains three elements:\n   *         'msg' which is a message indicating what unit expression the\n   *            suggestions are for;\n   *         'invalidUnit' which is the unit expression the suggestions\n   *            are for; and\n   *         'units' which is an array of data for each suggested unit found.\n   *            Each array will contain the unit code, the unit name and the\n   *            unit guidance (if any).\n   *       If no suggestions were found for the fromUnitCode this element\n   *       will not be included.\n   *     'to' which, if the \"to\" unit expression or one or more of its\n   *       components could not be found, is an array one or more hash objects.  Each hash\n   *       contains three elements:\n   *         'msg' which is a message indicating what toUnitCode input\n   *            parameter the suggestions are for;\n   *         'invalidUnit' which is the unit expression the suggestions\n   *            are for; and\n   *         'units' which is an array of data for each suggested unit found.\n   *            Each array will contain the unit code, the unit name and the\n   *            unit guidance (if any).\n   *       If no suggestions were found for the toUnitCode this element\n   *       will not be included.\n   *    No 'suggestions' element will be included in the returned hash\n   *    object if none were found, whether or not they were requested.\n   *  'fromUnit' the unit object for the fromUnitCode passed in; returned\n   *     in case it's needed for additional data from the object; and\n   *  'toUnit' the unit object for the toUnitCode passed in; returned\n   *     in case it's needed for additional data from the object.\n   */\n  convertUnitTo(fromUnitCode, fromVal, toUnitCode, suggest, molecularWeight) {\n    if (suggest === undefined)\n      suggest = false ;\n\n    if (molecularWeight === undefined)\n      molecularWeight = null ;\n\n    let returnObj = {'status' : 'failed',\n                     'toVal' : null,\n                     'msg' : []} ;\n\n    if (fromUnitCode) {\n      fromUnitCode = fromUnitCode.trim();\n    }\n    if (!fromUnitCode || fromUnitCode == '') {\n      returnObj['status'] = 'error';\n      returnObj['msg'].push('No \"from\" unit expression specified.');\n    }\n    if (fromVal === null || isNaN(fromVal) || (typeof fromVal !== 'number' &&\n        !intUtils_.isNumericString(fromVal))) {\n      returnObj['status'] = 'error';\n      returnObj['msg'].push('No \"from\" value, or an invalid \"from\" value, ' +\n                         'was specified.');\n    }\n    if (toUnitCode) {\n      toUnitCode = toUnitCode.trim();\n    }\n    if (!toUnitCode || toUnitCode == '') {\n      returnObj['status'] = 'error';\n      returnObj['msg'].push('No \"to\" unit expression specified.');\n    }\n    if (returnObj['status'] !== 'error') {\n      try {\n        let fromUnit = null;\n\n        let parseResp = this.getSpecifiedUnit(fromUnitCode, 'convert', suggest);\n        fromUnit = parseResp['unit'];\n        if (parseResp['retMsg'])\n          returnObj['msg'] = returnObj['msg'].concat(parseResp['retMsg']);\n        if (parseResp['suggestions']) {\n          returnObj['suggestions'] = {};\n          returnObj['suggestions']['from'] = parseResp['suggestions'];\n        }\n        if (!fromUnit) {\n          returnObj['msg'].push(`Unable to find a unit for ${fromUnitCode}, ` +\n            `so no conversion could be performed.`);\n        }\n\n        let toUnit = null;\n        parseResp = this.getSpecifiedUnit(toUnitCode, 'convert', suggest);\n        toUnit = parseResp['unit'];\n        if (parseResp['retMsg'])\n          returnObj['msg'] = returnObj['msg'].concat(parseResp['retMsg']);\n        if (parseResp['suggestions']) {\n          if (!returnObj['suggestions'])\n            returnObj['suggestions'] = {} ;\n          returnObj['suggestions']['to'] = parseResp['suggestions'];\n        }\n        if (!toUnit) {\n          returnObj['msg'].push(`Unable to find a unit for ${toUnitCode}, ` +\n                                `so no conversion could be performed.`);\n        }\n\n        if (fromUnit && toUnit) {\n          try {\n            // if no molecular weight was specified perform a normal conversion\n            if (!molecularWeight) {\n              returnObj['toVal'] = toUnit.convertFrom(fromVal, fromUnit);\n            }\n            else {\n              if (fromUnit.moleExp_ !== 0 && toUnit.moleExp_ !== 0) {\n                throw(new Error('A molecular weight was specified ' +\n                  'but a mass <-> mole conversion cannot be executed for two ' +\n                  'mole-based units.  No conversion was attempted.'));\n              }\n              if (fromUnit.moleExp_ === 0 && toUnit.moleExp_ === 0) {\n                throw(new Error('A molecular weight was specified ' +\n                  'but a mass <-> mole conversion cannot be executed when ' +\n                  'neither unit is mole-based.  No conversion was attempted.'));\n              }\n              if (!fromUnit.isMoleMassCommensurable(toUnit)) {\n                throw(new Error(`Sorry.  ${fromUnitCode} cannot be ` +\n                  `converted to ${toUnitCode}.`));\n              }\n\n              // if the \"from\" unit is a mole-based unit, assume a mole to mass\n              // request\n              if (fromUnit.moleExp_ !== 0) {\n                returnObj['toVal'] =\n                  fromUnit.convertMolToMass(fromVal, toUnit, molecularWeight);\n              }\n              // else the \"to\" unit must be the mole-based unit, so assume a\n              // mass to mole request\n              else {\n                returnObj['toVal'] =\n                  fromUnit.convertMassToMol(fromVal, toUnit, molecularWeight);\n              }\n            } // end if a molecular weight was specified\n\n            // if an error hasn't been thrown - either from convertFrom or here,\n            // set the return object to show success\n            returnObj['status'] = 'succeeded';\n            returnObj['fromUnit'] = fromUnit;\n            returnObj['toUnit'] = toUnit;\n          }\n          catch (err) {\n            returnObj['status'] = 'failed';\n            returnObj['msg'].push(err.message);\n          }\n\n\n        }  // end if we have the from and to units\n      }\n      catch (err) {\n        if (err.message == Ucum.needMoleWeightMsg_)\n          returnObj['status'] = 'failed';\n        else\n          returnObj['status'] = 'error';\n        returnObj['msg'].push(err.message);\n      }\n    }\n\n    return returnObj ;\n\n  } // end convertUnitTo\n\n\n  /**\n   * This method accepts a term and looks for units that include it as\n   * a synonym - or that include the term in its name.\n   *\n   * @param theSyn the term to search for\n   * @returns a hash with up to three elements:\n   *  'status' contains the status of the request, which can be 'error',\n   *    'failed' or succeeded';\n   *  'msg' which contains a message for an error or if no units were found; and\n   *  'units' which is an array that contains one hash for each unit found:\n   *    'code' is the unit's csCode_\n   *    'name' is the unit's name_\n   *    'guidance' is the unit's guidance_\n   *\n   */\n  checkSynonyms(theSyn) {\n    let retObj = {} ;\n    if (theSyn === undefined || theSyn === null) {\n      retObj['status'] = 'error';\n      retObj['msg'] = 'No term specified for synonym search.'\n    }\n    else {\n      retObj = intUtils_.getSynonyms(theSyn);\n    } // end if a search synonym was supplied\n\n    return retObj ;\n\n  } // end checkSynonyms\n\n\n  /**\n   * This method parses a unit string to get (or try to get) the unit\n   * represented by the string.  It returns an error message if no string was specified\n   * or if any errors were encountered trying to get the unit.\n   *\n   * @param uName the expression/string representing the unit\n   * @param valConv indicates what type of request this is for - a request to\n   *  validate (pass in 'validate') or a request to convert (pass in 'convert')\n   * @param suggest a boolean to indicate whether or not suggestions are\n   *  requested for a string that cannot be resolved to a valid unit;\n   *  true indicates suggestions are wanted; false indicates they are not,\n   *  and is the default if the parameter is not specified;\n   * @returns a hash containing:\n   *   'unit' the unit object (or null if there were problems creating the\n   *     unit);\n   *   'origString' the possibly updated unit string passed in;\n   *   'retMsg' an array of user messages (informational, error or warning) if\n   *     any were generated (IF any were generated, otherwise will be an\n   *     empty array); and\n   *  'suggestions' is an array of 1 or more hash objects.  Each hash\n   *     contains three elements:\n   *       'msg' which is a message indicating what unit expression the\n   *          suggestions are for;\n   *       'invalidUnit' which is the unit expression the suggestions are\n   *          for; and\n   *       'units' which is an array of data for each suggested unit found.\n   *          Each array will contain the unit code, the unit name and the\n   *          unit guidance (if any).\n   *   The return hash will not contain a suggestions array if a valid unit\n   *   was found or if suggestions were not requested and found.\n   */\n  getSpecifiedUnit(uName, valConv, suggest) {\n\n    if (suggest === undefined)\n      suggest = false ;\n\n    let retObj = {};\n    retObj['retMsg'] = [];\n\n    if (!uName) {\n      retObj['retMsg'].push('No unit string specified.');\n    }\n    else {\n      let utab = UnitTables.getInstance();\n      uName = uName.trim();\n\n      // go ahead and just try using the name as the code.  This may or may not\n      // work, but if it does, it cuts out a lot of parsing.\n      let theUnit = utab.getUnitByCode(uName);\n\n      // If we found it, set the returned unit string to what was passed in;\n      // otherwise try parsing as a unit string\n      if (theUnit) {\n        retObj['unit'] = theUnit ;\n        retObj['origString'] = uName;\n      }\n      else {\n        try {\n          let resp = this.uStrParser_.parseString(uName, valConv, suggest);\n          retObj['unit'] = resp[0];\n          retObj['origString'] = resp[1];\n          if (resp[2])\n            retObj['retMsg'] = resp[2];\n          retObj['suggestions'] = resp[3];\n        }\n        catch (err) {\n          console.log(`Unit requested for unit string ${uName}.` +\n            'request unsuccessful; error thrown = ' + err.message);\n            retObj['retMsg'].unshift(`${uName} is not a valid unit.  ` +\n                                     `${err.message}`);\n        }\n      } // end if the unit was not found as a unit name\n    } // end if a unit expression was specified\n\n    return retObj;\n\n  } // end getSpecifiedUnit\n\n\n  /**\n   * This method retrieves a list of units commensurable, i.e., that can be\n   * converted from and to, a specified unit.  Returns an error if the \"from\"\n   * unit cannot be found.\n   *\n   * @param fromName the name/unit string of the \"from\" unit\n   * @returns an array containing two elements;\n   *   first element is the list of commensurable units if any were found\n   *   second element is an error message if the \"from\" unit is not found\n   */\n  commensurablesList(fromName) {\n\n    let retMsg = [];\n    let commUnits = null ;\n    let parseResp = this.getSpecifiedUnit(fromName, 'validate', false);\n    let fromUnit = parseResp['unit'];\n    if (parseResp['retMsg'].length > 0)\n      retMsg = parseResp['retMsg'] ;\n    if (!fromUnit) {\n      retMsg.push(`Could not find unit ${fromName}.`);\n    }\n    else {\n      let dimVec = null ;\n      let fromDim = fromUnit.getProperty('dim_');\n      if (!fromDim) {\n        retMsg.push('No commensurable units were found for ' + fromName) ;\n      }\n      else {\n        try {\n          dimVec = fromDim.getProperty('dimVec_');\n        }\n        catch (err) {\n          retMsg.push(err.message);\n          if (err.message ===\n            \"Dimension does not have requested property(dimVec_)\")\n            dimVec = null;\n        }\n        if (dimVec) {\n          let utab = UnitTables.getInstance();\n          commUnits = utab.getUnitsByDimension(dimVec);\n        }\n      } // end if the from unit has a dimension vector\n    } // end if we found a \"from\" unit\n    return [commUnits , retMsg];\n  } // end commensurablesList\n\n} // end UcumLhcUtils class\n\n\n/**\n *  This function exists ONLY until the original UcumLhcUtils constructor\n *  is called for the first time.  It's defined here in case getInstance\n *  is called before the constructor.   This calls the constructor.\n *\n *  The constructor redefines the getInstance function to return the\n *  singleton UcumLhcUtils object.  This is based on the UnitTables singleton\n *  implementation; see more detail in the UnitTables constructor description.\n *\n *  NO LONGER TRUE - not implemented as a singleton.  This method retained to\n *  avoid problems with calls to it that exist throughout the code.\n *\n *  @return the (formerly singleton) UcumLhcUtils object.\n */\nUcumLhcUtils.getInstance = function(){\n  return new UcumLhcUtils();\n} ;\n\n\n\n\n","/**\n * This exports definitions for ucum classes that need references to them\n * available to the demo code.  The actual code will be in the ucumPkg\n * library found in the dist directory.  This file provides the hooks to\n * those classes within the library.\n */\n\nexport var Ucum = require(\"./config.js\").Ucum;\nexport var UcumLhcUtils = require(\"./ucumLhcUtils.js\").UcumLhcUtils;\nexport var UnitTables = require(\"./unitTables.js\").UnitTables;","\n/**\n * This class represents one unit of measure.  It includes\n * functions to cover constructor, accessor, and assignment tasks as\n * well as operators to calculate multiplication, division and raising\n * to a power.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nvar Ucum = require('./config.js').Ucum;\nvar Dimension = require('./dimension.js').Dimension;\nimport funcs from \"./ucumFunctions.js\";\nvar UnitTables;\n\nvar isInteger = require(\"is-integer\");\nimport * as intUtils_ from \"./ucumInternalUtils.js\";\n\nexport class Unit {\n\n  /**\n   * Constructor.\n   *\n   * @param attrs an optional parameter that may be:\n   *  a string, which is parsed by the unit parser, which creates\n   *  the unit from the parsed string; or\n   *  a hash containing all or some values for the attributes of\n   *  the unit, where the keys are the attribute names, without a\n   *  trailing underscore, e.g., name instead of name_; or\n   *  null, in which case an empty hash is created and used to\n   *  set the values forthe attributes.\n   *  If a hash (empty or not) is used, attributes for which no value\n   *  is specified are assigned a default value.\n   *\n   */\n  constructor(attrs = {}) {\n\n    // Process the attrs hash passed in, which may be empty.\n    // Create and assign values (from the attrs hash or defaults) to all\n    // attributes.  From Class Declarations in Understanding ECMAScript,\n    // https://leanpub.com/understandinges6/read/#leanpub-auto-class-declarations,\n    //   \"Own properties, properties that occur on the instance rather than the\n    //    prototype, can only be created inside of a class constructor or method.\n    //    It's recommended to create all possible own properties inside of the\n    //    constructor function so there's a single place that's responsible for\n    //    all of them.\"\n\n    /*\n     * Flag indicating whether or not this is a base unit\n     */\n    this.isBase_ = attrs['isBase_'] || false ;\n\n    /*\n     * The unit name, e.g., meter\n     */\n    this.name_ = attrs['name_'] || '';\n\n    /*\n     * The unit's case-sensitive code, e.g., m\n     */\n    this.csCode_ = attrs['csCode_'] || '';\n\n    /*\n     * The unit's case-insensitive code, e.g., M\n     */\n    this.ciCode_ = attrs['ciCode_'] || '';\n\n    /*\n     * The unit's property, e.g., length\n     */\n    this.property_ = attrs['property_'] || '';\n\n    /*\n     * The magnitude of the unit, e.g., 3600/3937 for a yard,\n     * where a yard - 3600/3973 * m(eter).  The Dimension\n     * property specifies the meter - which is the unit on which\n     * a yard is based, and this magnitude specifies how to figure\n     * this unit based on the base unit.\n     */\n    this.magnitude_ = attrs['magnitude_'] || 1;\n\n    /*\n     * The Dimension object of the unit\n     */\n    if (attrs['dim_'] === undefined || attrs['dim_'] === null) {\n      this.dim_ = new Dimension();\n    }\n    // When the unit data stored in json format is reloaded, the dimension data\n    // is recognized as a a hash, not as a Dimension object.\n    else if (attrs['dim_']['dimVec_'] !== undefined) {\n      this.dim_ = new Dimension(attrs['dim_']['dimVec_']) ;\n    }\n    else if (attrs['dim_'] instanceof Dimension) {\n      this.dim_ = attrs['dim_'];\n    }\n    else if (attrs['dim_'] instanceof Array || isInteger(attrs['dim_'])) {\n      this.dim_ = new Dimension(attrs['dim_']) ;\n    }\n    else {\n      this.dim_ = new Dimension();\n    }\n    /*\n     * The print symbol of the unit, e.g., m\n     */\n    this.printSymbol_ = attrs['printSymbol_'] || null;\n\n    /*\n     * The class of the unit, where given, e.g., dimless\n     */\n    this.class_ = attrs['class_'] || null;\n\n    /*\n     * A flag indicating whether or not the unit is metric\n     */\n    this.isMetric_ = attrs['isMetric_'] || false;\n\n    /*\n     * The \"variable\" - which I think is used only for base units\n     * The symbol for the variable as used in equations, e.g., s for distance\n     */\n    this.variable_ = attrs['variable_'] || null ;  // comes from 'dim' in XML\n\n    /*\n     * The conversion function\n     */\n    this.cnv_ = attrs['cnv_'] || null;\n\n    /*\n     * The conversion prefix\n     */\n    this.cnvPfx_ = attrs['cnvPfx_'] || 1;\n\n    /*\n     * Flag indicating whether or not this is a \"special\" unit, i.e., is\n     * constructed using a function specific to the measurement, e.g.,\n     * fahrenheit and celsius\n     */\n    this.isSpecial_ = attrs['isSpecial_'] || false ;\n\n    /*\n     * Flag indicating whether or not this is an arbitrary unit\n     */\n    this.isArbitrary_ = attrs['isArbitrary_'] || false;\n\n    /*\n     * Integer indicating what level of exponent applies to a mole-based portion\n     * of the unit.  So, for the unit \"mol\", this will be 1.  For \"mol2\" this\n     * will be 2.  For \"1/mol\" this will be -1.  Any unit that does not include\n     * a mole will have a 0 in this field.  This is used to determine\n     * commensurability for mole<->mass conversions.\n     */\n    this.moleExp_ = attrs['moleExp_'] || 0;\n\n    /*\n     * Added when added LOINC list of units\n     * synonyms are used by the autocompleter to enhance lookup capabilities\n     * while source says where the unit first shows up.  Current sources are\n     * UCUM - which are units from the unitsofmeasure.org list and LOINC -\n     * which are units from the LOINC data.\n     */\n    this.synonyms_ = attrs['synonyms_'] || null ;\n    this.source_ = attrs['source_'] || null ;\n    this.loincProperty_ = attrs['loincProperty_'] || null;\n    this.category_ = attrs['category_'] || null;\n    this.guidance_ = attrs['guidance_'] || null;\n\n    /*\n     * Used to compute dimension; storing for now until I complete\n     * unit definition parsing\n     */\n    /*\n     * Case sensitive (cs) and case insensitive (ci) base unit strings,\n     * includes exponent and prefix if applicable - specified in\n     * <value Unit=x UNIT=X value=\"nnn\">nnn</value> -- the unit part --\n     * in the ucum-essence.xml file, and may be specified by a user\n     * when requesting conversion or validation of a unit string.  The\n     * magnitude (base factor) is used with this to determine the new unit.\n     * For example, a Newton (unit code N) is created from the string\n     * kg.m/s2, and the value of 1 (base factor defined below). An hour\n     * (unit code h) is created from the unit min (minute) with a value\n     * of 60.\n     */\n    this.csUnitString_ = attrs['csUnitString_'] || null ;\n    this.ciUnitString_ = attrs['ciUnitString_'] || null ;\n\n    /*\n     * String and numeric versions of factor applied to unit specified in\n     * <value Unit=x UNIT=X value=\"nnn\">nnn</value> -- the value part\n     */\n    this.baseFactorStr_ = attrs['baseFactorStr_'] || null;\n    this.baseFactor_ = attrs['baseFactor_'] || null;\n\n    /*\n     * Flag used to indicate units where the definition process failed\n     * when parsing units from the official units definitions file\n     * (currently using the ucum-essence.xml file).  We keep these\n     * so that we can use them to at least validate them as valid\n     * units, but we don't try to convert them.   This is temporary\n     * and only to account for instances where the code does not\n     * take into account various special cases in the xml file.\n     *\n     * This is NOT used when trying to validate a unit string\n     * submitted during a conversion or validation attempt.\n     */\n    this.defError_ = attrs['defError_'] || false ;\n\n\n  } // end constructor\n\n\n  /**\n   * Assign the unity (= dimensionless unit 1) to this unit.\n   *\n   * @return this unit\n   */\n  assignUnity() {\n    this.name_  = \"\" ;\n    this.magnitude_ = 1 ;\n    if (!this.dim_)\n      this.dim_ = new Dimension();\n    this.dim_.assignZero() ;\n    this.cnv_ = null ;\n    this.cnvPfx_ = 1 ;\n    return this;\n\n  } // end assignUnity\n\n\n  /**\n   * This assigns one or more values, as provided in the hash passed in,\n   * to this unit.\n   *\n   * @param vals hash of values to be assigned to the attributes\n   *        specified by the key(s), which should be the attribute\n   *        name without the trailing underscore, e.g., name instead\n   *        of name_.\n   * @return nothing\n   */\n  assignVals(vals) {\n    for (let key in vals) {\n      let uKey = !(key.charAt(key.length - 1)) === '_' ? key + '_' : key ;\n      if (this.hasOwnProperty(uKey))\n        this[uKey] = vals[key];\n      else\n        throw(new Error(`Parameter error; ${key} is not a property of a Unit`));\n    }\n  } // end assignVals\n\n\n  /**\n   * This creates a clone of this unit.\n   *\n   * @return the clone\n   */\n  clone() {\n    let retUnit = new Unit() ;\n    Object.getOwnPropertyNames(this).forEach(val => {\n      if (val === 'dim_') {\n        if (this['dim_'])\n          retUnit['dim_'] = this['dim_'].clone();\n        else\n          retUnit['dim_'] = null;\n      }\n      else\n        retUnit[val] = this[val];\n    });\n    return retUnit ;\n\n  } // end clone\n\n\n  /**\n   * This assigns all properties of a unit passed to it to this unit.\n   *\n   * @param unit2 the unit whose properties are to be assigned to this one.\n   * @return nothing; this unit is updated\n   */\n  assign(unit2) {\n    Object.getOwnPropertyNames(unit2).forEach(val => {\n      if (val === 'dim_') {\n        if (unit2['dim_'])\n          this['dim_'] = unit2['dim_'].clone();\n        else\n          this['dim_'] = null;\n      }\n      else {\n        this[val] = unit2[val];\n      }\n    });\n  } // end assign\n\n\n  /**\n   * This determines whether or not object properties of the unit\n   * passed in are equal to the corresponding properties in this unit.\n   * The following properties are the only ones checked:\n   *   magnitude_, dim_, cnv_ and cnvPfx_\n   *\n   * @param unit2 the unit whose properties are to be checked.\n   * @return boolean indicating whether or not they match\n   */\n  equals(unit2) {\n\n    return (this.magnitude_ === unit2.magnitude_ &&\n            this.cnv_ === unit2.cnv_ &&\n            this.cnvPfx_ === unit2.cnvPfx_ &&\n            ((this.dim_ === null && unit2.dim_ === null) ||\n             this.dim_.equals(unit2.dim_)));\n\n  } // end equals\n\n\n  /**\n   * This method compares every attribute of two objects to determine\n   * if they all match.\n   *\n   * @param unit2 the unit that is to be compared to this unit\n   * @return boolean indicating whether or not every attribute matches\n   */\n  fullEquals(unit2) {\n\n    let thisAttr = Object.keys(this).sort();\n    let u2Attr = Object.keys(unit2).sort();\n\n    let keyLen = thisAttr.length ;\n    let match = (keyLen === u2Attr.length);\n\n    // check each attribute.   Dimension objects have to checked using\n    // the equals function of the Dimension class.\n    for (let k = 0; k < keyLen && match; k++) {\n      if (thisAttr[k] === u2Attr[k]) {\n        if (thisAttr[k] === 'dim_')\n          match = this.dim_.equals(unit2.dim_);\n        else\n          match = this[thisAttr[k]] === unit2[thisAttr[k]];\n      }\n      else\n        match = false ;\n    } // end do for each key and attribute\n    return match ;\n  }// end of fullEquals\n\n  /**\n   * This returns the value of the property named by the parameter\n   * passed in.\n   *\n   * @param propertyName name of the property to be returned, with\n   *        or without the trailing underscore.\n   * @return the requested property, if found for this unit\n   * @throws an error if the property is not found for this unit\n   */\n  getProperty(propertyName) {\n    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName :\n                                             propertyName + '_' ;\n    return this[uProp] ;\n\n  } // end getProperty\n\n\n  /**\n   * Takes a measurement consisting of a number of units and a unit and returns\n   * the equivalent number of this unit.  So, 15 mL would translate\n   * to 1 tablespoon if this object is a tablespoon.\n   *\n   * Note that the number returned may not be what is normally expected.\n   * For example, converting 10 Celsius units to Fahrenheit would \"normally\"\n   * return a value of 50.   But in this case you'll get back something like\n   * 49.99999999999994.\n   *\n   * If either unit is an arbitrary unit an exception is raised.\n   *\n   * @param num the magnitude for the unit to be translated (e.g. 15 for 15 mL)\n   * @param fromUnit the unit to be translated to one of this type (e.g. a mL unit)\n   *\n   * @return the number of converted units (e.g. 1 for 1 tablespoon)\n   * @throws an error if the dimension of the fromUnit differs from this unit's\n   * dimension\n   */\n  convertFrom(num, fromUnit) {\n    let newNum = 0.0 ;\n\n    if (this.isArbitrary_)\n      throw (new Error(`Attempt to convert arbitrary unit ${this.name_}`));\n    if (fromUnit.isArbitrary_)\n      throw (new Error(`Attempt to convert to arbitrary unit ${fromUnit.name_}`));\n\n    // reject request if both units have dimensions that are not equal\n    if (fromUnit.dim_ && this.dim_ && !(fromUnit.dim_.equals(this.dim_))) {\n      // check first to see if a mole<->mass conversion is appropriate\n      if (this.isMoleMassCommensurable(fromUnit)) {\n        throw(new Error(Ucum.needMoleWeightMsg_));\n      }\n      else {\n        throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n          `to ${this.csCode_}.`));\n      }\n    }\n    // reject request if there is a \"from\" dimension but no \"to\" dimension\n    if (fromUnit.dim_ && (!this.dim_ || this.dim_.isNull())) {\n      throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n        `to ${this.csCode_}.`));\n    }\n\n    // reject request if there is a \"to\" dimension but no \"from\" dimension\n    if (this.dim_ && (!fromUnit.dim_ || fromUnit.dim_.isNull())) {\n      throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n        `to ${this.csCode_}.`));\n    }\n\n    let fromCnv = fromUnit.cnv_ ;\n    let fromMag = fromUnit.magnitude_ ;\n\n    // If the same conversion function is specified for both units, which\n    // includes neither unit having a conversion function, multiply the\n    // \"from\" unit's magnitude by the number passed in and then divide\n    // that result by this unit's magnitude.  Do this for units with\n    // and without dimension vectors.  PROBLEM with 2 non-commensurable\n    // units with no dimension vector or function, e.g., byte to mol\n    if (fromCnv === this.cnv_) {\n      newNum = (num * fromMag) / this.magnitude_;\n    }\n    // else use a function to get the number to be returned\n    else {\n      let x = 0.0 ;\n      if (fromCnv != null) {\n        // turn num * fromUnit.magnitude into its ratio scale equivalent,\n        // e.g., convert Celsius to Kelvin\n        let fromFunc = funcs.forName(fromCnv);\n        x = fromFunc.cnvFrom(num * fromUnit.cnvPfx_) * fromMag;\n        //x = fromFunc.cnvFrom(num * fromMag) * fromUnit.cnvPfx_;\n      }\n      else {\n        x = num * fromMag;\n      }\n\n      if (this.cnv_ != null) {\n        // turn mag * origUnit on ratio scale into a non-ratio unit,\n        // e.g. convert Kelvin to Fahrenheit\n        let toFunc = funcs.forName(this.cnv_);\n        newNum = toFunc.cnvTo(x / this.magnitude_) / this.cnvPfx_;\n      }\n      else {\n        newNum = x / this.magnitude_;\n      }\n    } // end if either unit has a conversion function\n\n    return newNum;\n\n  } // end convertFrom\n\n\n  /**\n   * Takes a number and a target unit and returns the number for a measurement\n   * of this unit that corresponds to the number of the target unit passed in.\n   * So, 1 tablespoon (where this unit represents a tablespoon) would translate\n   * to 15 mL.\n   *\n   * See the note on convertFrom about return values.\n   *\n   * @param mag the magnitude for this unit (e.g. 1 for 1 tablespoon)\n   * @param toUnit the unit to which this unit is to be translated\n   *  (e.g. an mL unit)\n   *\n   * @return the converted number value (e.g. 15 mL)\n   * @throws an error if the dimension of the toUnit differs from this unit's\n   *   dimension\n   */\n  convertTo(num, toUnit) {\n\n    return toUnit.convertFrom(num, this) ;\n\n  } // end convertTo\n\n\n  /**\n   * Takes a given number of this unit returns the number of this unit\n   * if it is converted into a coherent unit.  Does not change this unit.\n   *\n   * If this is a coherent unit already, just gives back the number\n   * passed in.\n   *\n   * @param num the number for the coherent version of this unit\n   * @return the number for the coherent version of this unit\n   */\n  convertCoherent(num) {\n\n    // convert mag' * u' into canonical number * u on ratio scale\n    if(this.cnv_ !== null)\n      num = this.cnv_.f_from(num / this.cnvPfx_) * this.magnitude_;\n\n    return num;\n\n  } // end convertCoherent\n\n\n  /**\n   * Mutates this unit into a coherent unit and converts a given number of\n   * units to the appropriate value for this unit as a coherent unit\n   *\n   * @param num the number for this unit before conversion\n   * @return the number of this unit after conversion\n   * @throws an error if the dimensions differ\n   */\n  mutateCoherent(num) {\n\n    // convert mu' * u' into canonical mu * u on ratio scale\n    num = this.convertCoherent(num) ;\n\n    // mutate to coherent unit\n    this.magnitude_ = 1;\n    this.cnv_ = null;\n    this.cnvPfx_ = 1;\n    this.name_ = \"\";\n\n    // build a name as a term of coherent base units\n    // This is probably ALL WRONG and a HORRIBLE MISTAKE\n    // but until we figure out what the heck the name being\n    // built here really is, it will have to stay.\n    for (let i = 0, max = Dimension.getMax(); i < max; i++) {\n      let elem = this.dim_.getElementAt(i);\n      let tabs = this._getUnitTables();\n      let uA = tabs.getUnitsByDimension(new Dimension(i));\n      if(uA == null)\n        throw(new Error(`Can't find base unit for dimension ${i}`));\n      this.name_ = uA.name + elem;\n    }\n    return num;\n\n  } // end mutateCoherent\n\n\n  /**\n   * Calculates the number of units that would result from converting a unit\n   * expressed in mass/grams to a unit expressed in moles.  The \"this\" unit is\n   * the unit expressed in some form of mass (g, mg, mmg, kg, whatever) and the\n   * target or \"to\" unit - the molUnit parameter - is a unit expressed in moles\n   * - mol, umol, mmol, etc.  The unit expressions surrounding the moles and\n   * mass must be convertible.  No validation of this requirement is performed.\n   *\n   * @param amt the quantity of this unit to be converted\n   * @param molUnit the target/to unit for which the converted # is wanted\n   * @param molecularWeight the molecular weight of the substance for which the\n   *  conversion is being made\n   * @return the equivalent amount in molUnit\n   */\n  convertMassToMol(amt, molUnit, molecularWeight) {\n    // The prefix values that have been applied to this unit, which is the mass\n    // (grams) unit, are reflected in the magnitude.  So the number of moles\n    // represented by this unit equals the number of grams -- amount * magnitude\n    // divided by the molecular Weight\n    let molAmt = (this.magnitude_ * amt)/molecularWeight ;\n    // The molUnit's basic magnitude, before prefixes are applied,\n    // is avogadro's number, get that and divide it out of the current magnitude.\n    let tabs = this._getUnitTables();\n    let avoNum = tabs.getUnitByCode('mol').magnitude_ ;\n    let molesFactor = molUnit.magnitude_ / avoNum ;\n    // return the molAmt divided by the molesFactor as the number of moles\n    // for the molUnit\n    return molAmt/molesFactor ;\n  }\n\n  /**\n   * Calculates the number of units that would result from converting a unit\n   * expressed in moles to a unit expressed in mass (grams).  The \"this\" unit\n   * is the unit expressed in some form of moles, e.g., mol, umol, mmol, etc.,\n   * and the target or \"to\" unit is a unit expressed in some form of mass, e.g.,\n   * g, mg, mmg, kg, etc.  Any unit expressions surrounding the moles and mass\n   * must be convertible. No validation of this requirement is performed.\n   *\n   * @param amt the quantity of this unit to be converted\n   * @param massUnit the target/to unit for which the converted # is wanted\n   * @param molecularWeight the molecular weight of the substance for which the\n   *  conversion is being made\n   * @return the equivalent amount in massUnit\n   */\n  convertMolToMass(amt, massUnit, molecularWeight) {\n    // A simple mole unit has a magnitude of avogadro's number.  Get that\n    // number now (since not everyone agrees on what it is, and what is\n    // being used in this system might change).\n    let tabs = this._getUnitTables();\n    let avoNum = tabs.getUnitByCode('mol').magnitude_ ;\n    // Determine what prefix values (mg or mg/dL, etc.) have been applied to\n    // this unit by dividing the simple mole unit magnitude out of the\n    // current mole unit magnitude.\n    let molesFactor = this.magnitude_ / avoNum ;\n    // The number of grams (mass) is equal to the number of moles (amt)\n    // times the molecular weight.  We also multiply that by the prefix values\n    // applied to the current unit (molesFactor) to get the grams for this\n    // particular unit.\n    let massAmt = (molesFactor * amt) * molecularWeight ;\n    // Finally, we return the mass amount/grams for this particular unit\n    // divided by any effects of prefixes applied to the \"to\" unit, which\n    // is assumed to be some form of a gram unit\n    return massAmt / massUnit.magnitude_ ;\n  }\n\n\n  /**\n   * Mutates this unit into a unit on a ratio scale and converts a specified\n   * number of units to an appropriate value for this converted unit\n   *\n   * @param num the number of this unit before it's converted\n   * @return the magnitude of this unit after it's converted\n   * @throw an error if the dimensions differ\n   */\n  mutateRatio(num) {\n    if (this.cnv_ == null)\n      return this.mutateCoherent(num);\n    else\n      return num;\n\n  } // end mutateRatio\n\n\n  /**\n   * Multiplies this unit with a scalar. Special meaning for\n   * special units so that (0.1*B) is 1 dB.\n   *\n   * This function DOES NOT modify this unit.\n   *\n   * @param s the value by which this unit is to be multiplied\n   * @return a copy this unit multiplied by s\n   * */\n  multiplyThis(s) {\n\n    let retUnit = this.clone() ;\n    if (retUnit.cnv_ != null)\n      retUnit.cnvPfx_ *= s;\n    else\n      retUnit.magnitude_ *= s;\n    let mulVal = s.toString();\n    retUnit.name_ = this._concatStrs(mulVal, '*', this.name_, '[', ']');\n    retUnit.csCode_ = this._concatStrs(mulVal, '.', this.csCode_, '(', ')');\n    retUnit.ciCode_ = this._concatStrs(mulVal, '.', this.ciCode_, '(', ')');\n    retUnit.printSymbol_ = this._concatStrs(mulVal, '.', this.printSymbol_,\n        '(', ')');\n\n    return retUnit;\n\n  } // end multiplyThis\n\n\n  /**\n   * Multiplies this unit with another unit. If one of the\n   * units is a non-ratio unit the other must be dimensionless or\n   * else an exception is thrown.\n   *\n   * This function does NOT modify this unit\n   * @param unit2 the unit to be multiplied with this one\n   * @return this unit after it is multiplied\n   * @throws an error if one of the units is not on a ratio-scale\n   *         and the other is not dimensionless.\n   */\n  multiplyThese(unit2) {\n\n    var retUnit = this.clone() ;\n\n    if (retUnit.cnv_ != null) {\n      if (unit2.cnv_ == null && (!unit2.dim_ || unit2.dim_.isZero()))\n        retUnit.cnvPfx_ *= unit2.magnitude_;\n      else\n        throw (new Error(`Attempt to multiply non-ratio unit ${retUnit.name_} ` +\n          'failed.'));\n    } // end if this unit has a conversion function\n\n    else if (unit2.cnv_ != null) {\n      if (!retUnit.dim_ || retUnit.dim_.isZero()) {\n        retUnit.cnvPfx_ = unit2.cnvPfx_ * retUnit.magnitude_;\n        retUnit.cnv_ = unit2.cnv_ ;\n      }\n      else\n        throw (new Error(`Attempt to multiply non-ratio unit ${unit2.name_}`));\n    } // end if unit2 has a conversion function\n\n    // else neither unit has a conversion function\n    else {\n      retUnit.magnitude_ *= unit2.magnitude_;\n    } // end if unit2 does not have a conversion function\n\n    // If this.dim_ isn't there, clone the dimension in unit2 - if dimVec_\n    // is a dimension in unit2.dim_; else just transfer it to this dimension\n    if (!retUnit.dim_ || (retUnit.dim_ && !retUnit.dim_.dimVec_)) {\n      if (unit2.dim_)\n        retUnit.dim_ = unit2.dim_.clone();\n      else\n        retUnit.dim_ = unit2.dim_;\n    }\n    // Else this.dim_ is there.  If there is a dimension for unit2,\n    // add it to this one.\n    else if (unit2.dim_ && unit2.dim_ instanceof Dimension) {\n      retUnit.dim_.add(unit2.dim_);\n    }\n\n    // Concatenate the unit info (name, code, etc) for all cases\n    // where the multiplication was performed (an error wasn't thrown)\n    retUnit.name_ = this._concatStrs(retUnit.name_, '*', unit2.name_, '[', ']');\n    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '.', unit2.csCode_,\n      '(', ')');\n    if (retUnit.ciCode_ && unit2.ciCode_)\n      retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '.', unit2.ciCode_,\n        '(', ')');\n    else if (unit2.ciCode_)\n      retUnit.ciCode_ = unit2.ciCode_;\n    retUnit.guidance_ = '';\n    if (retUnit.printSymbol_ && unit2.printSymbol_)\n      retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '.',\n        unit2.printSymbol_, '(', ')');\n    else if (unit2.printSymbol_)\n      retUnit.printSymbol_ = unit2.printSymbol_;\n\n    // Update the mole exponent count by adding the count for unit2 to the\n    // count for this unit.\n    retUnit.moleExp_ = retUnit.moleExp_ + unit2.moleExp_ ;\n\n    // A unit that has the arbitrary attribute taints any unit created from it\n    // via an arithmetic operation.  Taint accordingly\n    // if (!retUnit.isMole_)\n    //   retUnit.isMole_ = unit2.isMole_ ;\n     if (!retUnit.isArbitrary_)\n       retUnit.isArbitrary_ = unit2.isArbitrary_;\n\n    return retUnit ;\n\n  } // end multiplyThese\n\n\n  /**\n   * Divides this unit by another unit. If this unit is not on a ratio\n   * scale an exception is raised. Mutating to a ratio scale unit\n   * is not possible for a unit, only for a measurement.\n   *\n   * This unit is NOT modified by this function.\n   * @param unit2 the unit by which to divide this one\n   * @return this unit after it is divided by unit2\n   * @throws an error if either of the units is not on a ratio scale.\n   * */\n  divide(unit2) {\n\n    var retUnit = this.clone();\n\n    if (retUnit.cnv_ != null)\n      throw (new Error(`Attempt to divide non-ratio unit ${retUnit.name_}`));\n    if (unit2.cnv_ != null)\n      throw (new Error(`Attempt to divide by non-ratio unit ${unit2.name_}`));\n\n    if (retUnit.name_ && unit2.name_)\n      retUnit.name_ = this._concatStrs(retUnit.name_, '/', unit2.name_, '[', ']');\n    else if (unit2.name_)\n      retUnit.name_ = unit2.invertString(unit2.name_);\n\n    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '/', unit2.csCode_,\n      '(', ')');\n\n    if (retUnit.ciCode_ && unit2.ciCode_)\n      retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '/', unit2.ciCode_,\n      '(', ')');\n    else if (unit2.ciCode_)\n      retUnit.ciCode_ = unit2.invertString(unit2.ciCode_) ;\n\n    retUnit.guidance_ = '';\n\n    retUnit.magnitude_ /= unit2.magnitude_;\n\n    if (retUnit.printSymbol_ && unit2.printSymbol_)\n      retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '/',\n        unit2.printSymbol_, '(', ')');\n    else if (unit2.printSymbol_)\n      retUnit.printSymbol_ = unit2.invertString(unit2.printSymbol_);\n\n    // Continue if unit2 has a dimension object.\n    // If this object has a dimension object, subtract unit2's dim_ object from\n    // this one. The sub method will take care of cases where the dimVec_ arrays\n    // are missing on one or both dim_ objects.\n    if (unit2.dim_) {\n      if (retUnit.dim_) {\n        if (retUnit.dim_.isNull())\n          retUnit.dim_.assignZero();\n        retUnit.dim_ = retUnit.dim_.sub(unit2.dim_);\n      } // end if this.dim_ exists\n\n      // Else if this dim_ object is missing, clone unit2's dim_ object\n      // and give the inverted clone to this unit.\n      else\n        retUnit.dim_ = unit2.dim_.clone().minus();\n    } // end if unit2 has a dimension object\n\n    // Update the mole exponent count by subtracting the count for unit2 from\n    // the // count for this unit.\n    retUnit.moleExp_ = retUnit.moleExp_ - unit2.moleExp_ ;\n\n    // A unit that has the arbitrary attribute taints any unit created from\n    // it via an arithmetic operation.  Taint accordingly\n    // if (!retUnit.isMole_)\n    //   retUnit.isMole_ = unit2.isMole_ ;\n    if (!retUnit.isArbitrary_)\n      retUnit.isArbitrary_ = unit2.isArbitrary_;\n\n    return retUnit;\n\n  } // end divide\n\n\n  /**\n   * Invert this unit with respect to multiplication. If this unit is not\n   * on a ratio scale an exception is thrown. Mutating to a ratio scale unit\n   * is not possible for a unit, only for a measurement (the magnitude and\n   * dimension).\n   *\n   *  This unit is modified by this function.\n   * @return this unit after being inverted\n   * @throws and error if this unit is not on a ratio scale\n   */\n  invert() {\n\n    if (this.cnv_ != null)\n      throw (new Error(`Attempt to invert a non-ratio unit - ${this.name_}`));\n\n    this.name_ = this.invertString(this.name_);\n    this.magnitude_ = 1/this.magnitude_ ;\n    this.dim_.minus();\n    return this;\n\n  } // end invert\n\n\n  /**\n   * Inverts a string, where the string is assumed to be a code or a name\n   * of a division operation where the string is the divisor and the dividend\n   * is blank.\n   *\n   * @param the string to be inverted\n   * @return the inverted string\n   */\n  invertString(theString) {\n\n    if (theString.length > 0) {\n      let stringRep = theString.replace('/', \"!\").replace('.', '/').replace(\"!\", '.');\n      switch(stringRep.charAt(0)) {\n        case '.' : theString = stringRep.substr(1); break;\n        case '/' : theString = stringRep; break;\n        default  : theString = \"/\" + stringRep;\n      }\n    }\n    return theString;\n\n  } // end invertString\n\n\n  /**\n   * This function handles concatenation of two strings and an operator.\n   * It's called to build unit data, e.g., unit name, unit code, etc., from\n   * two different units, joined by the specified operator.\n   *\n   * @param str1 the first string to appear in the result\n   * @param operator the operator ('*', '.' or '/') to appear between the strings\n   * @param str2 the second string to appear in the result\n   * @param startChar the starting character to be used, when needed, to\n   *  enclose a string\n   * @param endChar the ending character to be used, when needed, to enclose\n   *  a string\n   * @returns the built string\n   */\n  _concatStrs(str1, operator, str2, startChar, endChar) {\n\n    return this._buildOneString(str1, startChar, endChar) +\n      operator + this._buildOneString(str2, startChar, endChar) ;\n  }\n\n\n  /**\n   * This function handles creation of one string to be included in a\n   * concatenated string.   Basically it checks to see if the string\n   * needs to be enclosed either in parentheses or square brackets.\n   *\n   * The string is enclosed if it is not a number, does not start with\n   * a parenthesis or square bracket, and includes a period, and asterisk,\n   * a slash or a blank space.\n   *\n   * @param str the string\n   * @param startChar starting enclosing character\n   * @param endChar ending enclosing character\n   * @returns the string\n   */\n  _buildOneString(str, startChar, endChar) {\n    let ret = '' ;\n    if (intUtils_.isNumericString(str)) {\n      ret = str;\n    }\n    else {\n      if (str.charAt(0) === '(' || str.charAt(0) === '[') {\n        ret = str;\n      }\n      else if (/[./* ]/.test(str)) {\n        ret = startChar + str + endChar ;\n      }\n      else {\n        ret = str ;\n      }\n    }\n    return ret ;\n  }\n\n\n  /**\n   * Raises the unit to a power.  For example\n   *  kg.m/s2 raised to the -2 power would be kg-2.m-2/s-4\n   *\n   * If this unit is not on a ratio scale an error is thrown. Mutating\n   * to a ratio scale unit is not possible for a unit, only for a\n   * measurement (magnitude and dimension).\n   *\n   * This is based on the pow method in Gunter Schadow's java version,\n   * although it uses javascript capabilities to simplify the processing.\n   *\n   * This unit is modified by this function\n   *\n   * @param p the power to with this unit is to be raise\n   * @return this unit after it is raised\n   * @throws an error if this unit is not on a ratio scale.\n   */\n  power(p) {\n\n    if (this.cnv_ != null)\n      throw (new Error(`Attempt to raise a non-ratio unit, ${this.name_}, ` +\n                       'to a power.'));\n\n    //this.name_ = UnitString.pow(this.name_, p);\n    // the above line is replaced with the code below, as the pow method\n    // never actually existing in the UnitString class.  (Tried to use\n    // Schadow java code but this way ended up being a lot easier).\n    let uStr = this.csCode_ ;\n    let uArray = uStr.match(/([./]|[^./]+)/g) ;\n    let arLen = uArray.length;\n\n    for (let i = 0; i < arLen; i++) {\n      let un = uArray[i] ;\n      if (un !== '/' && un !== '.') {\n        let nun = parseInt(un);\n        if (isInteger(nun))\n          uArray[i] = (Math.pow(nun, p).toString());\n        else {\n          let uLen = un.length ;\n          for (let u = uLen - 1; u >= 0; u--) {\n            let uChar = parseInt(un[u]);\n            if (!isInteger(uChar)) {\n              if (un[u] === '-' || un[u] === '+') {\n                u--;\n              }\n              if (u < uLen - 1) {\n                let exp = parseInt(un.substr(u));\n                exp = Math.pow(exp, p);\n                uArray[i] = un.substr(0, u) + exp.toString();\n                u = -1;\n              }\n              else {\n                uArray[i] += p.toString();\n                u = -1;\n              } // end if there are/aren't some numbers at the end\n              u = -1;\n            } // end if this character is not a number\n          } // end searching backwards for start of exponent\n        } // end if this element is not a number\n      } // end if the current element is not an operator\n    } // end do for each element of the units array\n\n    // reassemble the updated units array to a string\n    this.csCode_ = uArray.join('');\n\n    this.magnitude_ = Math.pow(this.magnitude_, p);\n    if (this.dim_) {\n      this.dim_.mul(p);\n    }\n    return this;\n\n  } // end power\n\n\n  /*\n   * This function tests this unit against the unit passed in to see if the\n   * two are mole to mass commensurable.  It assumes that one of the units\n   * is a mole-based unit and the other is a mass-based unit.  It also assumes\n   * that the mole-based unit has a single mole unit in the numerator and that\n   * the mass-based unit has a single mass unit in the numerator.  It does NOT\n   * check to validate those assumptions.\n   *\n   * The check is made by setting the dimension vector element corresponding\n   * to the base mass unit (gram) in the mole unit, and then comparing the\n   * two dimension vectors.  If they match, the units are commensurable.\n   * Otherwise they are not.\n   *\n   * @param unit2 the unit to be compared to this one\n   * @returns boolean indicating commensurability\n   */\n  isMoleMassCommensurable(unit2) {\n    let tabs = this._getUnitTables();\n    let d = tabs.getMassDimensionIndex();\n    let commensurable = false ;\n    if (this.moleExp_ === 1 && unit2.moleExp_ === 0) {\n      let testDim = this.dim_.clone();\n      let curVal = testDim.getElementAt(d);\n      testDim.setElementAt(d, (curVal + this.moleExp_));\n      commensurable = (testDim.equals(unit2.dim_));\n    }\n    else if (unit2.moleExp_ === 1 && this.moleExp_ === 0) {\n      let testDim = unit2.dim_.clone();\n      let curVal = testDim.getElementAt(d);\n      testDim.setElementAt(d, (curVal + unit2.moleExp_));\n      commensurable = (testDim.equals(this.dim_));\n    }\n    return commensurable ;\n  }\n\n\n  /**\n   * This returns the UnitTables singleton object.  Including the require\n   * statement included here causes a circular dependency condition that\n   * resulted in the UnitTables object not being defined for the Unit object.\n   * sigh.  Thanks, Paul, for figuring this out.\n   *\n   * @private\n   */\n  _getUnitTables() {\n    if (!UnitTables)\n      UnitTables = require('./unitTables.js').UnitTables;\n    return UnitTables.getInstance();\n  }\n\n} // end Unit class\n","/**\n * This class handles the parsing of a unit string into a unit object\n */\n\nvar Ucum = require('./config.js').Ucum;\nvar Unit = require('./unit.js').Unit;\nvar UnitTables = require('./unitTables.js').UnitTables;\nvar PrefixTables = require('./prefixTables.js').PrefixTables;\n\nimport * as intUtils_ from \"./ucumInternalUtils.js\";\n\nexport class UnitString {\n\n  /**\n   * Constructor\n   */\n  constructor() {\n\n    // Get instances of the unit and prefix tables and the utilities\n    this.utabs_ = UnitTables.getInstance();\n    this.pfxTabs_ = PrefixTables.getInstance();\n\n    // Set emphasis characters to defaults.  These are used to emphasize\n    // certain characters or strings in user messages.  They can be reset in\n    // the useHTMLInMessages method.\n    this.openEmph_ = Ucum.openEmph_;\n    this.closeEmph_ = Ucum.closeEmph_;\n\n    // Set the braces message to blank.  This message is displayed for each\n    // validation request on the web page, but is included separately as\n    // a note on the validation spreadsheet.  The useBraceMsgForEachString\n    // method should be used to set the message to be displayed for each\n    // unit string.\n    this.bracesMsg_ = '';\n\n    // Set the flags used, with indices, as place holders in unit strings\n    // for parenthetical strings and strings within braces.\n    this.parensFlag_ = \"parens_placeholder\"; // in lieu of Jehoshaphat\n    this.pFlagLen_ = this.parensFlag_.length;\n    this.braceFlag_ = \"braces_placeholder\"; // in lieu of Nebuchadnezzar\n    this.bFlagLen_ = this.braceFlag_.length;\n\n    // Initialize the message start/end strings, which will be set when\n    // parseString is called.\n    this.vcMsgStart_ = null;\n    this.vcMsgEnd_ = null;\n\n    // Arrays used by multiple methods within this class to hold persistent\n    // data.  Just gets too bulky to pass these guys around.\n\n    // Messages to be returned to the calling function\n    this.retMsg_ = [] ;\n\n    // Units for parenthetical unit strings\n    this.parensUnits_ = [] ;\n\n    // annotation text for annotations found in unit strings\n    this.annotations_ = [] ;\n\n    // suggestions for unit strings that for which no unit was found\n    this.suggestions = [] ;\n\n  } // end constructor\n\n\n  /**\n   * Sets the emphasis strings to the HTML used in the webpage display - or\n   * blanks them out, depending on the use parameter.\n   *\n   * @param use flag indicating whether or not to use the html message format;\n   *  defaults to true\n   */\n  useHTMLInMessages(use) {\n    if (use === undefined || use) {\n      this.openEmph_ = Ucum.openEmphHTML_;\n      this.closeEmph_ = Ucum.closeEmphHTML_;\n    }\n    else {\n      this.openEmph_ = Ucum.openEmph_;\n      this.closeEmph_ = Ucum.closeEmph_;\n    }\n  } // end useHTMLInMessages\n\n\n  /**\n   * Sets the braces message to be displayed for each unit string validation\n   * requested, as appropriate.\n   *\n   * @param use flag indicating whether or not to use the braces message;\n   *  defaults to true\n   */\n  useBraceMsgForEachString(use) {\n    if (use === undefined || use)\n      this.bracesMsg_ = Ucum.bracesMsg_;\n    else\n      this.bracesMsg_ = '';\n  }\n\n\n  /**\n   * Parses a unit string, returns a unit, a possibly updated version of\n   * the string passed in, and messages and suggestions where appropriate.\n   *\n   * The string returned may be updated if the input string contained unit\n   * names, e.g., \"pound\".  The unit code ([lb_av] for pound) is placed in\n   * the string returned, a the returned messages array includes a note\n   * explaining the substitution.\n   *\n   * @param uStr the string defining the unit\n   * @param valConv indicates what type of request this is for - a request to\n   *  validate (pass in 'validate') or a request to convert (pass in 'convert');\n   *  optional, defaults to 'validate'\n   * @param suggest a boolean to indicate whether or not suggestions are\n   *  requested for a string that cannot be resolved to a valid unit;\n   *  true indicates suggestions are wanted; false indicates they are not,\n   *  and is the default if the parameter is not specified;\n   * @returns an array containing:\n   *   the unit object or null if a unit could not be created.  In cases where\n   *     a fix was found for a problem string, .e.g., 2.mg for 2mg, a unit will\n   *     be returned but an error message will also be returned, describing\n   *     the substitution;\n   *   the possibly updated unit string passed in;\n   *   an array of any user messages (informational, error or warning)\n   *     generated (or an empty array); and\n   *   a suggestions array of hash objects (1 or more).  Each hash contains\n   *   three elements:\n   *     'msg' which is a message indicating what unit expression the\n   *       suggestions are for;\n   *     'invalidUnit' which is the unit expression the suggestions are\n   *       for; and\n   *     'units' which is an array of data for each suggested unit found.\n   *        Each array will contain the unit code, the unit name and the\n   *        unit guidance (if any).\n   *   The return array will not contain a suggestions array if a valid unit\n   *   was found or if suggestions were not requested.\n   * @throws an error if nothing was specified.\n   */\n  parseString(uStr, valConv, suggest) {\n\n    uStr = uStr.trim();\n    // Make sure we have something to work with\n    if (uStr === '' || uStr === null) {\n      throw (new Error('Please specify a unit expression to be validated.'));\n    }\n\n    if (valConv === 'validate') {\n      this.vcMsgStart_ = Ucum.valMsgStart_;\n      this.vcMsgEnd_ = Ucum.valMsgEnd_;\n    }\n    else {\n      this.vcMsgStart_ = Ucum.cnvMsgStart_;\n      this.vcMsgEnd_ = Ucum.cnvMsgEnd_;\n    }\n\n    if (suggest === undefined || suggest === false) {\n      this.suggestions_ = null;\n    }\n    else {\n      this.suggestions_ = [] ;\n    }\n\n    this.retMsg_ = [];\n    this.parensUnits_ = [];\n    this.annotations_ = [] ;\n\n    let origString = uStr;\n    let retObj = [];\n\n    // Extract any annotations, i.e., text enclosed in braces ({}) from the\n    // string before further processing.  Store each one in this.annotations_\n    // array and put a placeholder in the string for the annotation.  Do\n    // this before other processing in case an annotation contains characters\n    // that will be interpreted as parenthetical markers or operators in\n    // subsequent processing.\n\n    uStr = this._getAnnotations(uStr);\n    if (this.retMsg_.length > 0) {\n      retObj[0] = null;\n      retObj[1] = null;\n    }\n    else {\n      // Flag used to block further processing on an unrecoverable error\n      let endProcessing = this.retMsg_.length > 0;\n\n      // First check for one of the \"special\" units.  If it's one of those, put\n      // in a substitution phrase for it to avoid having it separated on its\n      // embedded operator.  This will only happen, by the way, if it is\n      // preceded by a prefix or followed by an operator and another unit.\n      let sUnit = null ;\n      for (sUnit in Ucum.specUnits_) {\n        while (uStr.indexOf(sUnit) !== -1)\n          uStr = uStr.replace(sUnit, Ucum.specUnits_[sUnit]);\n      }\n\n      // Check for spaces and throw an error if any are found.  The spec\n      // explicitly forbids spaces except in annotations, which is why any\n      // annotations are extracted before this check is made.\n      if (uStr.indexOf(' ') > -1) {\n        throw (new Error('Blank spaces are not allowed in unit expressions.'));\n      } // end if blanks were found in the string\n\n      // assign the array returned to retObj.  It will contain 2 elements:\n      //  the unit returned in position 0; and the origString (possibly\n      //  modified in position 1.  The origString in position 1 will not\n      //  be changed by subsequent processing.\n      retObj = this._parseTheString(uStr, origString);\n      let finalUnit = retObj[0];\n\n      // Do a final check to make sure that finalUnit is a unit and not\n      // just a number.  Something like \"8/{HCP}\" will return a \"unit\" of 8\n      // - which is not a unit.  Hm - evidently it is.  So just create a unit\n      // object for it.\n      if (intUtils_.isIntegerUnit(finalUnit) || typeof finalUnit === 'number') {\n        finalUnit = new Unit({\n          'csCode_': origString,\n          'magnitude_': finalUnit,\n          'name_': origString\n        });\n        retObj[0] = finalUnit;\n      } // end final check\n    } // end if no annotation errors were found\n\n    retObj[2] = this.retMsg_;\n    if (this.suggestions_ && this.suggestions_.length > 0)\n      retObj[3] = this.suggestions_ ;\n    return retObj;\n\n  } // end parseString\n\n\n  /**\n   * Parses a unit string, returns a unit, a possibly updated version of\n   * the string passed in, and messages where appropriate.  This should\n   * only be called from within this class (or by test code).\n   *\n   * The string returned may be updated if the input string contained unit\n   * names, e.g., \"pound\".  The unit code ([lb_av] for pound) is placed in\n   * the string returned, a the returned messages array includes a note\n   * explaining the substitution.\n   *\n   * @param uStr the string defining the unit\n   * @param origString the original unit string passed in\n   *\n   * @returns\n   *  an array containing:\n   *    the unit object (or null if there were problems creating the unit); and\n   *    the possibly updated unit string passed in.\n   *\n   * the this.retMsg_ array will be updated with any user messages\n   *   (informational, error or warning) generated by this or called methods\n   * the this.parensUnits_ array is referenced and possibly populated by\n   *   methods called within this one\n   * the this.annotations_ array is referenced by methods called within\n   *   this one\n   * the this.suggestions_ array may be populated by methods called within\n   *   this one\n   */\n  _parseTheString(uStr, origString) {\n\n    // Unit to be returned\n    let finalUnit = null;\n\n    // Flag used to block further processing on an unrecoverable error\n    let endProcessing = this.retMsg_.length > 0;\n\n    // Call _processParens to search for and process any/all parenthetical\n    // strings in uStr.  Units created for parenthetical strings will be\n    // stored in the this.parensUnits_ array.\n    let parensResp = this._processParens(uStr, origString);\n    endProcessing = parensResp[2];\n\n    // The array used to hold the units and their operators.\n    let uArray = [];\n\n    // Continue if we didn't hit a problem\n    if (!endProcessing) {\n      uStr = parensResp[0];\n      origString = parensResp[1];\n\n      // Call _makeUnitsArray to convert the string to an array of unit\n      // descriptors with operators.\n      let mkUArray = this._makeUnitsArray(uStr, origString);\n\n      endProcessing = mkUArray[2] ;\n      if (!endProcessing) {\n        uArray = mkUArray[0];\n        origString = mkUArray[1];\n        // Create a unit object out of each un element\n        let uLen = uArray.length;\n        for (let u1 = 0; u1 < uLen; u1++) {\n          //for (let u1 = 0; u1 < uLen && !endProcessing; u1++) {\n          let curCode = uArray[u1]['un'];\n\n          // Determine the type of the \"un\" attribute of the current array element\n\n          // Check to see if it's a number.  If so write the number version of\n          // the number back to the \"un\" attribute and move on\n          if (intUtils_.isIntegerUnit(curCode)) {\n            uArray[u1]['un'] = Number(curCode);\n          }\n\n          else {\n            // The current unit array element is a string.  Check now to see\n            // if it is or contains a parenthesized unit from this.parensUnits_.\n            // If so, call _getParens to process the string and get the unit.\n\n            if (curCode.indexOf(this.parensFlag_) >= 0) {\n              let parenUnit = this._getParensUnit(curCode, origString);\n              // if we couldn't process the string, set the end flag and bypass\n              // further processing.\n              if (!endProcessing)\n                endProcessing = parenUnit[1];\n\n              // If we're good, put the unit in the uArray and replace the\n              // curCode, which contains the parentheses placeholders, etc.,\n              // with the unit's code - including any substitutions.\n              if (!endProcessing) {\n                uArray[u1]['un'] = parenUnit[0];\n              }\n            } // end if the curCode contains a parenthesized unit\n\n            // Else it's not a parenthetical unit and not a number. Call\n            // _makeUnit to create a unit for it.\n            else {\n              let uRet = this._makeUnit(curCode, origString);\n              // If we didn't get a unit, set the endProcessing flag.\n              if (uRet[0] === null) {\n                endProcessing = true;\n              }\n              else {\n                uArray[u1]['un'] = uRet[0];\n                origString = uRet[1];\n              }\n            } // end if the curCode is not a parenthetical expression\n          } // end if the \"un\" array is a not a number\n        } // end do for each element in the units array\n      } // end if _makeUnitsArray did not return an error\n    } // end if _processParens did not find an error that causes a stop\n\n    // If we're still good, continue\n    if (!endProcessing) {\n      // Process the units (and numbers) to create one final unit object\n      if ((uArray[0] === null || uArray[0] === ' ' ||\n           uArray[0]['un'] === undefined || uArray[0]['un'] === null)\n          && this.retMsg_.length === 0) {\n        // not sure what this might be, but this is a safeguard\n        this.retMsg_.push(`Unit string (${origString}) did not contain ` +\n          `anything that could be used to create a unit, or else something ` +\n          `that is not handled yet by this package.  Sorry`);\n        endProcessing = true;\n      }\n    }\n    if (!endProcessing) {\n      finalUnit = this._performUnitArithmetic(uArray, origString);\n    }\n    return [finalUnit, origString];\n  } // end _parseTheString\n\n\n  /**\n   * Extracts all annotations from a unit string, replacing them with\n   * placeholders for later evaluation.  The annotations are stored in the\n   * this.annotations_ array.  This should only be called from within this\n   * class (or by test code).\n   *\n   * @param uString the unit string being parsed\n   * @returns the string after the annotations are replaced with placeholders\n   *\n   * the this.retMsg_ array will be updated with any user messages\n   *   (informational, error or warning) generated by this or called methods\n   * the this.annotations_ array is populated by this method\n   */\n  _getAnnotations(uString) {\n    let openBrace = uString.indexOf('{');\n    while (openBrace >= 0) {\n\n      let closeBrace = uString.indexOf('}');\n      if (closeBrace < 0) {\n        this.retMsg_.push('Missing closing brace for annotation starting at ' +\n          this.openEmph_ + uString.substr(openBrace) +\n          this.closeEmph_);\n        openBrace = -1;\n      }\n      else {\n        let braceStr = uString.substring(openBrace, closeBrace + 1);\n        let aIdx = this.annotations_.length.toString();\n        uString = uString.replace(braceStr, this.braceFlag_ + aIdx +\n          this.braceFlag_);\n        this.annotations_.push(braceStr);\n        openBrace = uString.indexOf('{');\n      }\n    } // end do while we have an opening brace\n\n    // check for a stray/unmatched closing brace\n    let closeBrace = uString.indexOf('}');\n    if (closeBrace >= 0)\n      this.retMsg_.push('Missing opening brace for closing brace found at ' +\n        this.openEmph_ + uString.substring(0, closeBrace + 1) +\n        this.closeEmph_);\n    return uString;\n  } // end _getAnnotations\n\n\n  /**\n   * Finds and processes any/all parenthesized unit strings. This should only\n   * be called from within this class (or by test code).\n   *\n   * Nested parenthesized strings are processed from the inside out.  The\n   * parseString function is called from within this one for each parenthesized\n   * unit string, and the resulting unit object is stored in this.parensUnits_,\n   * to be processed after all strings are translated to units.\n   *\n   * A placeholder is placed in the unit string returned to indicate that the\n   * unit object should be obtained from the this.parensUnits_ array.  The\n   * placeholder consists of the parenthesis flag (this.parensFlag_) followed\n   * by the index of the unit in this.parensUnits_ followed by this.parensFlag_.\n   *\n   * @param uString the unit string being parsed, where this will be the full\n   *  string the first time this is called and parenthesized strings on any\n   *  subsequent calls\n   * @param origString the original string first passed in to parseString\n   * @returns\n   *  an array containing:\n   *   the string after the parentheses are replaced;\n   *   the original string; and\n   *   a boolean flag indicating whether or not an error occurred that\n   *     should stop processing.\n   *\n   * the this.retMsg_ array will be updated with any user messages\n   *   (informational, error or warning) generated by this or called methods\n   * this this.parensUnits_ array will be populated with units found for\n   *   parenthetical unit strings\n   */\n  _processParens(uString, origString) {\n\n    // Unit strings array and index\n    let uStrArray = [];\n    let uStrAryPos = 0;\n    let stopProcessing = false;\n\n    let pu = this.parensUnits_.length;\n\n    // Count of characters trimmed off the beginning of the unit string (uString)\n    // as units are removed from it; used for error messages to provide\n    // context.\n    let trimmedCt = 0;\n\n    // Break the unit string into pieces that consist of text outside of\n    // parenthetical strings and placeholders for the parenthetical units.\n    // This method is called recursively for parenthetical strings and the units\n    // returned are stored in the this.parensUnits_ array.\n    while (uString !== \"\" && !stopProcessing) {\n      let openCt = 0;\n      let closeCt = 0;\n      let openPos = uString.indexOf('(');\n\n      // If an opening parenthesis was not found, check for an unmatched\n      // close parenthesis.  If one was found report the error and end\n      // processing.\n      if (openPos < 0) {\n        let closePos = uString.indexOf(')');\n        if (closePos >= 0) {\n          let theMsg = `Missing open parenthesis for close ` +\n            `parenthesis at ${uString.substring(0, closePos + trimmedCt)}` +\n            `${this.openEmph_}${uString.substr(closePos, 1)}${this.closeEmph_}`;\n          if (closePos < uString.length - 1) {\n            theMsg += `${uString.substr(closePos + 1)}`;\n          }\n          this.retMsg_.push(theMsg);\n          uStrArray[uStrAryPos] = uString;\n          stopProcessing = true;\n        } // end if a close parenthesis was found\n\n        // If no parentheses were found in the current unit string, transfer\n        // it to the units array and blank out the string, which will end\n        // the search for parenthetical units.\n        else {\n          uStrArray[uStrAryPos] = uString;\n          uString = \"\";\n        } // end if no close parenthesis was found\n      } // end if no open parenthesis was found\n\n      // Otherwise an open parenthesis was found. Process the string that\n      // includes the parenthetical group\n      else {\n        openCt += 1;\n        // Write the text before the parentheses (if any) to the unit strings array\n        let uLen = uString.length;\n        if (openPos > 0) {\n          uStrArray[uStrAryPos++] = uString.substr(0, openPos);\n        }\n\n        // Find the matching closePos, i.e., the one that closes the\n        // parenthetical group that this one opens.  Look also for\n        // another open parenthesis, in case this includes nested parenthetical\n        // strings.  This continues until it finds the same number of close\n        // parentheses as open parentheses, or runs out of string to check.\n        // In the case of nested parentheses this will identify the outer set\n        // of parentheses.\n        let closePos = 0;\n        let c = openPos + 1;\n        for (; c < uLen && openCt != closeCt; c++) {\n          if (uString[c] === '(')\n            openCt += 1;\n          else if (uString[c] === ')')\n            closeCt += 1;\n        }\n\n        // Put a placeholder for the group in the unit strings array and recursively\n        // call this method for the parenthetical group.  Put the unit returned\n        // in this.parensUnits_.  Set the unit string to whatever follows\n        // the position of the closing parenthesis for this group, to be\n        // processed by the next iteration of this loop.  If there's nothing\n        // left uString is set to \"\".\n        if (openCt === closeCt) {\n          closePos = c;\n          uStrArray[uStrAryPos++] = this.parensFlag_ + pu.toString() + this.parensFlag_;\n          let parseResp = this._parseTheString(\n            uString.substring(openPos + 1, closePos - 1), origString);\n          if (parseResp[0] === null)\n            stopProcessing = true;\n          else {\n            origString = parseResp[1];\n            this.parensUnits_[pu++] = parseResp[0];\n            uString = uString.substr(closePos);\n            trimmedCt = closePos;\n          }\n        } // end if the number of open and close parentheses matched\n\n        // If the number of open and close parentheses doesn't match, indicate\n        // an error.\n        else {\n          uStrArray.push(origString.substr(openPos));\n          this.retMsg_.push(`Missing close parenthesis for open parenthesis at ` +\n            `${origString.substring(0, openPos + trimmedCt)}` +\n            `${this.openEmph_}${origString.substr(openPos, 1)}` +\n            `${this.closeEmph_}${origString.substr(openPos + 1)}`);\n          stopProcessing = true;\n        }\n      } // end if an open parenthesis was found\n    } // end do while the input string is not empty\n    if (stopProcessing)\n      this.parensUnits_ = [];\n    return [uStrArray.join(''), origString, stopProcessing]\n  } // end _processParens\n\n\n  /**\n   * Breaks the unit string into an array of unit descriptors and operators.\n   * If a unit descriptor consists of a number preceding a unit code, with\n   * no multiplication operator, e.g., 2mg instead of 2.mg, it is handled\n   * as if it were a parenthetical expression.\n   *\n   * This should only be called from within this class (or by test code).\n   *\n   * @param uStr the unit string being parsed\n   * @param origString the original string passed to parseString\n   * @returns\n   *  an array containing:\n   *    the array representing the unit string;\n   *    the original string passed in, possibly updated with corrections; and\n   *    and a flag indicating whether or not processing can continue.\n   *\n   * the this.retMsg_ array will be updated with any user messages\n   *   (informational, error or warning) generated by this or called methods\n   */\n  _makeUnitsArray(uStr, origString) {\n\n    // Separate the string into pieces based on delimiters / (division) and .\n    // (multiplication).  The idea is to get an array of units on which we\n    // can then perform any operations (prefixes, multiplication, division).\n\n    let uArray1 = uStr.match(/([./]|[^./]+)/g);\n    let endProcessing = false ;\n    let uArray = [];\n    let startNumCheck = /(^[0-9]+)(\\[?[a-zA-Z\\_0-9a-zA-Z\\_]+\\]?$)/ ;\n\n    // If the first element in the array is the division operator (/), the\n    // string started with '/'.  Add a first element containing 1 to the\n    // array, which will cause the correct computation to be performed (inversion).\n    if (uArray1[0] === \"/\") {\n      uArray1.unshift(\"1\");\n    }\n    // If the first element in the array is the multiplication operator (.)\n    // return an error.\n    else if (uArray1[0] === '.') {\n      this.retMsg_.push(`${origString} is not a valid UCUM code. ` +\n          `The multiplication operator at the beginning of the expression is ` +\n          `not valid. A multiplication operator must appear only between ` +\n          `two codes.`);\n      endProcessing = true ;\n    }\n    if (!endProcessing) {\n      // Check to see if there is a number preceding a unit code, e.g., 2mg\n      // If so, update the first element to remove the number (2mg -> mg) and\n      // add two elements to the beginning of the array - the number and the\n      // multiplication operator.\n\n      if (!intUtils_.isNumericString(uArray1[0])) {\n        let numRes = uArray1[0].match(startNumCheck);\n        if (numRes && numRes.length === 3 && numRes[1] !== '' &&\n          numRes[2] !== '' && numRes[2].indexOf(this.braceFlag_) !== 0) {\n          let dispVal = numRes[2] ;\n\n          if (!endProcessing && numRes[2].indexOf(this.parensFlag_) !== -1) {\n            let parensback = this._getParensUnit(numRes[2], origString);\n            numRes[2] = parensback[0]['csCode_'];\n            dispVal = `(${numRes[2]})`;\n            endProcessing = parensback[1];\n          }\n          if (!endProcessing) {\n            this.retMsg_.push(`${numRes[1]}${dispVal} is not a valid UCUM code.` +\n              `  ${this.vcMsgStart_}${numRes[1]}.${dispVal}${this.vcMsgEnd_}`);\n            origString = origString.replace(`${numRes[1]}${dispVal}`,\n              `${numRes[1]}.${dispVal}`);\n            uArray1[0] = numRes[2];\n            uArray1.unshift(numRes[1], '.');\n          }\n        }\n      } // end if the first element is not a number (only)\n\n      // Create an array of unit/operator objects.  The unit is, for now, the\n      // string containing the unit code (e.g., Hz for hertz) including\n      // a possible prefix and exponent.   The operator is the operator to be\n      // applied to that unit and the one preceding it.  So, a.b would give\n      // us two objects.  The first will have a unit of a, and a blank operator\n      // (because it's the first unit).  The second would have a unit of b\n      // and the multiplication operator (.).\n      if (!endProcessing) {\n        let u1 = uArray1.length;\n        uArray = [{op: \"\", un: uArray1[0]}];\n        for (let n = 1; n < u1; n++) {\n\n          // check to make sure that we don't have two operators together, e.g.,\n          // mg./K.  If so, let the user know the problem.\n          let theOp = uArray1[n++];\n          // oh wait - check to make sure something is even there, that the\n          // user didn't end the expression with an operator.\n          if (!uArray1[n]) {\n            this.retMsg_.push(`${origString} is not a valid UCUM code. ` +\n              `It is terminated with the operator ${this.openEmph_}` +\n              `${theOp}${this.closeEmph_}.`);\n            n = u1;\n            endProcessing = true;\n          }\n          else if (Ucum.validOps_.indexOf(uArray1[n]) !== -1) {\n            this.retMsg_.push(`${origString} is not a valid UCUM code. ` +\n              `A unit code is missing between${this.openEmph_}` +\n              `${theOp}${this.closeEmph_}and${this.openEmph_}` +\n              `${uArray1[n]}${this.closeEmph_}in${this.openEmph_}` +\n              `${theOp}${uArray1[n]}${this.closeEmph_}.`);\n            n = u1;\n            endProcessing = true;\n          }\n          else {\n            // Check to see if a number precedes a unit code.\n            // If so, send the element to _processParens, inserting the multiplication\n            // operator where it belongs.  Treating it as parenthetical keeps it from\n            // being interpreted incorrectly because of operator parentheses.  For\n            // example, if the whole string is mg/2kJ we don't want to rewrite it as\n            // mg/2.kJ - because mg/2 would be performed, followed by .kJ.  Instead,\n            // handling 2kJ as a parenthesized unit will make sure mg is divided by\n            // 2.kJ.\n            if (!intUtils_.isNumericString(uArray1[n])) {\n              let numRes2 = uArray1[n].match(startNumCheck);\n              if (numRes2 && numRes2.length === 3 && numRes2[1] !== '' &&\n                numRes2[2] !== '' && numRes2[2].indexOf(this.braceFlag_) !== 0) {\n                let invalidString = numRes2[0];\n                if (!endProcessing && numRes2[2].indexOf(this.parensFlag_) !== -1) {\n                  let parensback = this._getParensUnit(numRes2[2], origString);\n                  numRes2[2] = parensback[0]['csCode_'];\n                  invalidString = `(${numRes2[2]})`;\n                  endProcessing = parensback[1];\n                  if (!endProcessing) {\n                    this.retMsg_.push(`${numRes2[1]}${invalidString} is not a ` +\n                      `valid UCUM code.  ${this.vcMsgStart_}${numRes2[1]}.${invalidString}` +\n                      `${this.vcMsgEnd_}`);\n                    let parensString = `(${numRes2[1]}.${invalidString})`;\n                    origString = origString.replace(`${numRes2[1]}${invalidString}`,\n                      parensString);\n                    let nextParens = this._processParens(parensString, origString);\n                    endProcessing = nextParens[2];\n                    if (!endProcessing) {\n                      uArray.push({op: theOp, un: nextParens[0]});\n                    }\n                    //uArray.push({op: '.', un: numRes2[2]});\n                  }\n                } // end if the string represents a parenthesized unit\n                else {\n                  let parensStr = '(' + numRes2[1] + '.' + numRes2[2] + ')';\n                  let parensResp = this._processParens(parensStr, origString);\n                  // if a \"stop processing\" flag was returned, set the n index to end\n                  // the loop and set the endProcessing flag\n                  if (parensResp[2]) {\n                    n = u1;\n                    endProcessing = true;\n                  }\n                  else {\n                    this.retMsg_.push(`${numRes2[0]} is not a ` +\n                      `valid UCUM code.  ${this.vcMsgStart_}${numRes2[1]}.${numRes2[2]}` +\n                      `${this.vcMsgEnd_}`);\n                    origString = origString.replace(numRes2[0], parensStr);\n                    uArray.push({op: theOp, un: parensResp[0]});\n                  } // end if no error on the processParens call\n                } // end if the string does not represent a parenthesized unit\n              } // end if the string is a number followed by a string\n              else {\n                uArray.push({op: theOp, un: uArray1[n]});\n              }\n            }\n            else {\n              uArray.push({op: theOp, un: uArray1[n]});\n            }\n          } // end if there isn't a missing operator or unit code\n        } // end do for each element in uArray1\n      } // end if a processing error didn't occur in getParensUnit\n    } // end if the string did not begin with a '.' with no following digit\n    return [uArray, origString, endProcessing];\n  } // end _makeUnitsArray\n\n\n  /**\n   * Takes a unit string containing parentheses flags and returns the unit they\n   * represent.  Any text found before and/or after the parenthetical\n   * expression is checked to see if we can tell what the user meant and\n   * let them know what it should have been.  For example, 2(mg), which\n   * would resolve to 2mg, should be 2.mg.\n   *\n   * This should only be called from within this class (or by test code).\n   *\n   * @param pStr the string being parsed\n   * @param origString the original unit string passed in; passed through\n   *  to _getAnnonText if annotation flags are found in any text preceding\n   *  or following the parenthetical unit\n   * @returns\n   *   an array containing\n   *     the unit object; and\n   *     a flag indicating whether or not processing should be ended.\n   *       True indicates that the string was invalid and no corrections\n   *         (substitutions or suggestions) could be found;\n   *       False indicates that it was either valid or substitutions/suggestions\n   *          were made.\n   *   the this.retMsg_ array will be updated with any user messages\n   *     (informational, error or warning) generated by this or called methods\n   *   this this.parensUnits_ array contains the units that are acquired by\n   *     this method\n   * @throws an error if an invalid parensUnit index was found.  This is\n   *    a processing error.\n   */\n  _getParensUnit(pStr, origString) {\n    let endProcessing = false;\n    let retAry = [];\n    let retUnit = null;\n    let befAnnoText = null;\n    let aftAnnoText = null;\n\n    // Get the location of the flags.  We're assuming there are only two\n    // because _processParens takes care of nesting.  By the time we get\n    // here we should not be looking a nested parens.  Also get any text\n    // before and after the parentheses.  Once we get the unit we update\n    // the input string with the unit's csCode_, which will wipe out any\n    // before and after text\n    let psIdx = pStr.indexOf(this.parensFlag_);\n    let befText = null;\n    if (psIdx > 0) {\n      befText = pStr.substr(0, psIdx - 1);\n    }\n    let peIdx = pStr.lastIndexOf(this.parensFlag_);\n    let aftText = null;\n    if (peIdx + this.pFlagLen_ < pStr.length) {\n      aftText = pStr.substr(peIdx + this.pFlagLen_);\n    }\n\n    // Get the text between the flags\n    let pNumText = pStr.substring(psIdx + this.pFlagLen_, peIdx);\n\n    // Make sure the index is a number, and if it is, get the unit from the\n    // this.parensUnits_ array\n    if (intUtils_.isNumericString(pNumText)) {\n      retUnit = this.parensUnits_[Number(pNumText)];\n      if (!intUtils_.isIntegerUnit(retUnit)) {\n        pStr = retUnit.csCode_;\n      }\n      else {\n        pStr = retUnit ;\n      }\n    }\n    // If it's not a number, it's a programming error.  Throw a fit.\n    else {\n      throw (new Error(`Processing error - invalid parens number ${pNumText} ` +\n        `found in ${pStr}.`));\n    }\n\n    // If there's something in front of the starting parentheses flag, check to\n    // see if it's a number or an annotation.\n    if (befText) {\n      // If it's a number, assume that multiplication was assumed\n      if (intUtils_.isNumericString(befText)) {\n        let nMag = retUnit.getProperty('magnitude_');\n        nMag *= Number(befText);\n        retUnit.assignVals({'magnitude_': nMag});\n        pStr = `${befText}.${pStr}`;\n        this.retMsg_.push(`${befText}${pStr} is not a valid UCUM code.\\n` +\n          this.vcMsgStart_ + pStr + this.vcMsgEnd_);\n      }\n      else {\n        if (befText.indexOf(this.braceFlag_) >= 0) {\n          let annoRet = this._getAnnoText(befText, origString);\n          // if we found not only an annotation, but text before or after\n          // the annotation (remembering that this is all before the\n          // parentheses) throw an error - because we don't know what\n          // to do with it.  Could it be missing an operator?\n          if (annoRet[1] || annoRet[2]) {\n            throw (new Error(`Text found before the parentheses (` +\n              `${befText}) included an annotation along with other text ` +\n              `for parenthetical unit ${retUnit.csCode_}`));\n          }\n          // Otherwise put the annotation after the unit string and note\n          // the misplacement.\n          pStr += annoRet[0];\n          this.retMsg_.push(`The annotation ${annoRet[0]} before the unit ` +\n            `code is invalid.\\n` + this.vcMsgStart_ + pStr + this.vcMsgEnd_);\n        }\n        // else the text before the parentheses is neither a number nor\n        // an annotation.  If suggestions were NOT requested, record an\n        // error.\n        else if (!this.suggestions_) {\n          this.retMsg_.push(`${befText} preceding the unit code ${pStr} ` +\n            `is invalid.  Unable to make a substitution.`);\n          endProcessing = true;\n        }\n        // otherwise try for suggestions\n        else {\n          let suggestStat = this._getSuggestions(befText);\n          endProcessing =  (suggestStat !== 'succeeded');\n\n        } // end if a brace was found or, if not, suggestions were not or\n          // were requested\n      } // end if text preceding the parentheses was not a number\n    } // end if there was text before the parentheses\n\n    // Process any text after the parentheses\n    if (aftText) {\n      // if it's an annotation, get it and add it to the pStr\n      if (aftText.indexOf(this.braceFlag_) >= 0) {\n        let annoRet = this._getAnnoText(aftText, origString);\n        // if we found not only an annotation, but text before or after\n        // the annotation (remembering that this is all after the\n        // parentheses) throw an error - because we don't know what\n        // to do with it.  Could it be missing an operator?\n        if (annoRet[1] || annoRet[2]) {\n          throw (new Error(`Text found after the parentheses (` +\n            `${aftText}) included an annotation along with other text ` +\n            `for parenthetical unit ${retUnit.csCode_}`));\n        }\n        // Otherwise put the annotation after the unit string - no message\n        // needed.\n        pStr += annoRet[0];\n      }\n      // Otherwise check to see if it's an exponent.  If so, warn the\n      // user that it's not valid - but try it anyway\n      else {\n\n        if (intUtils_.isNumericString(aftText)) {\n          pStr += aftText;\n          retUnit = retUnit.power(Number(aftText));\n          this.retMsg_.push(`An exponent (${aftText}) following a parenthesis ` +\n            `is invalid as of revision 1.9 of the UCUM Specification.\\n  ` +\n            this.vcMsgStart_ + pStr + this.vcMsgEnd_);\n        }\n        // else the text after the parentheses is neither a number nor\n        // an annotation.  If suggestions were NOT requested, record an\n        // error.\n        else if (!this.suggestions_) {\n          this.retMsg_.push(`Text ${aftText} following the unit code ${pStr} ` +\n            `is invalid.  Unable to make a substitution.`);\n          endProcessing = true;\n        }\n        // otherwise try for suggestions\n        else {\n          let suggestStat = this._getSuggestions(befText);\n          endProcessing =  (suggestStat !== 'succeeded');\n        } // end if text following the parentheses not an exponent\n      } // end if text following the parentheses is not an annotation\n    } // end if there is text following the parentheses\n    if (!endProcessing) {\n      if (!retUnit) {\n        retUnit = new Unit({\n          'csCode_': pStr,\n          'magnitude_': 1,\n          'name_': pStr});\n      }\n      else if (intUtils_.isIntegerUnit(retUnit)) {\n        retUnit = new Unit({'csCode_': retUnit,\n        'magnitude_': retUnit,\n        'name_': retUnit});\n      }\n      else {\n        retUnit.csCode_ = pStr;\n      }\n    }\n    return [retUnit, endProcessing];\n  } // end _getParensUnit\n\n  /**\n   * Takes a unit string containing annotation flags and returns the\n   * annotation they represent.  This also returns any text found before\n   * the annotation and any found after the annotation.\n   *\n   * This should only be called from within this class (or by test code).\n   * NEEDS FIX in next branch to handle string with multiple annotations.\n   *\n   * @param pStr the string being parsed\n   * @param origString the original string being parsed; used in error msg\n   *  thrown for an invalid index to the annotations array\n   * @returns\n   *  an array containing\n   *    the annotation for the pStr;\n   *    any text found before the annotation; and\n   *    any text found after the annotation.\n   *\n   * the this.retMsg_ array will be updated with any user messages\n   *   (informational, error or warning) generated by this or called methods\n   * the this.annotations_ array is used as the source for the annotations text\n   * @throws an error if for a processing error - an invalid annotation index.\n   */\n  _getAnnoText(pStr, origString) {\n\n    // if the starting braces flag is not at index 0, get the starting\n    // text and the adjust the pStr to omit it.\n    let asIdx = pStr.indexOf(this.braceFlag_);\n    let startText = (asIdx > 0) ? pStr.substring(0, asIdx) : null;\n    if (asIdx !== 0) {\n      pStr = pStr.substr(asIdx);\n    }\n\n    // Get the location of the end flag and, if text follows it, get the text\n    let aeIdx = pStr.indexOf(this.braceFlag_, 1);\n    let endText = ((aeIdx + this.bFlagLen_) < pStr.length) ?\n      pStr.substr(aeIdx + this.bFlagLen_) : null;\n\n    // Get the index of the annotation in this.annotations_.\n    // Check it to make sure it's valid, and if not, throw an error\n    let idx = pStr.substring(this.bFlagLen_, aeIdx);\n    let idxNum = Number(idx);\n    if (!intUtils_.isNumericString(idx) || idxNum >= this.annotations_.length) {\n      throw (new Error(`Processing Error - invalid annotation index ${idx} found ` +\n        `in ${pStr} that was created from ${origString}`));\n    }\n\n    // Replace the flags and annotation index with the annotation expression\n    pStr = this.annotations_[idxNum];\n    return [pStr, startText, endText];\n  } // end _getAnnoText\n\n\n  /**\n   * Takes a unit string and looks for suggested units.  This should be\n   * called for unit strings that cannot be resolved to unit codes.  The\n   * string is searched for in the synonyms table found in the UnitTables\n   * class.  That table includes all synonyms and unit names for the units\n   * in the unit data table.\n   *\n   * @param pStr the string being parsed\n   * @returns an object that contains an element named 'status', whose\n   *  value indicates the status of the request:\n   *   'succeeded' indicates that synonyms were found;\n   *   'failed' indicates that no synonyms were found; or\n   *   'error' which indicates that an error occurred\n   *\n   * the this.retMsg_ array will be updated with a message indicating whether\n   *  or not synonyms/suggestions  were found\n   * the this.suggestions_ array will be updated with a hash (added to the\n   *   array if it already contains others) that contains three elements:\n   *   'msg' which is a message indicating what unit expression the\n   *      suggestions are for;\n   *   'invalidUnit' which is the unit expression the suggestions are for; and\n   *   'units' which is an array of data for each suggested unit found.\n   *       Each array will contain the unit code, the unit name and the\n   *       unit guidance (if any).\n   */\n  _getSuggestions(pStr) {\n\n    let retObj = intUtils_.getSynonyms(pStr);\n    if (retObj['status'] === 'succeeded') {\n      let suggSet = {} ;\n      suggSet['msg'] = `${pStr} is not a valid UCUM code.  We found possible ` +\n                       `units that might be what was meant:`;\n      suggSet['invalidUnit'] = pStr ;\n      let synLen = retObj['units'].length ;\n      suggSet['units'] = [] ;\n      for (let s = 0; s < synLen; s++) {\n        let unit = retObj['units'][s];\n        let unitArray = [unit['code'], unit['name'], unit['guidance']];\n\n        suggSet['units'].push(unitArray) ;\n      }\n      this.suggestions_.push(suggSet);\n    }\n    else {\n      this.retMsg_.push(`${pStr} is not a valid UCUM code.  No alternatives ` +\n                  `were found.`);\n    }\n    return retObj['status'] ;\n  } // end getSuggestions\n\n\n  /**\n   * Creates a unit object from a string defining one unit.  The string\n   * should consist of a unit code for a unit already defined (base or\n   * otherwise).  It may include a prefix and an exponent, e.g., cm2\n   * (centimeter squared).  This should only be called from within this\n   * class (or by test code).\n   *\n   * @params uCode the string defining the unit\n   * @param origString the original string to be parsed; used to provide\n   *  context for messages\n   * @returns\n   *  an array containing:\n   *    a unit object, or null if there were problems creating the unit; and\n   *    the origString passed in, which may be updated if a unit name was\n   *    translated to a unit code.\n   *\n   *  the this.retMsg_ array will be updated with any user messages\n   *    (informational, error or warning) generated by this or called methods\n   *  the this.suggestions_ array will be populated if no unit (with or without\n   *    substitutions) could be found and suggestions were requested\n   */\n  _makeUnit(uCode, origString) {\n\n    // First try the code just as is, without looking for annotations,\n    // prefixes, exponents, or elephants.\n    let retUnit = this.utabs_.getUnitByCode(uCode);\n    if (retUnit) {\n      retUnit = retUnit.clone();\n    }\n\n    // If we found it, we're done.  No need to parse for those elephants (or\n    // other stuff).\n    else if (uCode.indexOf(this.braceFlag_) >= 0) {\n      let getAnnoRet = this._getUnitWithAnnotation(uCode, origString);\n      retUnit = getAnnoRet[0];\n      if (retUnit) {\n        origString = getAnnoRet[1];\n      }\n      // If a unit is not found, retUnit will be returned null and\n      // the this.retMsg_ array will contain a message describing the problem.\n      // If a unit is found, of course, all is good. So ... nothing left\n      // to see here, move along.\n    } // end if the uCode includes an annotation\n\n    else {\n\n      // So we didn't find a unit for the full uCode or for one with\n      // annotations.  Try looking for a unit that uses a carat (^)\n      // instead of an asterisk (*)\n\n      if (uCode.indexOf('^') > -1) {\n        let tryCode = uCode.replace('^', '*');\n        retUnit = this.utabs_.getUnitByCode(tryCode);\n        if (retUnit) {\n          retUnit = retUnit.clone();\n          retUnit.csCode_ = retUnit.csCode_.replace('*', '^');\n          retUnit.ciCode_ = retUnit.ciCode_.replace('*', '^');\n        }\n      }\n      // If that didn't work, check to see if it should have brackets\n      // around it (uCode = degF when it should be [degF]\n      if (!retUnit) {\n        let addBrackets = '[' + uCode + ']' ;\n        retUnit = this.utabs_.getUnitByCode(addBrackets);\n        if (retUnit) {\n          retUnit = retUnit.clone();\n          origString = origString.replace(uCode, addBrackets);\n          this.retMsg_.push(`${uCode} is not a valid unit expression, but ` +\n            `${addBrackets} is.\\n` + this.vcMsgStart_ +\n            `${addBrackets} (${retUnit.name_})${this.vcMsgEnd_}`);\n        } // end if we found the unit after adding brackets\n      } // end trying to add brackets\n\n      // If we didn't find it, try it as a name\n      if (!retUnit) {\n        let retUnitAry = this.utabs_.getUnitByName(uCode);\n        if (retUnitAry && retUnitAry.length > 0) {\n          retUnit = retUnitAry[0].clone();\n          let mString = 'The UCUM code for ' + uCode + ' is ' +\n            retUnit.csCode_ + '.\\n' + this.vcMsgStart_ +\n            retUnit.csCode_ + this.vcMsgEnd_;\n          let dupMsg = false;\n          for (let r = 0; r < this.retMsg_.length && !dupMsg; r++)\n            dupMsg = this.retMsg_[r] === mString;\n          if (!dupMsg)\n            this.retMsg_.push(mString);\n          let rStr = new RegExp('(^|[.\\/({])(' + uCode + ')($|[.\\/)}])');\n          let res = origString.match(rStr);\n          origString = origString.replace(rStr, res[1] + retUnit.csCode_ + res[3]);\n          uCode = retUnit.csCode_;\n        }\n      }\n\n      // If we still don't have a unit, try assuming a modifier (prefix and/or\n      // exponent) and look for a unit without the modifier\n      if (!retUnit) {\n\n        // Well, first see if it's one of the special units.  If so,\n        // replace the placeholder text with the actual unit string, keeping\n        // whatever text (probably a prefix) goes with the unit string.\n        let sUnit = null;\n        for (sUnit in Ucum.specUnits_) {\n          if (uCode.indexOf(Ucum.specUnits_[sUnit]) !== -1)\n            uCode = uCode.replace(Ucum.specUnits_[sUnit], sUnit);\n        }\n        retUnit = this.utabs_.getUnitByCode(uCode);\n        if (retUnit)\n          retUnit = retUnit.clone();\n      }\n      if (!retUnit) {\n\n        let origCode = uCode;\n        let origUnit = null;\n        let exp = null;\n        let pfxCode = null;\n        let pfxObj = null;\n        let pfxVal = null;\n        let pfxExp = null;\n\n        // Look first for an exponent.  If we got one, separate it out and\n        // try to get the unit again\n        let codeAndExp = this._isCodeWithExponent(uCode);\n        if (codeAndExp) {\n          uCode = codeAndExp[0];\n          exp = codeAndExp[1];\n          origUnit = this.utabs_.getUnitByCode(uCode);\n        }\n\n\n        // If we still don't have a unit, separate out the prefix, if any,\n        // and try without it.\n        if (!origUnit) {\n          // Try for a single character prefix first.\n          pfxCode = uCode.charAt(0);\n          pfxObj = this.pfxTabs_.getPrefixByCode(pfxCode);\n\n          // if we got a prefix, get its info and remove it from the unit code\n          if (pfxObj) {\n            pfxVal = pfxObj.getValue();\n            pfxExp = pfxObj.getExp();\n            let pCodeLen = pfxCode.length;\n            uCode = uCode.substr(pCodeLen);\n\n            // try again for the unit\n            origUnit = this.utabs_.getUnitByCode(uCode);\n\n            // If we still don't have a unit, see if the prefix could be the\n            // two character \"da\" (deka) prefix.  That's the only prefix with\n            // two characters, and without this check it's interpreted as \"d\"\n            // (deci) and the \"a\" is considered part of the unit code.\n\n            if (!origUnit && pfxCode == 'd' && uCode.substr(0, 1) == 'a') {\n              pfxCode = 'da';\n              pfxObj = this.pfxTabs_.getPrefixByCode(pfxCode);\n              pfxVal = pfxObj.getValue();\n              uCode = uCode.substr(1);\n\n              // try one more time for the unit\n              origUnit = this.utabs_.getUnitByCode(uCode);\n            }\n          } // end if we found a prefix\n        } // end if we didn't get a unit after removing an exponent\n\n        // If we still haven't found anything, we're done looking.\n        // (We tried with the full unit string, with the unit string\n        // without the exponent, the unit string without a prefix,\n        // common errors, etc. That's all we can try).\n        if (!origUnit) {\n          retUnit = null ;\n          // BUT if the user asked for suggestions, at least look for them\n          if (this.suggestions_) {\n            let suggestStat = this._getSuggestions(origCode);\n          }\n          else {\n            this.retMsg_.push(`${origCode} is not a valid UCUM code.`);\n          }\n        }\n        else {\n          // Otherwise we found a unit object.  Clone it and then apply the\n          // prefix and exponent, if any, to it.  And remove the guidance.\n          retUnit = origUnit.clone();\n          retUnit.guidance_ = '';\n          let theDim = retUnit.getProperty('dim_');\n          let theMag = retUnit.getProperty('magnitude_');\n          let theName = retUnit.getProperty('name_');\n          let theCiCode = retUnit.getProperty('ciCode_');\n          let thePrintSymbol = retUnit.getProperty('printSymbol_');\n          // If there is an exponent for the unit, apply it to the dimension\n          // and magnitude now\n          if (exp) {\n            exp = parseInt(exp);\n            let expMul = exp;\n            if (theDim)\n              theDim = theDim.mul(exp);\n            theMag = Math.pow(theMag, exp);\n            retUnit.assignVals({'magnitude_': theMag});\n\n            // If there is also a prefix, apply the exponent to the prefix.\n            if (pfxObj) {\n\n              // if the prefix base is 10 it will have an exponent.  Multiply\n              // the current prefix exponent by the exponent for the unit\n              // we're working with.  Then raise the prefix value to the level\n              // defined by the exponent.\n              if (pfxExp) {\n                expMul *= pfxObj.getExp();\n                pfxVal = Math.pow(10, expMul);\n              }\n              // If the prefix base is not 10, it won't have an exponent.\n              // At the moment I don't see any units using the prefixes\n              // that aren't base 10.   But if we get one the prefix value\n              // will be applied to the magnitude (below) if the unit does\n              // not have a conversion function, and to the conversion prefix\n              // if it does.\n            } // end if there's a prefix as well as the exponent\n          } // end if there's an exponent\n\n          // Now apply the prefix, if there is one, to the conversion\n          // prefix or the magnitude\n          if (pfxObj) {\n            if (retUnit.cnv_) {\n              retUnit.assignVals({'cnvPfx_': pfxVal});\n            }\n            else {\n              theMag *= pfxVal;\n              retUnit.assignVals({'magnitude_': theMag})\n            }\n          }\n          // if we have a prefix and/or an exponent, add them to the unit\n          // attributes - name, csCode, ciCode and print symbol\n          let theCode = retUnit.csCode_;\n          if (pfxObj) {\n            theName = pfxObj.getName() + theName;\n            theCode = pfxCode + theCode;\n            theCiCode = pfxObj.getCiCode() + theCiCode;\n            thePrintSymbol = pfxObj.getPrintSymbol() + thePrintSymbol;\n            retUnit.assignVals({\n              'name_': theName,\n              'csCode_': theCode,\n              'ciCode_': theCiCode,\n              'printSymbol_': thePrintSymbol\n            });\n          }\n          if (exp) {\n            let expStr = exp.toString();\n            retUnit.assignVals({\n              'name_': theName + '<sup>' + expStr + '</sup>',\n              'csCode_': theCode + expStr,\n              'ciCode_': theCiCode + expStr,\n              'printSymbol_': thePrintSymbol + '<sup>' + expStr + '</sup>'\n            });\n          }\n        } // end if an original unit was found (without prefix and/or exponent)\n\n      } // end if we didn't get a unit for the full unit code (w/out modifiers)\n    } // end if we didn't find the unit on the first try, before parsing\n    return [retUnit, origString];\n  } // end _makeUnit\n\n\n  /**\n   * This method handles unit creation when an annotation is included\n   * in the unit string.  This basically isolates and retrieves the\n   * annotation and then calls _makeUnit to try to get a unit from\n   * any text that precedes or follows the annotation.\n   *\n   * @param uCode the string defining the unit\n   * @param origString the original full string submitted to parseString\n   * @returns the unit object found, or null if one could not be found\n   *\n   * the this.retMsg_ array will be updated with any user messages\n   *   (informational, error or warning) generated by this or called methods\n   */\n  _getUnitWithAnnotation(uCode, origString) {\n\n    let retUnit = null;\n\n    // Get the annotation and anything that precedes or follows it.\n    let annoRet = this._getAnnoText(uCode, origString);\n    let annoText = annoRet[0];\n    let befAnnoText = annoRet[1];\n    let aftAnnoText = annoRet[2];\n\n    // Add the warning about annotations - just once.\n\n    if (this.bracesMsg_ && this.retMsg_.indexOf(this.bracesMsg_) === -1)\n      this.retMsg_.push(this.bracesMsg_);\n\n    // If there's no text before or after the annotation, it's probably\n    // something that should be interpreted as a 1, e.g., {KCT'U}.\n    // HOWEVER, it could also be a case where someone used braces instead\n    // of brackets, e.g., {degF} instead of [degF].  Check for that before\n    // we assume it should be a 1.\n    let msgLen = this.retMsg_.length;\n    if (!befAnnoText && !aftAnnoText) {\n      let tryBrackets = '[' + annoText.substring(1, annoText.length - 1) + ']';\n      let mkUnitRet = this._makeUnit(tryBrackets, origString);\n\n      // If we got back a unit, assign it to the returned unit, and add\n      // a message to advise the user that brackets should enclose the code\n      if (mkUnitRet[0]) {\n        retUnit = mkUnitRet[0];\n        origString = origString.replace(annoText, tryBrackets);\n        this.retMsg_.push(`${annoText} is not a valid unit expression, but ` +\n          `${tryBrackets} is.\\n` + this.vcMsgStart_ +\n          `${tryBrackets} (${retUnit.name_})${this.vcMsgEnd_}`);\n      }\n      // Otherwise assume that this should be interpreted as a 1\n      else {\n        // remove error message generated for trybrackets\n        if (this.retMsg_.length > msgLen) {\n          this.retMsg_.pop();\n        }\n        uCode = 1;\n        retUnit = 1;\n      }\n    } // end if it's only an annotation\n\n    else {\n      // if there's text before and no text after, assume the text before\n      // the annotation is the unit code (with an annotation following it).\n      // Call _makeUnit for the text before the annotation.\n      if (befAnnoText && !aftAnnoText) {\n        // make sure that what's before the annoText is not a number, e.g.,\n        // /100{cells}.  But f it is a number, just set the return unit to\n        // the number.\n        if (intUtils_.isIntegerUnit(befAnnoText)) {\n          retUnit = befAnnoText ;\n        }\n        // Otherwise try to find a unit\n        else {\n          let mkUnitRet = this._makeUnit(befAnnoText, origString);\n\n          // if a unit was returned\n          if (mkUnitRet[0]) {\n            retUnit = mkUnitRet[0];\n            retUnit.csCode_ += annoText;\n            origString = mkUnitRet[1];\n          }\n          // Otherwise add a not found message\n          else {\n            this.retMsg_.push(`Unable to find a unit for ${befAnnoText} that ` +\n              `precedes the annotation ${annoText}.`);\n          }\n        }\n      }\n      // else if there's only text after the annotation, try for a unit\n      // from the after text and assume the user put the annotation in\n      // the wrong place (and tell them)\n      else if (!befAnnoText && aftAnnoText) {\n\n        // Again, test for a number and if it is a number, set the return\n        // unit to the number.\n        if (intUtils_.isIntegerUnit(aftAnnoText)) {\n          retUnit = aftAnnoText + annoText ;\n          this.retMsg_.push(`The annotation ${annoText} before the `\n            `${aftAnnoText} is invalid.\\n` + this.vcMsgStart_ + retUnit +\n            this.vcMsgEnd_);\n        }\n        else {\n          let mkUnitRet = this._makeUnit(aftAnnoText, origString);\n          if (mkUnitRet[0]) {\n            retUnit = mkUnitRet[0];\n            retUnit.csCode_ += annoText;\n            origString = retUnit.csCode_;\n            this.retMsg_.push(`The annotation ${annoText} before the unit ` +\n              `code is invalid.\\n` + this.vcMsgStart_ + retUnit.csCode_ +\n              this.vcMsgEnd_);\n          }\n          // Otherwise add a not found message\n          else {\n            this.retMsg_.push(`Unable to find a unit for ${befAnnoText} that ` +\n              `follows the annotation ${annoText}.`);\n          }\n        }\n      }\n      // else it's got text before AND after the annotation.  Now what?\n      // For now this is an error.  This may be a case of a missing\n      // operator but that is not handled yet.\n      else {\n        this.retMsg_.push(`Unable to find a unit for ${befAnnoText}${annoText}` +\n          `${aftAnnoText}.\\nWe are not sure how to interpret text both before ` +\n          `and after the annotation.  Sorry`);\n      }\n    } // else if there's text before/and or after the annotation\n\n    return [retUnit , origString];\n\n  } // end _getUnitWithAnnotations\n\n\n  /**\n   * Performs unit arithmetic for the units in the units array.  That array\n   * contains units/numbers and the operators (division or multiplication) to\n   * be performed on each unit/unit or unit/number pair in the array.  This\n   * should only be called from within this class (or by test code).\n   *\n   * @params uArray the array that contains the units, numbers and operators\n   *  derived from the unit string passed in to parseString\n   * @param origString the original string to be parsed; used to provide\n   *  context for messages\n   *\n   * @returns a single unit object that is the result of the unit arithmetic\n   *\n   * the this.retMsg_ array will be updated with any user messages\n   *   (informational, error or warning) generated by this or called methods\n   */\n  _performUnitArithmetic(uArray, origString) {\n\n    let finalUnit = uArray[0]['un'];\n    if (intUtils_.isIntegerUnit(finalUnit)) {\n      finalUnit = new Unit({'csCode_' : finalUnit,\n        'magnitude_' : Number(finalUnit),\n        'name_' : finalUnit}) ;\n    }\n    let uLen = uArray.length ;\n    let endProcessing = false ;\n    // Perform the arithmetic for the units, starting with the first 2 units.\n    // We only need to do the arithmetic if we have more than one unit.\n    for (let u2 = 1; (u2 < uLen) && !endProcessing; u2++) {\n      let nextUnit = uArray[u2]['un'];\n      if (intUtils_.isIntegerUnit(nextUnit)) {\n        nextUnit = new Unit({'csCode_' : nextUnit ,\n          'magnitude_' : Number(nextUnit),\n          'name_': nextUnit});\n      }\n      if (nextUnit === null ||\n          ((typeof nextUnit !== 'number') && (!nextUnit.getProperty))) {\n        let msgString = `Unit string (${origString}) contains unrecognized ` +\n                        'element' ;\n        if (nextUnit) {\n          msgString += ` (${this.openEmph_}${nextUnit.toString()}` +\n                       `${this.closeEmph_})`;\n        }\n        msgString += '; could not parse full string.  Sorry';\n        this.retMsg_.push(msgString);\n        endProcessing = true;\n      }\n      else {\n        try {\n          // Is the operation division?\n          let thisOp = uArray[u2]['op'];\n          let isDiv = thisOp === '/';\n\n          // Perform the operation.  Both the finalUnit and nextUnit\n          // are unit objects.\n          isDiv ? finalUnit = finalUnit.divide(nextUnit) :\n                  finalUnit = finalUnit.multiplyThese(nextUnit);\n        }\n        catch (err) {\n          this.retMsg_.unshift(err.message) ;\n          endProcessing = true ;\n          finalUnit = null ;\n        }\n      } // end if we have another valid unit/number to process\n    } // end do for each unit after the first one\n    return finalUnit ;\n  }  // end _performUnitArithmetic\n\n\n  /**\n   * This tests a string to see if it starts with characters and ends with\n   * digits.  This is used to test for an exponent on a UCUM code (or what\n   * we think might be a UCUM code).  This is broken out to a separate\n   * function so that the regular expression can be verified to provide the\n   * results we expect, in case someone changes it.  (Per Paul Lynch)\n   * See \"Test _isCodeWithExponent method\" in testUnitString.spec.js\n   *\n   * This particular regex has been tweaked several times.  This one\n   * works with the following test strings:\n   * \"m[H2O]-21 gives [\"m[H2O]-21\", \"m[H2O]\", \"-21\"]\n   * \"m[H2O]+21 gives [\"m[H2O]+21\", \"m[H2O]\", \"+21\"]\n   * \"m[H2O]21 gives [\"m[H2O]-21\", \"m[H2O]\", \"21\"]\n   * \"s2\" gives [\"s2\", \"s, \"2\"]\n   * \"kg\" gives null\n   * \"m[H2O]\" gives null\n   * \"m[H2O]23X\" gives null\n   *\n   * @params uCode the code being tested\n   * @returns an array containing: (1) the code without the exponent (or\n   *  trailing number); and (2) the exponent/trailing number.  Returns null\n   *  if there is no trailing number or something follows the trailing\n   *  number, or if the first part is not characters.\n   */\n  _isCodeWithExponent(uCode) {\n\n    let ret = [] ;\n    let res = uCode.match(/(^[^\\-\\+]+?)([\\-\\+\\d]+)$/);\n\n    // If we got a return with an exponent, separate the exponent from the\n    // unit and return both (as separate values)\n    if (res && res[2] && res[2] !== \"\") {\n      ret.push(res[1]);\n      ret.push(res[2]);\n    } // end if we got an exponent\n    else {\n      ret = null ;\n    }\n    return ret ;\n  } // end _isCodeWithExponent\n\n} // end class UnitString\n\n\n/**\n *  This function exists ONLY until the original UnitString constructor\n *  is called for the first time.  It's defined here in case getInstance\n *  is called before the constructor.   This calls the constructor.\n *\n *  The constructor redefines the getInstance function to return the\n *  singleton UnitString object.  This is based on the UnitTables singleton\n *  implementation; see more detail in the UnitTables constructor description.\n *\n *  @return the singleton UnitString object.\n */\nUnitString.getInstance = function(){\n  return new UnitString();\n} ;\n\n/*\n// Perform the first request for the object, to set the getInstance method.\nUnitString.getInstance();\n\n*/\n","/**\n * This class manages Hashtables that provide references to\n * defined units.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\n\nvar Ucum = require('./config.js').Ucum;\n\nclass UnitTablesFactory {\n\n  /**\n   * Constructor.  This creates the empty unit tables (hashes) once. After the\n   * tables are created, it redefines this constructor to throw an error\n   * stating that the constructor is no longer available and that the\n   * getInstance function must be used.   Here's a description of the first\n   * and then all subsequent calls to this constructor.\n   *\n   * First call to constructor:\n   * 1. creates  OBJECT1\n   * 2. initializes attributes of OBJECT1\n   * 3. stores reference to OBJECT1.prototype in holdthis local variable\n   * 4. redefines OBJECT1 as a function that throws an error\n   * 5. defines the getInstance function (which is also defined outside of\n   *    the class definition - see below).\n   *\n   * All subsequent calls to constructor:\n   * 1. throw error message referring to getInstance\n   * 2. call getInstance, returns this - which is OBJECT1.\n   */\n  constructor() {\n\n    /**\n     * Tracks units by name\n     * @type hash - key is the name;\n     *              value is an array of references to the Unit objects\n     *              with the name.  More than one unit may have the same\n     *              name, e.g., \"second\", which is shared by the base unit\n     *              with the code = \"s\" and the unit with code = \"'\".\n     */\n    this.unitNames_ = {};\n\n    /**\n     * Tracks units by code using case-sensitive version.\n     *\n     * @type hash - key is the code;\n     *              value is the reference to the Unit object.  Codes must\n     *              be unique.\n     */\n    this.unitCodes_ = {};\n\n    /**\n     * Keeps track of the order in which units are defined.  The order is\n     * important because unit definitions build on previous definitions.\n     *\n     * @type {Array}\n     */\n    this.codeOrder_ = [] ;\n\n    /**\n     * Tracks units by unit strings, e.g., cm-1\n     *\n     * @type hash - key is the unit string\n     *              value is an array of unit objects with that ciUnitString.\n     */\n    this.unitStrings_ = {};\n\n    /**\n     * Tracks units by Dimension vector\n     *\n     * @type hash - key is the dimension vector (not the object, just the\n     *              vector);\n     *              value is an array of references to the Unit objects\n     *              with that vector.  More than one unit may have the same\n     *              unit vector, and this can be used to provide a list\n     *              of commensurable units.\n     */\n    this.unitDimensions_ = {};\n\n    /**\n     * Maps synonyms to units.   Not built until first requested.\n     *\n     * @type hash - key is the synonym\n     *              value is an array of references to Unit objects that\n     *              include that synonym.\n     */\n     this.unitSynonyms_ = {};\n\n    /*\n     * Holds onto the index of the index of the dimension vector flag for\n     * the base mass unit (gram).  This is set when the base unit (gram) is\n     * created, and is stored here so that it doesn't have to be found\n     * over and over again to try to determine whether or not a unit is\n     * mass-based (for mole<->mass conversions)\n     *\n     * @type integer\n     */\n    this.massDimIndex_ = 0;\n  }\n\n\n  /**\n   * Provides the number of unit objects written to the tables, using the\n   * codes table since codes must be unique.\n   *\n   * @returns count of the number of unit objects in the unitCodes_ table.\n   */\n  unitsCount() {\n    return Object.keys(this.unitCodes_).length ;\n  }\n\n\n  /**\n   * Adds a Unit object to the tables.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws passes on an error if one is thrown by the called functions for\n   *  a problem with the unit code or unit name\n   */\n  addUnit(theUnit) {\n\n    let uName = theUnit['name_'] ;\n    if (uName) {\n      this.addUnitName(theUnit);\n    }\n\n    this.addUnitCode(theUnit);\n    this.addUnitString(theUnit);\n\n    try {\n      if (theUnit['dim_'].getProperty('dimVec_'))\n        this.addUnitDimension(theUnit);\n    }\n    catch(err){\n      // do nothing - throws error if the property is null\n      // and that's OK here.\n    }\n\n  } // end addUnit\n\n\n  /**\n   * Adds a Unit object to the unitNames_ table.  More than one unit\n   * can have the same name, e.g., the two units with the name \"second\",\n   * where the code for one of them is 's' and the code for the other is\n   * \"'\".  Because of this, an array of unit objects is stored for the\n   * name.  In most cases it will be an array of one object, but this\n   * clarifies that there may be more than one.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws an error if the unit has no name\n   */\n  addUnitName(theUnit) {\n\n    let uName = theUnit['name_'];\n\n    if (uName) {\n      if (this.unitNames_[uName])\n        this.unitNames_[uName].push(theUnit);\n      else\n        this.unitNames_[uName] = [theUnit];\n    }\n    else\n      throw(new Error('UnitTables.addUnitName called for a unit with no name.  ' +\n            `Unit code = ${theUnit['csCode_']}.`));\n\n  } // end addUnitName\n\n\n  /**\n   * Adds a Unit object to the unitCodes_, unitUcCodes_, unitLcCodes_ and\n   * codeOrder_ tables.  This also sets the mass dimension index when the\n   * base mass unit (gram) is read.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws an error if the unitCodes_ table already contains a unit with\n   *  the code\n   */\n  addUnitCode(theUnit) {\n\n    let uCode = theUnit['csCode_'];\n    if (uCode) {\n\n      if (this.unitCodes_[uCode])\n        throw(new Error(`UnitTables.addUnitCode called, already contains entry for ` +\n              `unit with code = ${uCode}`));\n      else {\n        this.unitCodes_[uCode] = theUnit;\n        this.codeOrder_.push(uCode);\n        if (uCode == 'g') {\n          let dimVec = theUnit.dim_.dimVec_;\n          let d = 0;\n          for (; d < dimVec.length && dimVec[d] < 1; d++) ;\n          this.massDimIndex_ = d;\n        }\n      }\n    }\n    else\n      throw(new Error('UnitTables.addUnitCode called for unit that has ' +\n                      'no code.')) ;\n\n  } // end addUnitCode\n\n\n  /**\n   * Adds a unit object to the unitStrings_ table.  More than one unit\n   * can have the same string, so an array of unit objects is stored\n   * for the string.  The unit string is the string that creates a non-base\n   * unit, e.g., a Newton has a unit code of N, a name of Newton, and a\n   * unitString of kg.m/s2.\n   *\n   * If the unit has no string, nothing is stored and no error is reported.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   */\n  addUnitString(theUnit) {\n\n    let uString = null;\n    if (Ucum.caseSensitive_ == true)\n      uString = theUnit['csUnitString_'];\n    else\n      uString = theUnit['ciUnitString_'];\n\n    if (uString) {\n      let uEntry = {mag: theUnit['baseFactorStr_'], unit: theUnit};\n      if (this.unitStrings_[uString])\n        this.unitStrings_[uString].push(uEntry);\n      else\n        this.unitStrings_[uString] = [uEntry];\n    }\n  } // end addUnitString\n\n\n  /**\n   * Adds a Unit object to the unitDimensions_ table.  More than one unit\n   * can have the same dimension (commensurable units have the same dimension).\n   * Because of this, an array of unit objects is stored for the\n   * dimension.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws an error if the unit has no dimension\n   */\n  addUnitDimension(theUnit) {\n\n    let uDim = theUnit['dim_'].getProperty('dimVec_');\n\n    if (uDim) {\n      if (this.unitDimensions_[uDim])\n        this.unitDimensions_[uDim].push(theUnit);\n      else\n        this.unitDimensions_[uDim] = [theUnit];\n    }\n    else\n      throw(new Error('UnitTables.addUnitDimension called for a unit with no dimension.  ' +\n          `Unit code = ${theUnit['csCode_']}.`));\n\n  } // end addUnitDimension\n\n\n  /**\n   * Builds the unitSynonyms_ table. This is called the first time the\n   * getUnitsBySynonym method is called.  The table/hash contains each word\n   * (once) from each synonym as well as each word from each unit name.\n   *\n   * Hash keys are the words.  Hash values are an array of unit codes for\n   * each unit that has that word in its synonyms or name.\n   *\n   * @returns nothing\n   */\n  buildUnitSynonyms() {\n\n    for (let code in this.unitCodes_) {\n      let theUnit = this.unitCodes_[code];\n      let uSyns = theUnit.synonyms_ ;\n\n      // If the current unit has synonyms, process each synonym (often multiples)\n      if (uSyns) {\n        let synsAry = uSyns.split(';');\n        if (synsAry[0] !== '') {\n          let aLen = synsAry.length;\n          for (let a = 0; a < aLen; a++) {\n            let theSyn = synsAry[a].trim();\n\n            // call addSynonymCodes to process each word in the\n            // synonym, e.g., \"British fluid ounces\"\n            this.addSynonymCodes(code, theSyn) ;\n          } // end do for each synonym\n        } // end if the current unit has a non-null synonym attribute\n      } // end if the unit has any synonyms\n\n      // Now call addSynonymCodes to process each word in the unit's name\n      this.addSynonymCodes(code, theUnit.name_) ;\n    } // end do for each unit\n   } // end buildUnitSynonyms\n\n\n  /**\n   * Adds unit code entries to the synonyms table for a string containing\n   * one or more words to be considered as synonyms.\n   *\n   * @param theCode the unit code to be connected to the synonyms\n   * @param theSynonyms a string containing one or more words to be\n   *  considered synonyms (and thus to be added to the unitSynonyms hash).\n   */\n  addSynonymCodes(theCode, theSynonyms) {\n\n    let words = theSynonyms.split(' ');\n    let wLen = words.length;\n\n    for (let w = 0; w < wLen; w++) {\n      let word = words[w];\n\n      // if there is already a synonyms entry for the word,\n      // get the array of unit codes currently assigned to\n      // the word and add the code for the current word to\n      // the synonyms array if it's not already there.\n      if (this.unitSynonyms_[word]) {\n        let synCodes = this.unitSynonyms_[word];\n        if (synCodes.indexOf(theCode) === -1) {\n          this.unitSynonyms_[word].push(theCode);\n        }\n      }\n      // else there are no synonyms entry for the word.  Create a\n      // synonyms array for the word, setting it to contain the unit code.\n      else {\n        this.unitSynonyms_[word] = [theCode];\n      }\n    } // end do for each word in the synonyms being processed\n\n  } // end addSynonymCodes\n\n\n  /**\n   *  Returns a unit object with a case-sensitive code matching the\n   *  uCode parameter, or null if no unit is found with that code.\n   *\n   *  @param uCode the code of the unit to be returned\n   *  @returns the unit object or null if it is not found\n   */\n  getUnitByCode(uCode) {\n    let retUnit = null ;\n    if (uCode) {\n      retUnit = this.unitCodes_[uCode];\n    }\n    return retUnit ;\n  }\n\n\n  /**\n   *  Returns a array of unit objects based on the unit's name.  Usually this\n   *  will be an array of one, but there may be more, since unit names are\n   *  not necessarily unique.\n   *\n   *  @param uName the name of the unit to be returned.  If more than one\n   *  unit has the same name and you only want one specific unit, append the\n   *  csCode of the unit you want to the end of the name, separated by the\n   *  Ucum.codeSep_ value, e.g., inch - [in_i] vs. inch - [in_us].\n   *  @returns null if no unit was found for the specified name OR an array of\n   *  unit objects with the specified name.  Normally this will be an array\n   *  of one object.\n   *  @throws an error if no name is provided to search on\n   */\n  getUnitByName(uName) {\n\n    if (uName === null || uName === undefined) {\n      throw (new Error('Unable to find unit by name because no name was provided.'));\n    }\n    let sepPos = uName.indexOf(Ucum.codeSep_);\n    let uCode = null;\n    if (sepPos >= 1) {\n      uCode = uName.substr(sepPos + Ucum.codeSep_.length);\n      uName = uName.substr(0, sepPos);\n    }\n    let retUnits = this.unitNames_[uName] ;\n    if (retUnits) {\n      let uLen = retUnits.length ;\n\n      if (uCode && uLen > 1) {\n        let i = 0;\n        for (; retUnits[i].csCode_ !== uCode && i < uLen; i++);\n        if (i < uLen)\n          retUnits = [retUnits[i]];\n        else {\n          retUnits = null;\n        }\n      } // end if we need to find both a name and a code\n    } // end if we got an array of units\n    return retUnits ;\n\n  } // end getUnitByName\n\n\n  /**\n   *  Returns an array of unit objects with the specified unit string.\n   *  The array may contain one or more unit reference objects.\n   *  Or none, if no units have a matching unit string (which is not\n   *  considered an error)\n   *\n   *  @param name the name of the unit to be returned\n   *  @returns the array of unit references or null if none were found\n   */\n  getUnitByString(uString) {\n    let retAry = null ;\n    if (uString) {\n      retAry = this.unitStrings_[uString] ;\n      if (retAry === undefined)\n        retAry = null;\n    }\n    return retAry ;\n  }\n\n\n  /**\n   *  Returns a array of unit objects based on the unit's dimension vector.\n   *\n   *  @param uName the dimension vector of the units to be returned.\n   *\n   *  @returns null if no unit was found for the specified vector OR an array of\n   *  one or more unit objects with the specified vector.\n   *  @throws an error if no vector is provided to search on\n   *  logs an error to the console if no unit is found\n   */\n  getUnitsByDimension(uDim) {\n\n    let unitsArray = null ;\n    if (uDim === null || uDim === undefined) {\n      throw (new Error('Unable to find unit by because no dimension ' +\n                       'vector was provided.'));\n    }\n\n    unitsArray = this.unitDimensions_[uDim] ;\n    if (unitsArray === undefined || unitsArray === null) {\n      console.log(`Unable to find unit with dimension = ${uDim}`);\n    }\n\n    return unitsArray ;\n\n  } // end getUnitsByDimension\n\n\n  /**\n   *  Returns a array of unit objects that include the specified synonym.\n   *\n   *  @param uSyn the synonym of the units to be returned.\n   *\n   *  @returns an object with two of the following three elements:\n   *   'status' will be error, failed or succeeded\n   *   'msg' will be included for returns with status = error or failed and\n   *     will explain why the request did not return any units\n   *   'units' any array of unit objects with the specified synonym will be\n   *     returned for requests with status = succeeded\n   */\n  getUnitBySynonym(uSyn) {\n\n    let retObj = {} ;\n    let unitsArray = [];\n\n    try {\n      if (uSyn === null || uSyn === undefined) {\n        retObj['status'] = 'error' ;\n        throw (new Error('Unable to find unit by synonym because no synonym ' +\n            'was provided.'));\n      }\n      // If this is the first request for a unit by synonym, build the hash map\n      if (Object.keys(this.unitSynonyms_).length === 0) {\n        this.buildUnitSynonyms();\n      }\n      let foundCodes = [];\n      foundCodes = this.unitSynonyms_[uSyn];\n      if (foundCodes) {\n        retObj['status'] = 'succeeded';\n        let fLen = foundCodes.length;\n        for (let f = 0; f < fLen; f++) {\n          unitsArray.push(this.unitCodes_[foundCodes[f]]);\n        }\n        retObj['units'] = unitsArray ;\n      }\n      if (unitsArray.length === 0) {\n        retObj['status'] = 'failed' ;\n        retObj['msg'] = `Unable to find any units with synonym = ${uSyn}`;\n      }\n    }\n    catch(err) {\n      retObj['msg'] = err.message ;\n    }\n    return retObj ;\n  } // end getUnitBySynonym\n\n\n  /**\n   * Gets a list of all unit names in the Unit tables\n   *\n   * @returns an array of the unit names\n   */\n  getAllUnitNames() {\n    return Object.keys(this.unitNames_);\n  } // end getAllUnitNames\n\n\n  /**\n   * Gets a list of all unit names in the tables.  Where more than one\n   * unit has the same name, the unit code, in parentheses, is appended\n   * to the end of the name.\n   *\n   * @returns {Array}\n   */\n  getUnitNamesList() {\n    let nameList = [];\n    let codes = Object.keys(this.unitCodes_);\n    codes.sort(this.compareCodes) ;\n    let uLen = codes.length;\n    for (let i = 0; i < uLen; i++) {\n      nameList[i] = codes[i] + Ucum.codeSep_ + this.unitCodes_[codes[i]].name_\n    } // end do for each code\n    return nameList ;\n  }\n\n\n  /*\n   * Returns the mass dimension index\n   * @returns this.massDimIndex_\n   */\n  getMassDimensionIndex() {\n    return this.massDimIndex_ ;\n  }\n\n  /**\n   * This provides a sort function for unit codes so that sorting ignores\n   * square brackets and case.\n   *\n   * @param a first value\n   * @param b second value\n   * @returns -1 if a is should fall before b; otherwise 1.\n   */\n  compareCodes(a, b) {\n    a = a.replace(/[\\[\\]]/g, '');\n    a = a.toLowerCase();\n    b = b.replace(/[\\[\\]]/g, '');\n    b = b.toLowerCase();\n    return (a < b) ? -1 : 1 ;\n  }\n\n\n  /**\n   * Gets a list of all unit codes in the Unit tables\n   *\n   * @returns an array of the unit names\n   */\n  getAllUnitCodes() {\n    return Object.keys(this.unitCodes_);\n  } // end getAllUnitNames\n\n\n  /**\n   * This is used to get all unit objects.  Currently it is used\n   * to get the objects to write to the json ucum definitions file\n   * that is used to provide prefix and unit definition objects for\n   * conversions and validations.\n   *\n   * @returns an array containing all unit objects, ordered by definition\n   * order\n   */\n  allUnitsByDef() {\n\n    let unitsList = [];\n    let uLen = this.codeOrder_.length ;\n    for (let u = 0; u < uLen; u++) {\n      unitsList.push(this.getUnitByCode(this.codeOrder_[u]));\n    }\n    return unitsList ;\n  } // end allUnitsByDef\n\n\n  /**\n   * This is used to get all unit objects, ordered by unit name.  Currently it\n   * is used to create a csv list of all units.\n   * @param sep separator character (or string) to be used to separate each\n   *  column in the output.  Optional, defaults to '|' if not specified.\n   *  (Used to use ; but the synonyms use that extensively).  Don't use a\n   *  comma or any other punctuation found in the output data.\n   * @returns a buffer containing all unit objects, ordered by name\n   * order\n   */\n  allUnitsByName(cols, sep) {\n    if (sep === undefined || sep === null)\n      sep = '|';\n    let unitBuff = '';\n    let unitsList = this.getAllUnitNames();\n    let uLen = unitsList.length;\n    let cLen = cols.length;\n    for (let i = 0; i < uLen; i++) {\n      let nameRecs = this.getUnitByName(unitsList[i]);\n      for (let u = 0; u < nameRecs.length; u++) {\n        let rec = nameRecs[u];\n        for (let c = 0; c < cLen; c++) {\n          if (c > 0)\n            unitBuff += sep;\n          if (cols[c] === 'dim_') {\n            if (rec.dim_ !== null && rec.dim_ !== undefined &&\n                rec.dim_.dimVec_ instanceof Array)\n              unitBuff += '[' + rec.dim_.dimVec_.join(',') + ']';\n            else\n              unitBuff += '';\n          }\n          else {\n            let cbuf = rec[cols[c]];\n            if (typeof cbuf === 'string')\n              unitBuff += cbuf.replace(/[\\n\\r]/g, ' ');\n            else\n              unitBuff += cbuf ;\n          }\n        } // end do for each column requested\n        unitBuff += '\\r\\n';\n      } // end do for each unit in the unit names array\n    }\n    return unitBuff ;\n  } // end allUnitsByName\n\n\n  /**\n   * This creates a list of all units in the tables.  It uses the byCode\n   * table, and uses the codeOrder_ array to determine the order in which\n   * the units are listed.\n   *\n   * @param doLong boolean indicating how much to output.  If true, all data\n   *  from the unit objects is included.   If false, only a few major values\n   *  are included.\n   * @param sep separator character (or string) to be used to separate each\n   *  column in the output.  Optional, defaults to '|' if not specified.\n   *  (Used to use ; but the synonyms use that extensively).\n   * @returns {string} buffer containing all the listings\n   */\n  printUnits(doLong, sep) {\n    if (doLong === undefined)\n      doLong = false ;\n    if (sep === undefined)\n      sep = '|';\n    let codeList = '';\n    let uLen = this.codeOrder_.length ;\n    let unitString = 'csCode' + sep  ;\n    if (doLong) {\n      unitString += 'ciCode' + sep ;\n    }\n    unitString += 'name' + sep ;\n    if (doLong)\n      unitString += 'isBase' + sep ;\n    unitString += 'magnitude' + sep + 'dimension' + sep + 'from unit(s)' + sep +\n                  'value' + sep + 'function' + sep ;\n    if (doLong)\n      unitString += 'property' + sep + 'printSymbol' + sep + 'synonyms' + sep +\n                    'source' + sep + 'class' + sep + 'isMetric' + sep +\n                    'variable' + sep + 'isSpecial' + sep + 'isAbitrary' + sep ;\n    unitString += 'comment';\n    codeList = unitString + '\\n' ;\n\n    for (let u = 0; u < uLen; u++) {\n      let curUnit = this.getUnitByCode(this.codeOrder_[u]);\n      unitString = this.codeOrder_[u] + sep ;\n      if (doLong) {\n        unitString += curUnit.getProperty('ciCode_') + sep ;\n      }\n      unitString += curUnit.getProperty('name_') + sep ;\n      if (doLong) {\n        if (curUnit.getProperty('isBase_'))\n          unitString += 'true' + sep ;\n        else\n          unitString += 'false' + sep ;\n      }\n      unitString += curUnit.getProperty('magnitude_')  + sep;\n      let curDim = curUnit.getProperty('dim_');\n      if (curDim) {\n        unitString += curDim.dimVec_ + sep ;\n      }\n      else {\n        unitString += 'null' + sep;\n      }\n      if (curUnit.csUnitString_)\n        unitString += curUnit.csUnitString_ + sep + curUnit.baseFactor_ + sep ;\n      else\n        unitString += 'null' + sep + 'null' + sep;\n\n      if (curUnit.cnv_)\n        unitString += curUnit.cnv_ + sep ;\n      else\n        unitString += 'null' + sep ;\n\n      if (doLong) {\n        unitString += curUnit.getProperty('property_') + sep +\n                      curUnit.getProperty('printSymbol_') + sep +\n                      curUnit.getProperty('synonyms_') + sep +\n                      curUnit.getProperty('source_') + sep +\n                      curUnit.getProperty('class_') + sep +\n                      curUnit.getProperty('isMetric_') + sep +\n                      curUnit.getProperty('variable_') + sep +\n                      curUnit.getProperty('isSpecial_') + sep +\n                      curUnit.getProperty('isArbitrary_') + sep ;\n      }\n      if (curUnit.defError_)\n        unitString += 'problem parsing this one, deferred to later.' ;\n      codeList += unitString + '\\n' ;\n    }\n    return codeList ;\n  }\n\n} // end UnitTablesFactory\n\n\n// Create a singleton instance and (to preserve the existing API) an object that\n// provides that instance via getInstance().\nvar unitTablesInstance = new UnitTablesFactory();\nexport const UnitTables = {\n  getInstance: function() {\n    return unitTablesInstance;\n  }\n}\n"]}