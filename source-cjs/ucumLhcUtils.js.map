{"version":3,"file":"ucumLhcUtils.js","names":["_ucumJsonDefs","require","intUtils_","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Ucum","UnitTables","UnitString","UcumLhcUtils","constructor","getInstance","unitsCount","ucumJsonDefs","loadJsonDefs","uStrParser_","useHTMLInMessages","use","undefined","useBraceMsgForEachString","validateUnitString","uStr","suggest","valConv","resp","getSpecifiedUnit","theUnit","retObj","csCode_","name_","guidance_","status","detectConversionType","fromUnit","toUnit","conversionType","isMolarUnit","isEquivalentUnit","convertUnitTo","fromUnitCode","fromVal","toUnitCode","options","molecularWeight","charge","returnObj","trim","push","_checkFromVal","parseResp","concat","convertType","convertFrom","Error","needMoleWeightMsg_","isMoleMassCommensurable","convertMolToMass","convertMassToMol","needEqWeightMsg_","needEqChargeMsg_","isEqMassCommensurable","convertEqToMass","convertMassToEq","convertEqToMol","convertMolToEq","err","message","convertToBaseUnits","inputUnitLookup","unit","msg","retMsg","length","isArbitrary_","unitToExp","dimVec","dim_","dimVec_","baseUnitString","dimVecIndexToBaseUnit","dimVecIndexToBaseUnit_","i","len","exp","retUnitLookup","retUnit","magnitude","e","toString","fromUnitIsSpecial","isSpecial_","responseObj","isNaN","isNumericString","checkSynonyms","theSyn","getSynonyms","uName","utab","getUnitByCode","parseString","console","log","unshift","origString","commensurablesList","fromName","commUnits","fromDim","getProperty","getUnitsByDimension","exports"],"sources":["../source/ucumLhcUtils.js"],"sourcesContent":["/**\n * This class provides a single point of access to the LHC UCUM utilities\n *\n * @author Lee Mericle\n *\n */\nvar Ucum = require('./config.js').Ucum;\nimport {ucumJsonDefs} from './ucumJsonDefs.js';\nvar UnitTables = require('./unitTables.js').UnitTables;\nvar UnitString = require('./unitString.js').UnitString;\n\nimport * as intUtils_ from \"./ucumInternalUtils.js\";\n\n/**\n * UCUM external utilities class\n */\nexport class UcumLhcUtils {\n\n  /**\n   * Constructor.  This loads the json prefix and unit definitions if\n   * they haven't been loaded already and creates itself as a singleton object.\n   *\n   */\n  constructor() {\n\n      if (UnitTables.getInstance().unitsCount() === 0) {\n\n        // Load the prefix and unit objects\n        ucumJsonDefs.loadJsonDefs();\n      }\n\n      // Get the UnitString parser that will be used with this instance\n      // of the LHC Utilities\n      this.uStrParser_ = UnitString.getInstance();\n\n  } // end constructor\n\n\n  /**\n   * This method calls the useHTMLInMessages method on the UnitString\n   * object.  It should be called by web applications that use\n   * these utilities.\n   *\n   * @param use flag indicating whether or not to use the braces message;\n   *  defaults to true\n   */\n  useHTMLInMessages(use) {\n    if (use === undefined)\n      use = true ;\n    this.uStrParser_.useHTMLInMessages(use);\n  }\n\n\n  /**\n   * This method calls the useBraceMsgForEachString method on the UnitString\n   * object.  It should be called by web applications where unit\n   * strings are validated individually (as opposed to validating a whole\n   * file of unit strings).\n   *\n   * @param use flag indicating whether or not to use the braces message;\n   *  defaults to true\n   */\n  useBraceMsgForEachString(use) {\n    if (use === undefined)\n      use = true ;\n    this.uStrParser_.useBraceMsgForEachString(use);\n  }\n\n\n  /**\n   * This method validates a unit string.  It first checks to see if the\n   * string passed in is a unit code that is found in the unit codes table.\n   * If it is not found it parses the string to see if it resolves to a\n   * valid unit string.\n   *\n   * If a valid unit cannot be found, the string is tested for some common\n   * errors, such as missing brackets or a missing multiplication operator.\n   * If found, the error is reported in the messages array that is returned.\n   *\n   * If a valid unit cannot be found and an error cannot be discerned, this\n   * may return, if requested, a list of suggested units in the messages\n   * array that is returned.  Suggestions are based on matching the expression\n   * with unit names and synonyms.\n   *\n   * @param uStr the string to be validated\n   * @param suggest a boolean to indicate whether or not suggestions are\n   *  requested for a string that cannot be resolved to a valid unit;\n   *  true indicates suggestions are wanted; false indicates they are not,\n   *  and is the default if the parameter is not specified;\n   * @param valConv a string indicating if this validation request was initiated\n   *  by a validation task ('validate') or a conversion task ('convert'),\n   *  used only for the demo code, and the default is 'Validator' if the\n   *  parameter is not specified;\n   * @returns an object with five properties:\n   *  'status' will be 'valid' (the uStr is a valid UCUM code), 'invalid'\n   *     (the uStr is not a valid UCUM code, and substitutions or\n   *     suggestions may or may not be returned, depending on what was\n   *     requested and found); or 'error' (an input or programming error\n   *     occurred);\n   *  'ucumCode' the valid ucum code, which may differ from what was passed\n   *    in (e.g., if 'Gauss' is passed in, this will contain 'G') OR null if\n   *    the string was flagged as invalid or an error occurred;\n   *  'msg' is an array of one or more messages, if the string is invalid or\n   *        an error occurred, indicating the problem, or an explanation of a\n   *        substitution such as the substitution of 'G' for 'Gauss', or\n   *        an empty array if no messages were generated;\n   *  'unit' which is null if no unit is found, or a hash for a unit found:\n   *    'code' is the unit's ucum code (G in the above example;\n   *    'name' is the unit's name (Gauss in the above example); and\n   *    'guidance' is the unit's guidance/description data; and\n   *  'suggestions' if suggestions were requested and found, this is an array\n   *     of one or more hash objects.  Each hash contains three elements:\n   *     'msg' which is a message indicating what part of the uStr input\n   *        parameter the suggestions are for;\n   *     'invalidUnit' which is the unit expression the suggestions are\n   *        for; and\n   *     'units' which is an array of data for each suggested unit found.\n   *        Each array will contain the unit code, the unit name and the\n   *        unit guidance (if any).\n   *     If no suggestions were requested and found, this property is not\n   *     returned.\n   */\n  validateUnitString(uStr, suggest, valConv) {\n\n    if (suggest === undefined)\n      suggest = false ;\n\n    if (valConv === undefined)\n      valConv = 'validate' ;\n\n    let resp = this.getSpecifiedUnit(uStr, valConv, suggest);\n    let theUnit = resp['unit'];\n    let retObj = !theUnit ? {'ucumCode': null} :\n      {'ucumCode': resp['origString'],\n       'unit': {'code': theUnit.csCode_,\n                'name': theUnit.name_,\n                'guidance': theUnit.guidance_ }};\n    retObj.status = resp.status;\n    if (resp['suggestions']) {\n      retObj['suggestions'] = resp['suggestions'];\n    }\n    retObj['msg'] = resp['retMsg'];\n    return retObj;\n\n  } // end validateUnitString\n\n\n\n/**\n * @typedef {\n *   'normal', \n *   'mol->mass',\n *   'mass->mol',\n *   'eq->mass',\n *   'mass->eq',\n *   'eq->mol',\n *   'mol->eq',\n * } ConversionType\n */\n\n  /**\n  * Detects the type of conversion between two units.\n  *\n  * @param {Object} fromUnit - The unit to convert from.\n  * @param {Object} toUnit - The unit to convert to.\n  * @returns {ConversionType} conversionType - The type of conversion as a string.\n  */\n  detectConversionType(fromUnit, toUnit) {\n    /** @type {ConversionType} */\n    let conversionType = 'normal';\n\n    // detect mol <-> mass conversions and eq <-> eq conversions,\n    // and non-mol <-> eq <-> mass conversions\n    if ((fromUnit.isMolarUnit() && toUnit.isMolarUnit()) || \n        (fromUnit.isEquivalentUnit() && toUnit.isEquivalentUnit()) ||\n        (!(fromUnit.isMolarUnit() || toUnit.isMolarUnit()) && \n        !(fromUnit.isEquivalentUnit() || toUnit.isEquivalentUnit()))) {\n      conversionType = 'normal';\n    }\n    // handle eq <-> mol/mass conversions\n    else if (fromUnit.isEquivalentUnit()) {\n      conversionType = toUnit.isMolarUnit() ? 'eq->mol' : 'eq->mass';\n    } else if (toUnit.isEquivalentUnit()) {\n      conversionType = fromUnit.isMolarUnit() ? 'mol->eq' : 'mass->eq';\n    }\n    // handle mol <-> mass conversions\n    else if (fromUnit.isMolarUnit()) {\n      conversionType = 'mol->mass';\n    } else if (toUnit.isMolarUnit()) {\n      conversionType = 'mass->mol';\n    }\n\n    return conversionType;\n  } // end detectConversionType\n\n  /** \n   * @typedef {{\n   *   status: 'succeeded' | 'failed' | 'error',\n   *   toVal: number | null,\n   *   msg: string[],\n   *   suggestions: {\n   *     from: {\n   *       msg: string,\n   *       invalidUnit: string,\n   *       units: string[]\n   *     },\n   *     to: {\n   *       msg: string,\n   *       invalidUnit: string,\n   *       units: string[]\n   *     }\n   *   },\n   *  fromUnit: string,\n   *  toUnit: string\n   * }} ConvertUnitResult\n   */\n\n \n  /**\n   * This method converts one unit to another\n   *\n   * @param {string} fromUnitCode - the unit code/expression/string of the unit to be converted\n   * @param {number | string} fromVal - the number of \"from\" units to be converted to \"to\" units\n   * @param {string} toUnitCode - the unit code/expression/string of the unit that the from field is to be converted to\n   * @param {{\n   *   suggest?: boolean,\n   *   molecularWeight?: number\n   *   charge?: number\n   * }} options\n   *  - suggest: a boolean to indicate whether or not suggestions are requested for a string that cannot be resolved to a valid unit;\n   *    true indicates suggestions are wanted; false indicates they are not, and is the default if the parameter is not specified;\n   *  - molecularWeight: the molecular weight of the substance in question when a conversion is being requested from mass to moles and vice versa.\n   *    This is required when one of the units represents a value in moles.  It is ignored if neither unit includes a measurement in moles.\n   *  - charge: the absolute value of the charge of the substance in question when a conversion is being requested from mass/moles to\n   *    equivalents and vice versa. It is required when one of the units represents a value in equivalents and the other in mass or moles. \n   *    It is ignored if neither unit includes an equivalent unit.\n   * @returns {ConvertUnitResult}\n   * - a hash with six elements:\n   *   - 'status' that will be: 'succeeded' if the conversion was successfully\n   *     calculated; 'failed' if the conversion could not be made, e.g., if\n   *     the units are not commensurable; or 'error' if an error occurred;\n   *   - 'toVal' the numeric value indicating the conversion amount, or null\n   *     if the conversion failed (e.g., if the units are not commensurable);\n   *   - 'msg' is an array message, if the string is invalid or an error occurred,\n   *     indicating the problem, or an explanation of a substitution such as\n   *     the substitution of 'G' for 'Gauss', or an empty array if no\n   *     messages were generated;\n   *   - 'suggestions' if suggestions were requested and found, this is a hash\n   *     that contains at most two elements:\n   *     - 'from' which, if the fromUnitCode input parameter or one or more of\n   *       its components could not be found, is an array one or more hash\n   *       objects.  Each hash contains three elements:\n   *       - 'msg' which is a message indicating what unit expression the\n   *          suggestions are for;\n   *       - 'invalidUnit' which is the unit expression the suggestions\n   *          are for; and\n   *       - 'units' which is an array of data for each suggested unit found.\n   *          Each array will contain the unit code, the unit name and the\n   *          unit guidance (if any).\n   *       If no suggestions were found for the fromUnitCode this element\n   *       will not be included.\n   *     - 'to' which, if the \"to\" unit expression or one or more of its\n   *       components could not be found, is an array one or more hash objects.  Each hash\n   *       contains three elements:\n   *       - 'msg' which is a message indicating what toUnitCode input\n   *          parameter the suggestions are for;\n   *       - 'invalidUnit' which is the unit expression the suggestions\n   *          are for; and\n   *       - 'units' which is an array of data for each suggested unit found.\n   *          Each array will contain the unit code, the unit name and the\n   *          unit guidance (if any).\n   *       If no suggestions were found for the toUnitCode this element\n   *       will not be included.\n   *       No 'suggestions' element will be included in the returned hash\n   *       object if none were found, whether or not they were requested.\n   *   - 'fromUnit' the unit object for the fromUnitCode passed in; returned\n   *     in case it's needed for additional data from the object; and\n   *   - 'toUnit' the unit object for the toUnitCode passed in; returned\n   *     in case it's needed for additional data from the object.\n   */\n  convertUnitTo(fromUnitCode, fromVal, toUnitCode, options = {}) {\n    let { suggest = false, molecularWeight = null, charge = null } = options;\n\n    /** @type {ConvertUnitResult} */\n    let returnObj = {'status' : 'failed',\n                     'toVal' : null,\n                     'msg' : []} ;\n\n    if (fromUnitCode) {\n      fromUnitCode = fromUnitCode.trim();\n    }\n    if (!fromUnitCode || fromUnitCode == '') {\n      returnObj['status'] = 'error';\n      returnObj['msg'].push('No \"from\" unit expression specified.');\n    }\n    this._checkFromVal(fromVal, returnObj);\n    if (toUnitCode) {\n      toUnitCode = toUnitCode.trim();\n    }\n    if (!toUnitCode || toUnitCode == '') {\n      returnObj['status'] = 'error';\n      returnObj['msg'].push('No \"to\" unit expression specified.');\n    }\n    if (returnObj['status'] !== 'error') {\n      try {\n        let fromUnit = null;\n\n        let parseResp = this.getSpecifiedUnit(fromUnitCode, 'convert', suggest);\n        fromUnit = parseResp['unit'];\n        if (parseResp['retMsg'])\n          returnObj['msg'] = returnObj['msg'].concat(parseResp['retMsg']);\n        if (parseResp['suggestions']) {\n          returnObj['suggestions'] = {};\n          returnObj['suggestions']['from'] = parseResp['suggestions'];\n        }\n        if (!fromUnit) {\n          returnObj['msg'].push(`Unable to find a unit for ${fromUnitCode}, ` +\n            `so no conversion could be performed.`);\n        }\n\n        let toUnit = null;\n        parseResp = this.getSpecifiedUnit(toUnitCode, 'convert', suggest);\n        toUnit = parseResp['unit'];\n        if (parseResp['retMsg'])\n          returnObj['msg'] = returnObj['msg'].concat(parseResp['retMsg']);\n        if (parseResp['suggestions']) {\n          if (!returnObj['suggestions'])\n            returnObj['suggestions'] = {} ;\n          returnObj['suggestions']['to'] = parseResp['suggestions'];\n        }\n        if (!toUnit) {\n          returnObj['msg'].push(`Unable to find a unit for ${toUnitCode}, ` +\n                                `so no conversion could be performed.`);\n        }\n\n        if (fromUnit && toUnit) {\n          try {\n            const convertType = this.detectConversionType(fromUnit, toUnit); \n\n            switch (convertType) {\n              case 'normal':\n                returnObj['toVal'] = toUnit.convertFrom(fromVal, fromUnit);\n                break;\n              case 'mol->mass':\n              case 'mass->mol':\n                if (!molecularWeight) {\n                  throw new Error(Ucum.needMoleWeightMsg_);\n                }\n                if (!fromUnit.isMoleMassCommensurable(toUnit)) {\n                  throw new Error(`Sorry.  ${fromUnitCode} cannot be ` +\n                      `converted to ${toUnitCode}.`);\n                }\n                returnObj['toVal'] = convertType === \"mol->mass\" ?\n                  fromUnit.convertMolToMass(fromVal, toUnit, molecularWeight) :\n                  fromUnit.convertMassToMol(fromVal, toUnit, molecularWeight);\n                break;\n              case 'eq->mass':\n              case 'mass->eq':\n                if (!molecularWeight) {\n                  throw new Error(Ucum.needEqWeightMsg_);\n                }\n                if (!charge) {\n                  throw new Error(Ucum.needEqChargeMsg_);\n                }\n                if (!fromUnit.isEqMassCommensurable(toUnit)) {\n                  throw new Error(`Sorry.  ${fromUnitCode} cannot be ` +\n                      `converted to ${toUnitCode}.`);\n                }\n                returnObj['toVal'] = convertType === \"eq->mass\" ?\n                  fromUnit.convertEqToMass(fromVal, toUnit, molecularWeight, charge) :\n                  fromUnit.convertMassToEq(fromVal, toUnit, molecularWeight, charge);\n                break;\n              case 'eq->mol':\n              case 'mol->eq':\n                if (!charge) {\n                  throw new Error(Ucum.needEqChargeMsg_);\n                }\n                returnObj['toVal'] = convertType === \"eq->mol\" ?\n                  fromUnit.convertEqToMol(fromVal, toUnit, charge) :\n                  fromUnit.convertMolToEq(fromVal, toUnit, charge);\n                break;\n              default:\n                throw new Error(\"Unknown conversion type.  No conversion was attempted.\");\n            }\n            // if an error hasn't been thrown - either from convertFrom or here,\n            // set the return object to show success\n            returnObj['status'] = 'succeeded';\n            returnObj['fromUnit'] = fromUnit;\n            returnObj['toUnit'] = toUnit;\n          }\n          catch (err) {\n            returnObj['status'] = 'failed';\n            returnObj['msg'].push(err.message);\n          }\n        } // end if we have the from and to units\n      } \n      catch (err) {\n        if (err.message == Ucum.needMoleWeightMsg_)\n          returnObj['status'] = 'failed';\n        else\n          returnObj['status'] = 'error';\n        returnObj['msg'].push(err.message);\n      }\n    }\n\n    return returnObj ;\n\n  } // end convertUnitTo\n\n\n  /**\n   *  Converts the given unit string into its base units, their exponents, and\n   *  a magnitude, and returns that data.\n   * @param fromUnit the unit string to be converted to base units information\n   * @param fromVal the number of \"from\" units to be converted\n   * @returns an object with the properties:\n   *  'status' indicates whether the result succeeded.  The value will be one of:\n   *    'succeeded':  the conversion was successfully calculated (which can be\n   *      true even if it was already in base units);\n   *    'invalid':  fromUnit is not a valid UCUM code;\n   *    'failed':  the conversion could not be made (e.g., if it is an \"arbitrary\" unit);\n   *    'error':  if an error occurred (an input or programming error)\n   *  'msg': an array of messages (possibly empty) if the string is invalid or\n   *        an error occurred, indicating the problem, or a suggestion of a\n   *        substitution such as the substitution of 'G' for 'Gauss', or\n   *        an empty array if no messages were generated.  There can also be a\n   *        message that is just informational or warning.\n   *  'magnitude': the new value when fromVal units of fromUnits is expressed in the base units.\n   *  'fromUnitIsSpecial': whether the input unit fromUnit is a \"special unit\"\n   *         as defined in UCUM.  This means there is some function applied to convert\n   *         between fromUnit and the base units, so the returned magnitude is likely not\n   *         useful as a scale factor for other conversions (i.e., it only has validity\n   *         and usefulness for the input values that produced it).\n   *  'unitToExp': a map of base units in fromUnit to their exponent\n   */\n  convertToBaseUnits(fromUnit, fromVal) {\n    let retObj = {};\n    this._checkFromVal(fromVal, retObj);\n    if (!retObj.status) { // could be set to 'error' by _checkFromVal\n      let inputUnitLookup = this.getSpecifiedUnit(fromUnit, 'validate');\n      retObj = {status: inputUnitLookup.status == 'valid' ? 'succeeded' : inputUnitLookup.status};\n      let unit = inputUnitLookup.unit;\n      retObj.msg = inputUnitLookup.retMsg || [];\n      if (!unit) {\n        if (inputUnitLookup.retMsg?.length == 0)\n          retObj.msg.push('Could not find unit information for '+fromUnit);\n      }\n      else if (unit.isArbitrary_) {\n        retObj.msg.push('Arbitrary units cannot be converted to base units or other units.');\n        retObj.status = 'failed';\n      }\n      else if (retObj.status == 'succeeded') {\n        let unitToExp = {};\n        let dimVec = unit.dim_?.dimVec_\n        let baseUnitString = '1';\n        if (dimVec) {\n          let dimVecIndexToBaseUnit = UnitTables.getInstance().dimVecIndexToBaseUnit_;\n          for (let i=0, len=dimVec.length; i<len; ++i) {\n            let exp = dimVec[i];\n            if (exp) {\n              unitToExp[dimVecIndexToBaseUnit[i]] = exp;\n              baseUnitString += '.' + dimVecIndexToBaseUnit[i] + exp;\n            }\n          }\n        }\n\n        // The unit might have a conversion function, which has to be applied; we\n        // cannot just assume unit_.magnitude_ is the magnitude in base units.\n        let retUnitLookup = this.getSpecifiedUnit(baseUnitString, 'validate');\n        // There should not be any error in retUnitLookup, unless there is a bug.\n        let retUnit = retUnitLookup.unit;\n        if (retUnitLookup.status !== 'valid') {\n          retObj.msg.push('Unable construct base unit string; tried '+baseUnitString);\n          retObj.status = 'error';\n        }\n        else {\n          try {\n            retObj.magnitude = retUnit.convertFrom(fromVal, unit);\n          }\n          catch (e) {\n            retObj.msg.push(e.toString());\n            retObj.status = 'error';\n          }\n          if (retObj.status == 'succeeded') {\n            retObj.unitToExp = unitToExp;\n            retObj.fromUnitIsSpecial = unit.isSpecial_;\n          }\n        }\n      }\n    }\n    return retObj;\n  }\n\n\n  /**\n   *  Checks the given value as to whether it is suitable as a \"from\" value in a\n   *  unit conversion.  If it is not, the responseObj will have its status set\n   *  to 'error' and a message added.\n   * @param fromVal The value to check\n   * @param responseObj the object that will be updated if the value is not\n   *  usable.\n   */\n  _checkFromVal(fromVal, responseObj) {\n    if (fromVal === null || isNaN(fromVal) || (typeof fromVal !== 'number' &&\n        !intUtils_.isNumericString(fromVal))) {\n      responseObj.status = 'error';\n      if (!responseObj.msg)\n        responseObj.msg = [];\n      responseObj.msg.push('No \"from\" value, or an invalid \"from\" value, ' +\n                         'was specified.');\n    }\n  }\n\n\n  /**\n   * This method accepts a term and looks for units that include it as\n   * a synonym - or that include the term in its name.\n   *\n   * @param theSyn the term to search for\n   * @returns a hash with up to three elements:\n   *  'status' contains the status of the request, which can be 'error',\n   *    'failed' or succeeded';\n   *  'msg' which contains a message for an error or if no units were found; and\n   *  'units' which is an array that contains one hash for each unit found:\n   *    'code' is the unit's csCode_\n   *    'name' is the unit's name_\n   *    'guidance' is the unit's guidance_\n   *\n   */\n  checkSynonyms(theSyn) {\n    let retObj = {} ;\n    if (theSyn === undefined || theSyn === null) {\n      retObj['status'] = 'error';\n      retObj['msg'] = 'No term specified for synonym search.'\n    }\n    else {\n      retObj = intUtils_.getSynonyms(theSyn);\n    } // end if a search synonym was supplied\n\n    return retObj ;\n\n  } // end checkSynonyms\n\n\n  /**\n   * This method parses a unit string to get (or try to get) the unit\n   * represented by the string.  It returns an error message if no string was specified\n   * or if any errors were encountered trying to get the unit.\n   *\n   * @param uName the expression/string representing the unit\n   * @param valConv indicates what type of request this is for - a request to\n   *  validate (pass in 'validate') or a request to convert (pass in 'convert')\n   * @param suggest a boolean to indicate whether or not suggestions are\n   *  requested for a string that cannot be resolved to a valid unit;\n   *  true indicates suggestions are wanted; false indicates they are not,\n   *  and is the default if the parameter is not specified;\n   * @returns a hash containing:\n   *   'status' will be 'valid' (uName is a valid UCUM code), 'invalid'\n   *     (the uStr is not a valid UCUM code, and substitutions or\n   *     suggestions may or may not be returned, depending on what was\n   *     requested and found); or 'error' (an input or programming error\n   *     occurred);\n   *   'unit' the unit object (or null if there were problems creating the\n   *     unit);\n   *   'origString' the possibly updated unit string passed in;\n   *   'retMsg' an array of user messages (informational, error or warning) if\n   *     any were generated (IF any were generated, otherwise will be an\n   *     empty array); and\n   *   'suggestions' is an array of 1 or more hash objects.  Each hash\n   *     contains three elements:\n   *       'msg' which is a message indicating what unit expression the\n   *          suggestions are for;\n   *       'invalidUnit' which is the unit expression the suggestions are\n   *          for; and\n   *       'units' which is an array of data for each suggested unit found.\n   *          Each array will contain the unit code, the unit name and the\n   *          unit guidance (if any).\n   *   The return hash will not contain a suggestions array if a valid unit\n   *   was found or if suggestions were not requested and found.\n   */\n  getSpecifiedUnit(uName, valConv, suggest) {\n\n    if (suggest === undefined)\n      suggest = false ;\n\n    let retObj = {};\n    retObj['retMsg'] = [];\n\n    if (!uName) {\n      retObj['retMsg'].push('No unit string specified.');\n    }\n    else {\n      let utab = UnitTables.getInstance();\n      uName = uName.trim();\n\n      // go ahead and just try using the name as the code.  This may or may not\n      // work, but if it does, it cuts out a lot of parsing.\n      let theUnit = utab.getUnitByCode(uName);\n\n      // If we found it, set the returned unit string to what was passed in;\n      // otherwise try parsing as a unit string\n      if (theUnit) {\n        retObj['unit'] = theUnit ;\n        retObj['origString'] = uName;\n      }\n      else {\n        try {\n          let resp = this.uStrParser_.parseString(uName, valConv, suggest);\n          retObj['unit'] = resp[0];\n          retObj['origString'] = resp[1];\n          if (resp[2])\n            retObj['retMsg'] = resp[2];\n          retObj['suggestions'] = resp[3];\n        }\n        catch (err) {\n          console.log(`Unit requested for unit string ${uName}.` +\n            'request unsuccessful; error thrown = ' + err.message);\n            retObj['retMsg'].unshift(`${uName} is not a valid unit.  ` +\n                                     `${err.message}`);\n        }\n      } // end if the unit was not found as a unit name\n    } // end if a unit expression was specified\n\n    // Set the status field\n    if (!retObj.unit) {\n      // No unit was found; check whether origString has a value\n      retObj.status = !retObj.origString ? 'error' : 'invalid';\n    }\n    else {\n      // Check whether substitutions were made to the unit string in order to\n      // find the unit\n      retObj.status = retObj.origString === uName ? 'valid': 'invalid';\n    }\n\n    return retObj;\n\n  } // end getSpecifiedUnit\n\n\n  /**\n   * This method retrieves a list of units commensurable, i.e., that can be\n   * converted from and to, a specified unit.  Returns an error if the \"from\"\n   * unit cannot be found.\n   *\n   * @param fromName the name/unit string of the \"from\" unit\n   * @returns an array containing two elements;\n   *   first element is the list of commensurable units if any were found\n   *   second element is an error message if the \"from\" unit is not found\n   */\n  commensurablesList(fromName) {\n\n    let retMsg = [];\n    let commUnits = null ;\n    let parseResp = this.getSpecifiedUnit(fromName, 'validate', false);\n    let fromUnit = parseResp['unit'];\n    if (parseResp['retMsg'].length > 0)\n      retMsg = parseResp['retMsg'] ;\n    if (!fromUnit) {\n      retMsg.push(`Could not find unit ${fromName}.`);\n    }\n    else {\n      let dimVec = null ;\n      let fromDim = fromUnit.getProperty('dim_');\n      if (!fromDim) {\n        retMsg.push('No commensurable units were found for ' + fromName) ;\n      }\n      else {\n        try {\n          dimVec = fromDim.getProperty('dimVec_');\n        }\n        catch (err) {\n          retMsg.push(err.message);\n          if (err.message ===\n            \"Dimension does not have requested property(dimVec_)\")\n            dimVec = null;\n        }\n        if (dimVec) {\n          let utab = UnitTables.getInstance();\n          commUnits = utab.getUnitsByDimension(dimVec);\n        }\n      } // end if the from unit has a dimension vector\n    } // end if we found a \"from\" unit\n    return [commUnits , retMsg];\n  } // end commensurablesList\n\n} // end UcumLhcUtils class\n\n\n/**\n *  This function exists ONLY until the original UcumLhcUtils constructor\n *  is called for the first time.  It's defined here in case getInstance\n *  is called before the constructor.   This calls the constructor.\n *\n *  The constructor redefines the getInstance function to return the\n *  singleton UcumLhcUtils object.  This is based on the UnitTables singleton\n *  implementation; see more detail in the UnitTables constructor description.\n *\n *  NO LONGER TRUE - not implemented as a singleton.  This method retained to\n *  avoid problems with calls to it that exist throughout the code.\n *\n *  @return the (formerly singleton) UcumLhcUtils object.\n */\nUcumLhcUtils.getInstance = function(){\n  return new UcumLhcUtils();\n} ;\n"],"mappings":"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"}