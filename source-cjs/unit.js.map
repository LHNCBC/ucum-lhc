{"version":3,"sources":["../source/unit.js"],"names":["Ucum","require","Dimension","UnitTables","isInteger","Unit","constructor","attrs","isBase_","name_","csCode_","ciCode_","property_","magnitude_","undefined","dim_","Array","printSymbol_","class_","isMetric_","variable_","cnv_","cnvPfx_","isSpecial_","isArbitrary_","moleExp_","synonyms_","source_","loincProperty_","category_","guidance_","csUnitString_","ciUnitString_","baseFactorStr_","baseFactor_","defError_","assignUnity","assignZero","assignVals","vals","key","uKey","charAt","length","hasOwnProperty","Error","clone","retUnit","Object","getOwnPropertyNames","forEach","val","assign","unit2","equals","fullEquals","thisAttr","keys","sort","u2Attr","keyLen","match","k","getProperty","propertyName","uProp","convertFrom","num","fromUnit","newNum","isMoleMassCommensurable","needMoleWeightMsg_","isNull","fromCnv","fromMag","x","fromFunc","funcs","forName","cnvFrom","toFunc","cnvTo","convertTo","toUnit","convertCoherent","f_from","mutateCoherent","i","max","getMax","elem","getElementAt","tabs","_getUnitTables","uA","getUnitsByDimension","name","convertMassToMol","amt","molUnit","molecularWeight","molAmt","avoNum","getUnitByCode","molesFactor","convertMolToMass","massUnit","massAmt","mutateRatio","multiplyThis","s","mulVal","toString","_concatStrs","multiplyThese","isZero","dimVec_","add","resetFieldsForDerivedUnit","divide","invertString","sub","minus","invert","theString","stringRep","replace","substr","str1","operator","str2","startChar","endChar","_buildOneString","str","ret","intUtils_","isNumericString","endsWith","test","power","p","uStr","uArray","arLen","un","nun","parseInt","Math","pow","uLen","u","uChar","exp","join","mul","d","getMassDimensionIndex","commensurable","testDim","curVal","setElementAt","getInstance"],"mappings":"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","sourcesContent":["\n/**\n * This class represents one unit of measure.  It includes\n * functions to cover constructor, accessor, and assignment tasks as\n * well as operators to calculate multiplication, division and raising\n * to a power.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nvar Ucum = require('./config.js').Ucum;\nvar Dimension = require('./dimension.js').Dimension;\nimport funcs from \"./ucumFunctions.js\";\nvar UnitTables;\n\nvar isInteger = require(\"is-integer\");\nimport * as intUtils_ from \"./ucumInternalUtils.js\";\n\nexport class Unit {\n\n  /**\n   * Constructor.\n   *\n   * @param attrs an optional parameter that may be:\n   *  a string, which is parsed by the unit parser, which creates\n   *  the unit from the parsed string; or\n   *  a hash containing all or some values for the attributes of\n   *  the unit, where the keys are the attribute names, without a\n   *  trailing underscore, e.g., name instead of name_; or\n   *  null, in which case an empty hash is created and used to\n   *  set the values forthe attributes.\n   *  If a hash (empty or not) is used, attributes for which no value\n   *  is specified are assigned a default value.\n   *\n   */\n  constructor(attrs = {}) {\n\n    // Process the attrs hash passed in, which may be empty.\n    // Create and assign values (from the attrs hash or defaults) to all\n    // attributes.  From Class Declarations in Understanding ECMAScript,\n    // https://leanpub.com/understandinges6/read/#leanpub-auto-class-declarations,\n    //   \"Own properties, properties that occur on the instance rather than the\n    //    prototype, can only be created inside of a class constructor or method.\n    //    It's recommended to create all possible own properties inside of the\n    //    constructor function so there's a single place that's responsible for\n    //    all of them.\"\n\n    /*\n     * Flag indicating whether or not this is a base unit\n     */\n    this.isBase_ = attrs['isBase_'] || false ;\n\n    /*\n     * The unit name, e.g., meter\n     */\n    this.name_ = attrs['name_'] || '';\n\n    /*\n     * The unit's case-sensitive code, e.g., m\n     */\n    this.csCode_ = attrs['csCode_'] || '';\n\n    /*\n     * The unit's case-insensitive code, e.g., M\n     */\n    this.ciCode_ = attrs['ciCode_'] || '';\n\n    /*\n     * The unit's property, e.g., length\n     */\n    this.property_ = attrs['property_'] || '';\n\n    /*\n     * The magnitude of the unit, e.g., 3600/3937 for a yard,\n     * where a yard - 3600/3973 * m(eter).  The Dimension\n     * property specifies the meter - which is the unit on which\n     * a yard is based, and this magnitude specifies how to figure\n     * this unit based on the base unit.\n     */\n    this.magnitude_ = attrs['magnitude_'] || 1;\n\n    /*\n     * The Dimension object of the unit\n     */\n    if (attrs['dim_'] === undefined || attrs['dim_'] === null) {\n      this.dim_ = new Dimension();\n    }\n    // When the unit data stored in json format is reloaded, the dimension data\n    // is recognized as a a hash, not as a Dimension object.\n    else if (attrs['dim_']['dimVec_'] !== undefined) {\n      this.dim_ = new Dimension(attrs['dim_']['dimVec_']) ;\n    }\n    else if (attrs['dim_'] instanceof Dimension) {\n      this.dim_ = attrs['dim_'];\n    }\n    else if (attrs['dim_'] instanceof Array || isInteger(attrs['dim_'])) {\n      this.dim_ = new Dimension(attrs['dim_']) ;\n    }\n    else {\n      this.dim_ = new Dimension();\n    }\n    /*\n     * The print symbol of the unit, e.g., m\n     */\n    this.printSymbol_ = attrs['printSymbol_'] || null;\n\n    /*\n     * The class of the unit, where given, e.g., dimless\n     */\n    this.class_ = attrs['class_'] || null;\n\n    /*\n     * A flag indicating whether or not the unit is metric\n     */\n    this.isMetric_ = attrs['isMetric_'] || false;\n\n    /*\n     * The \"variable\" - which I think is used only for base units\n     * The symbol for the variable as used in equations, e.g., s for distance\n     */\n    this.variable_ = attrs['variable_'] || null ;  // comes from 'dim' in XML\n\n    /*\n     * The conversion function\n     */\n    this.cnv_ = attrs['cnv_'] || null;\n\n    /*\n     * The conversion prefix\n     */\n    this.cnvPfx_ = attrs['cnvPfx_'] || 1;\n\n    /*\n     * Flag indicating whether or not this is a \"special\" unit, i.e., is\n     * constructed using a function specific to the measurement, e.g.,\n     * fahrenheit and celsius\n     */\n    this.isSpecial_ = attrs['isSpecial_'] || false ;\n\n    /*\n     * Flag indicating whether or not this is an arbitrary unit\n     */\n    this.isArbitrary_ = attrs['isArbitrary_'] || false;\n\n    /*\n     * Integer indicating what level of exponent applies to a mole-based portion\n     * of the unit.  So, for the unit \"mol\", this will be 1.  For \"mol2\" this\n     * will be 2.  For \"1/mol\" this will be -1.  Any unit that does not include\n     * a mole will have a 0 in this field.  This is used to determine\n     * commensurability for mole<->mass conversions.\n     */\n    this.moleExp_ = attrs['moleExp_'] || 0;\n\n    /*\n     * Added when added LOINC list of units\n     * synonyms are used by the autocompleter to enhance lookup capabilities\n     * while source says where the unit first shows up.  Current sources are\n     * UCUM - which are units from the unitsofmeasure.org list and LOINC -\n     * which are units from the LOINC data.\n     */\n    this.synonyms_ = attrs['synonyms_'] || null ;\n    this.source_ = attrs['source_'] || null ;\n    this.loincProperty_ = attrs['loincProperty_'] || null;\n    this.category_ = attrs['category_'] || null;\n    this.guidance_ = attrs['guidance_'] || null;\n\n    /*\n     * Used to compute dimension; storing for now until I complete\n     * unit definition parsing\n     */\n    /*\n     * Case sensitive (cs) and case insensitive (ci) base unit strings,\n     * includes exponent and prefix if applicable - specified in\n     * <value Unit=x UNIT=X value=\"nnn\">nnn</value> -- the unit part --\n     * in the ucum-essence.xml file, and may be specified by a user\n     * when requesting conversion or validation of a unit string.  The\n     * magnitude (base factor) is used with this to determine the new unit.\n     * For example, a Newton (unit code N) is created from the string\n     * kg.m/s2, and the value of 1 (base factor defined below). An hour\n     * (unit code h) is created from the unit min (minute) with a value\n     * of 60.\n     */\n    this.csUnitString_ = attrs['csUnitString_'] || null ;\n    this.ciUnitString_ = attrs['ciUnitString_'] || null ;\n\n    /*\n     * String and numeric versions of factor applied to unit specified in\n     * <value Unit=x UNIT=X value=\"nnn\">nnn</value> -- the value part\n     */\n    this.baseFactorStr_ = attrs['baseFactorStr_'] || null;\n    this.baseFactor_ = attrs['baseFactor_'] || null;\n\n    /*\n     * Flag used to indicate units where the definition process failed\n     * when parsing units from the official units definitions file\n     * (currently using the ucum-essence.xml file).  We keep these\n     * so that we can use them to at least validate them as valid\n     * units, but we don't try to convert them.   This is temporary\n     * and only to account for instances where the code does not\n     * take into account various special cases in the xml file.\n     *\n     * This is NOT used when trying to validate a unit string\n     * submitted during a conversion or validation attempt.\n     */\n    this.defError_ = attrs['defError_'] || false ;\n\n\n  } // end constructor\n\n\n  /**\n   * Assign the unity (= dimensionless unit 1) to this unit.\n   *\n   * @return this unit\n   */\n  assignUnity() {\n    this.name_  = \"\" ;\n    this.magnitude_ = 1 ;\n    if (!this.dim_)\n      this.dim_ = new Dimension();\n    this.dim_.assignZero() ;\n    this.cnv_ = null ;\n    this.cnvPfx_ = 1 ;\n    return this;\n\n  } // end assignUnity\n\n\n  /**\n   * This assigns one or more values, as provided in the hash passed in,\n   * to this unit.\n   *\n   * @param vals hash of values to be assigned to the attributes\n   *        specified by the key(s), which should be the attribute\n   *        name without the trailing underscore, e.g., name instead\n   *        of name_.\n   * @return nothing\n   */\n  assignVals(vals) {\n    for (let key in vals) {\n      let uKey = !(key.charAt(key.length - 1)) === '_' ? key + '_' : key ;\n      if (this.hasOwnProperty(uKey))\n        this[uKey] = vals[key];\n      else\n        throw(new Error(`Parameter error; ${key} is not a property of a Unit`));\n    }\n  } // end assignVals\n\n\n  /**\n   * This creates a clone of this unit.\n   *\n   * @return the clone\n   */\n  clone() {\n    let retUnit = new Unit() ;\n    Object.getOwnPropertyNames(this).forEach(val => {\n      if (val === 'dim_') {\n        if (this['dim_'])\n          retUnit['dim_'] = this['dim_'].clone();\n        else\n          retUnit['dim_'] = null;\n      }\n      else\n        retUnit[val] = this[val];\n    });\n    return retUnit ;\n\n  } // end clone\n\n\n  /**\n   * This assigns all properties of a unit passed to it to this unit.\n   *\n   * @param unit2 the unit whose properties are to be assigned to this one.\n   * @return nothing; this unit is updated\n   */\n  assign(unit2) {\n    Object.getOwnPropertyNames(unit2).forEach(val => {\n      if (val === 'dim_') {\n        if (unit2['dim_'])\n          this['dim_'] = unit2['dim_'].clone();\n        else\n          this['dim_'] = null;\n      }\n      else {\n        this[val] = unit2[val];\n      }\n    });\n  } // end assign\n\n\n  /**\n   * This determines whether or not object properties of the unit\n   * passed in are equal to the corresponding properties in this unit.\n   * The following properties are the only ones checked:\n   *   magnitude_, dim_, cnv_ and cnvPfx_\n   *\n   * @param unit2 the unit whose properties are to be checked.\n   * @return boolean indicating whether or not they match\n   */\n  equals(unit2) {\n\n    return (this.magnitude_ === unit2.magnitude_ &&\n            this.cnv_ === unit2.cnv_ &&\n            this.cnvPfx_ === unit2.cnvPfx_ &&\n            ((this.dim_ === null && unit2.dim_ === null) ||\n             this.dim_.equals(unit2.dim_)));\n\n  } // end equals\n\n\n  /**\n   * This method compares every attribute of two objects to determine\n   * if they all match.\n   *\n   * @param unit2 the unit that is to be compared to this unit\n   * @return boolean indicating whether or not every attribute matches\n   */\n  fullEquals(unit2) {\n\n    let thisAttr = Object.keys(this).sort();\n    let u2Attr = Object.keys(unit2).sort();\n\n    let keyLen = thisAttr.length ;\n    let match = (keyLen === u2Attr.length);\n\n    // check each attribute.   Dimension objects have to checked using\n    // the equals function of the Dimension class.\n    for (let k = 0; k < keyLen && match; k++) {\n      if (thisAttr[k] === u2Attr[k]) {\n        if (thisAttr[k] === 'dim_')\n          match = this.dim_.equals(unit2.dim_);\n        else\n          match = this[thisAttr[k]] === unit2[thisAttr[k]];\n      }\n      else\n        match = false ;\n    } // end do for each key and attribute\n    return match ;\n  }// end of fullEquals\n\n  /**\n   * This returns the value of the property named by the parameter\n   * passed in.\n   *\n   * @param propertyName name of the property to be returned, with\n   *        or without the trailing underscore.\n   * @return the requested property, if found for this unit\n   * @throws an error if the property is not found for this unit\n   */\n  getProperty(propertyName) {\n    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName :\n                                             propertyName + '_' ;\n    return this[uProp] ;\n\n  } // end getProperty\n\n\n  /**\n   * Takes a measurement consisting of a number of units and a unit and returns\n   * the equivalent number of this unit.  So, 15 mL would translate\n   * to 1 tablespoon if this object is a tablespoon.\n   *\n   * Note that the number returned may not be what is normally expected.\n   * For example, converting 10 Celsius units to Fahrenheit would \"normally\"\n   * return a value of 50.   But in this case you'll get back something like\n   * 49.99999999999994.\n   *\n   * If either unit is an arbitrary unit an exception is raised.\n   *\n   * @param num the magnitude for the unit to be translated (e.g. 15 for 15 mL)\n   * @param fromUnit the unit to be translated to one of this type (e.g. a mL unit)\n   *\n   * @return the number of converted units (e.g. 1 for 1 tablespoon)\n   * @throws an error if the dimension of the fromUnit differs from this unit's\n   * dimension\n   */\n  convertFrom(num, fromUnit) {\n    let newNum = 0.0 ;\n\n    if (this.isArbitrary_)\n      throw (new Error(`Attempt to convert arbitrary unit ${this.name_}`));\n    if (fromUnit.isArbitrary_)\n      throw (new Error(`Attempt to convert to arbitrary unit ${fromUnit.name_}`));\n\n    // reject request if both units have dimensions that are not equal\n    if (fromUnit.dim_ && this.dim_ && !(fromUnit.dim_.equals(this.dim_))) {\n      // check first to see if a mole<->mass conversion is appropriate\n      if (this.isMoleMassCommensurable(fromUnit)) {\n        throw(new Error(Ucum.needMoleWeightMsg_));\n      }\n      else {\n        throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n          `to ${this.csCode_}.`));\n      }\n    }\n    // reject request if there is a \"from\" dimension but no \"to\" dimension\n    if (fromUnit.dim_ && (!this.dim_ || this.dim_.isNull())) {\n      throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n        `to ${this.csCode_}.`));\n    }\n\n    // reject request if there is a \"to\" dimension but no \"from\" dimension\n    if (this.dim_ && (!fromUnit.dim_ || fromUnit.dim_.isNull())) {\n      throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n        `to ${this.csCode_}.`));\n    }\n\n    let fromCnv = fromUnit.cnv_ ;\n    let fromMag = fromUnit.magnitude_ ;\n\n    // If the same conversion function is specified for both units, which\n    // includes neither unit having a conversion function, multiply the\n    // \"from\" unit's magnitude by the number passed in and then divide\n    // that result by this unit's magnitude.  Do this for units with\n    // and without dimension vectors.  PROBLEM with 2 non-commensurable\n    // units with no dimension vector or function, e.g., byte to mol\n    if (fromCnv === this.cnv_) {\n      newNum = (num * fromMag) / this.magnitude_;\n    }\n    // else use a function to get the number to be returned\n    else {\n      let x = 0.0 ;\n      if (fromCnv != null) {\n        // turn num * fromUnit.magnitude into its ratio scale equivalent,\n        // e.g., convert Celsius to Kelvin\n        let fromFunc = funcs.forName(fromCnv);\n        x = fromFunc.cnvFrom(num * fromUnit.cnvPfx_) * fromMag;\n        //x = fromFunc.cnvFrom(num * fromMag) * fromUnit.cnvPfx_;\n      }\n      else {\n        x = num * fromMag;\n      }\n\n      if (this.cnv_ != null) {\n        // turn mag * origUnit on ratio scale into a non-ratio unit,\n        // e.g. convert Kelvin to Fahrenheit\n        let toFunc = funcs.forName(this.cnv_);\n        newNum = toFunc.cnvTo(x / this.magnitude_) / this.cnvPfx_;\n      }\n      else {\n        newNum = x / this.magnitude_;\n      }\n    } // end if either unit has a conversion function\n\n    return newNum;\n\n  } // end convertFrom\n\n\n  /**\n   * Takes a number and a target unit and returns the number for a measurement\n   * of this unit that corresponds to the number of the target unit passed in.\n   * So, 1 tablespoon (where this unit represents a tablespoon) would translate\n   * to 15 mL.\n   *\n   * See the note on convertFrom about return values.\n   *\n   * @param mag the magnitude for this unit (e.g. 1 for 1 tablespoon)\n   * @param toUnit the unit to which this unit is to be translated\n   *  (e.g. an mL unit)\n   *\n   * @return the converted number value (e.g. 15 mL)\n   * @throws an error if the dimension of the toUnit differs from this unit's\n   *   dimension\n   */\n  convertTo(num, toUnit) {\n\n    return toUnit.convertFrom(num, this) ;\n\n  } // end convertTo\n\n\n  /**\n   * Takes a given number of this unit returns the number of this unit\n   * if it is converted into a coherent unit.  Does not change this unit.\n   *\n   * If this is a coherent unit already, just gives back the number\n   * passed in.\n   *\n   * @param num the number for the coherent version of this unit\n   * @return the number for the coherent version of this unit\n   */\n  convertCoherent(num) {\n\n    // convert mag' * u' into canonical number * u on ratio scale\n    if(this.cnv_ !== null)\n      num = this.cnv_.f_from(num / this.cnvPfx_) * this.magnitude_;\n\n    return num;\n\n  } // end convertCoherent\n\n\n  /**\n   * Mutates this unit into a coherent unit and converts a given number of\n   * units to the appropriate value for this unit as a coherent unit\n   *\n   * @param num the number for this unit before conversion\n   * @return the number of this unit after conversion\n   * @throws an error if the dimensions differ\n   */\n  mutateCoherent(num) {\n\n    // convert mu' * u' into canonical mu * u on ratio scale\n    num = this.convertCoherent(num) ;\n\n    // mutate to coherent unit\n    this.magnitude_ = 1;\n    this.cnv_ = null;\n    this.cnvPfx_ = 1;\n    this.name_ = \"\";\n\n    // build a name as a term of coherent base units\n    // This is probably ALL WRONG and a HORRIBLE MISTAKE\n    // but until we figure out what the heck the name being\n    // built here really is, it will have to stay.\n    for (let i = 0, max = Dimension.getMax(); i < max; i++) {\n      let elem = this.dim_.getElementAt(i);\n      let tabs = this._getUnitTables();\n      let uA = tabs.getUnitsByDimension(new Dimension(i));\n      if(uA == null)\n        throw(new Error(`Can't find base unit for dimension ${i}`));\n      this.name_ = uA.name + elem;\n    }\n    return num;\n\n  } // end mutateCoherent\n\n\n  /**\n   * Calculates the number of units that would result from converting a unit\n   * expressed in mass/grams to a unit expressed in moles.  The \"this\" unit is\n   * the unit expressed in some form of mass (g, mg, mmg, kg, whatever) and the\n   * target or \"to\" unit - the molUnit parameter - is a unit expressed in moles\n   * - mol, umol, mmol, etc.  The unit expressions surrounding the moles and\n   * mass must be convertible.  No validation of this requirement is performed.\n   *\n   * @param amt the quantity of this unit to be converted\n   * @param molUnit the target/to unit for which the converted # is wanted\n   * @param molecularWeight the molecular weight of the substance for which the\n   *  conversion is being made\n   * @return the equivalent amount in molUnit\n   */\n  convertMassToMol(amt, molUnit, molecularWeight) {\n    // The prefix values that have been applied to this unit, which is the mass\n    // (grams) unit, are reflected in the magnitude.  So the number of moles\n    // represented by this unit equals the number of grams -- amount * magnitude\n    // divided by the molecular Weight\n    let molAmt = (this.magnitude_ * amt)/molecularWeight ;\n    // The molUnit's basic magnitude, before prefixes are applied,\n    // is avogadro's number, get that and divide it out of the current magnitude.\n    let tabs = this._getUnitTables();\n    let avoNum = tabs.getUnitByCode('mol').magnitude_ ;\n    let molesFactor = molUnit.magnitude_ / avoNum ;\n    // return the molAmt divided by the molesFactor as the number of moles\n    // for the molUnit\n    return molAmt/molesFactor ;\n  }\n\n  /**\n   * Calculates the number of units that would result from converting a unit\n   * expressed in moles to a unit expressed in mass (grams).  The \"this\" unit\n   * is the unit expressed in some form of moles, e.g., mol, umol, mmol, etc.,\n   * and the target or \"to\" unit is a unit expressed in some form of mass, e.g.,\n   * g, mg, mmg, kg, etc.  Any unit expressions surrounding the moles and mass\n   * must be convertible. No validation of this requirement is performed.\n   *\n   * @param amt the quantity of this unit to be converted\n   * @param massUnit the target/to unit for which the converted # is wanted\n   * @param molecularWeight the molecular weight of the substance for which the\n   *  conversion is being made\n   * @return the equivalent amount in massUnit\n   */\n  convertMolToMass(amt, massUnit, molecularWeight) {\n    // A simple mole unit has a magnitude of avogadro's number.  Get that\n    // number now (since not everyone agrees on what it is, and what is\n    // being used in this system might change).\n    let tabs = this._getUnitTables();\n    let avoNum = tabs.getUnitByCode('mol').magnitude_ ;\n    // Determine what prefix values (mg or mg/dL, etc.) have been applied to\n    // this unit by dividing the simple mole unit magnitude out of the\n    // current mole unit magnitude.\n    let molesFactor = this.magnitude_ / avoNum ;\n    // The number of grams (mass) is equal to the number of moles (amt)\n    // times the molecular weight.  We also multiply that by the prefix values\n    // applied to the current unit (molesFactor) to get the grams for this\n    // particular unit.\n    let massAmt = (molesFactor * amt) * molecularWeight ;\n    // Finally, we return the mass amount/grams for this particular unit\n    // divided by any effects of prefixes applied to the \"to\" unit, which\n    // is assumed to be some form of a gram unit\n    return massAmt / massUnit.magnitude_ ;\n  }\n\n\n  /**\n   * Mutates this unit into a unit on a ratio scale and converts a specified\n   * number of units to an appropriate value for this converted unit\n   *\n   * @param num the number of this unit before it's converted\n   * @return the magnitude of this unit after it's converted\n   * @throw an error if the dimensions differ\n   */\n  mutateRatio(num) {\n    if (this.cnv_ == null)\n      return this.mutateCoherent(num);\n    else\n      return num;\n\n  } // end mutateRatio\n\n\n  /**\n   * Multiplies this unit with a scalar. Special meaning for\n   * special units so that (0.1*B) is 1 dB.\n   *\n   * This function DOES NOT modify this unit.\n   *\n   * @param s the value by which this unit is to be multiplied\n   * @return a copy this unit multiplied by s\n   * */\n  multiplyThis(s) {\n\n    let retUnit = this.clone() ;\n    if (retUnit.cnv_ != null)\n      retUnit.cnvPfx_ *= s;\n    else\n      retUnit.magnitude_ *= s;\n    let mulVal = s.toString();\n    retUnit.name_ = this._concatStrs(mulVal, '*', this.name_, '[', ']');\n    retUnit.csCode_ = this._concatStrs(mulVal, '.', this.csCode_, '(', ')');\n    retUnit.ciCode_ = this._concatStrs(mulVal, '.', this.ciCode_, '(', ')');\n    retUnit.printSymbol_ = this._concatStrs(mulVal, '.', this.printSymbol_,\n        '(', ')');\n\n    return retUnit;\n\n  } // end multiplyThis\n\n\n  /**\n   * Multiplies this unit with another unit. If one of the\n   * units is a non-ratio unit the other must be dimensionless or\n   * else an exception is thrown.\n   *\n   * This function does NOT modify this unit\n   * @param unit2 the unit to be multiplied with this one\n   * @return this unit after it is multiplied\n   * @throws an error if one of the units is not on a ratio-scale\n   *         and the other is not dimensionless.\n   */\n  multiplyThese(unit2) {\n\n    var retUnit = this.clone() ;\n\n    if (retUnit.cnv_ != null) {\n      if (unit2.cnv_ == null && (!unit2.dim_ || unit2.dim_.isZero()))\n        retUnit.cnvPfx_ *= unit2.magnitude_;\n      else\n        throw (new Error(`Attempt to multiply non-ratio unit ${retUnit.name_} ` +\n          'failed.'));\n    } // end if this unit has a conversion function\n\n    else if (unit2.cnv_ != null) {\n      if (!retUnit.dim_ || retUnit.dim_.isZero()) {\n        retUnit.cnvPfx_ = unit2.cnvPfx_ * retUnit.magnitude_;\n        retUnit.cnv_ = unit2.cnv_ ;\n      }\n      else\n        throw (new Error(`Attempt to multiply non-ratio unit ${unit2.name_}`));\n    } // end if unit2 has a conversion function\n\n    // else neither unit has a conversion function\n    else {\n      retUnit.magnitude_ *= unit2.magnitude_;\n    } // end if unit2 does not have a conversion function\n\n    // If this.dim_ isn't there, clone the dimension in unit2 - if dimVec_\n    // is a dimension in unit2.dim_; else just transfer it to this dimension\n    if (!retUnit.dim_ || (retUnit.dim_ && !retUnit.dim_.dimVec_)) {\n      if (unit2.dim_)\n        retUnit.dim_ = unit2.dim_.clone();\n      else\n        retUnit.dim_ = unit2.dim_;\n    }\n    // Else this.dim_ is there.  If there is a dimension for unit2,\n    // add it to this one.\n    else if (unit2.dim_ && unit2.dim_ instanceof Dimension) {\n      retUnit.dim_.add(unit2.dim_);\n    }\n\n    // Concatenate the unit info (name, code, etc) for all cases\n    // where the multiplication was performed (an error wasn't thrown)\n    retUnit.name_ = this._concatStrs(retUnit.name_, '*', unit2.name_, '[', ']');\n    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '.', unit2.csCode_,\n      '(', ')');\n    if (retUnit.ciCode_ && unit2.ciCode_)\n      retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '.', unit2.ciCode_,\n        '(', ')');\n    else if (unit2.ciCode_)\n      retUnit.ciCode_ = unit2.ciCode_;\n    retUnit.resetFieldsForDerivedUnit();\n    if (retUnit.printSymbol_ && unit2.printSymbol_)\n      retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '.',\n        unit2.printSymbol_, '(', ')');\n    else if (unit2.printSymbol_)\n      retUnit.printSymbol_ = unit2.printSymbol_;\n\n    // Update the mole exponent count by adding the count for unit2 to the\n    // count for this unit.\n    retUnit.moleExp_ = retUnit.moleExp_ + unit2.moleExp_ ;\n\n    // A unit that has the arbitrary attribute taints any unit created from it\n    // via an arithmetic operation.  Taint accordingly\n    // if (!retUnit.isMole_)\n    //   retUnit.isMole_ = unit2.isMole_ ;\n     if (!retUnit.isArbitrary_)\n       retUnit.isArbitrary_ = unit2.isArbitrary_;\n\n    return retUnit ;\n\n  } // end multiplyThese\n\n\n  /**\n   *  Clears fields like isBase_, synonyms_, etc. when a unit has been cloned\n   *  from a known unit but it being used to construct a derived unit.\n   */\n  resetFieldsForDerivedUnit() {\n    this.guidance_ = '';\n    this.synonyms_ = null;\n    this.isBase_ = false;\n  }\n\n\n  /**\n   * Divides this unit by another unit. If this unit is not on a ratio\n   * scale an exception is raised. Mutating to a ratio scale unit\n   * is not possible for a unit, only for a measurement.\n   *\n   * This unit is NOT modified by this function.\n   * @param unit2 the unit by which to divide this one\n   * @return this unit after it is divided by unit2\n   * @throws an error if either of the units is not on a ratio scale.\n   * */\n  divide(unit2) {\n\n    var retUnit = this.clone();\n\n    if (retUnit.cnv_ != null)\n      throw (new Error(`Attempt to divide non-ratio unit ${retUnit.name_}`));\n    if (unit2.cnv_ != null)\n      throw (new Error(`Attempt to divide by non-ratio unit ${unit2.name_}`));\n\n    if (retUnit.name_ && unit2.name_)\n      retUnit.name_ = this._concatStrs(retUnit.name_, '/', unit2.name_, '[', ']');\n    else if (unit2.name_)\n      retUnit.name_ = unit2.invertString(unit2.name_);\n\n    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '/', unit2.csCode_,\n      '(', ')');\n\n    if (retUnit.ciCode_ && unit2.ciCode_)\n      retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '/', unit2.ciCode_,\n      '(', ')');\n    else if (unit2.ciCode_)\n      retUnit.ciCode_ = unit2.invertString(unit2.ciCode_) ;\n\n    retUnit.resetFieldsForDerivedUnit();\n\n    retUnit.magnitude_ /= unit2.magnitude_;\n\n    if (retUnit.printSymbol_ && unit2.printSymbol_)\n      retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '/',\n        unit2.printSymbol_, '(', ')');\n    else if (unit2.printSymbol_)\n      retUnit.printSymbol_ = unit2.invertString(unit2.printSymbol_);\n\n    // Continue if unit2 has a dimension object.\n    // If this object has a dimension object, subtract unit2's dim_ object from\n    // this one. The sub method will take care of cases where the dimVec_ arrays\n    // are missing on one or both dim_ objects.\n    if (unit2.dim_) {\n      if (retUnit.dim_) {\n        if (retUnit.dim_.isNull())\n          retUnit.dim_.assignZero();\n        retUnit.dim_ = retUnit.dim_.sub(unit2.dim_);\n      } // end if this.dim_ exists\n\n      // Else if this dim_ object is missing, clone unit2's dim_ object\n      // and give the inverted clone to this unit.\n      else\n        retUnit.dim_ = unit2.dim_.clone().minus();\n    } // end if unit2 has a dimension object\n\n    // Update the mole exponent count by subtracting the count for unit2 from\n    // the // count for this unit.\n    retUnit.moleExp_ = retUnit.moleExp_ - unit2.moleExp_ ;\n\n    // A unit that has the arbitrary attribute taints any unit created from\n    // it via an arithmetic operation.  Taint accordingly\n    // if (!retUnit.isMole_)\n    //   retUnit.isMole_ = unit2.isMole_ ;\n    if (!retUnit.isArbitrary_)\n      retUnit.isArbitrary_ = unit2.isArbitrary_;\n\n    return retUnit;\n\n  } // end divide\n\n\n  /**\n   * Invert this unit with respect to multiplication. If this unit is not\n   * on a ratio scale an exception is thrown. Mutating to a ratio scale unit\n   * is not possible for a unit, only for a measurement (the magnitude and\n   * dimension).\n   *\n   *  This unit is modified by this function.\n   * @return this unit after being inverted\n   * @throws and error if this unit is not on a ratio scale\n   */\n  invert() {\n\n    if (this.cnv_ != null)\n      throw (new Error(`Attempt to invert a non-ratio unit - ${this.name_}`));\n\n    this.name_ = this.invertString(this.name_);\n    this.magnitude_ = 1/this.magnitude_ ;\n    this.dim_.minus();\n    return this;\n\n  } // end invert\n\n\n  /**\n   * Inverts a string, where the string is assumed to be a code or a name\n   * of a division operation where the string is the divisor and the dividend\n   * is blank.\n   *\n   * @param the string to be inverted\n   * @return the inverted string\n   */\n  invertString(theString) {\n\n    if (theString.length > 0) {\n      let stringRep = theString.replace('/', \"!\").replace('.', '/').replace(\"!\", '.');\n      switch(stringRep.charAt(0)) {\n        case '.' : theString = stringRep.substr(1); break;\n        case '/' : theString = stringRep; break;\n        default  : theString = \"/\" + stringRep;\n      }\n    }\n    return theString;\n\n  } // end invertString\n\n\n  /**\n   * This function handles concatenation of two strings and an operator.\n   * It's called to build unit data, e.g., unit name, unit code, etc., from\n   * two different units, joined by the specified operator.\n   *\n   * @param str1 the first string to appear in the result\n   * @param operator the operator ('*', '.' or '/') to appear between the strings\n   * @param str2 the second string to appear in the result\n   * @param startChar the starting character to be used, when needed, to\n   *  enclose a string\n   * @param endChar the ending character to be used, when needed, to enclose\n   *  a string\n   * @returns the built string\n   */\n  _concatStrs(str1, operator, str2, startChar, endChar) {\n\n    return this._buildOneString(str1, startChar, endChar) +\n      operator + this._buildOneString(str2, startChar, endChar) ;\n  }\n\n\n  /**\n   * This function handles creation of one string to be included in a\n   * concatenated string.   Basically it checks to see if the string\n   * needs to be enclosed either in parentheses or square brackets.\n   *\n   * The string is enclosed if it is not a number, is not already enclosed in a pair of\n   * parentheses or square brackets, and includes a period, and asterisk,\n   * a slash or a blank space.\n   *\n   * @param str the string\n   * @param startChar starting enclosing character\n   * @param endChar ending enclosing character\n   * @returns the string\n   */\n  _buildOneString(str, startChar, endChar) {\n    let ret = '' ;\n    if (intUtils_.isNumericString(str)) {\n      ret = str;\n    }\n    else {\n      if (str.charAt(0) === '(' && str.endsWith(')') || str.charAt(0) === '['  && str.endsWith(']')) {\n        ret = str;\n      }\n      else if (/[./* ]/.test(str)) {\n        ret = startChar + str + endChar ;\n      }\n      else {\n        ret = str ;\n      }\n    }\n    return ret ;\n  }\n\n\n  /**\n   * Raises the unit to a power.  For example\n   *  kg.m/s2 raised to the -2 power would be kg-2.m-2/s-4\n   *\n   * If this unit is not on a ratio scale an error is thrown. Mutating\n   * to a ratio scale unit is not possible for a unit, only for a\n   * measurement (magnitude and dimension).\n   *\n   * This is based on the pow method in Gunter Schadow's java version,\n   * although it uses javascript capabilities to simplify the processing.\n   *\n   * This unit is modified by this function\n   *\n   * @param p the power to with this unit is to be raise\n   * @return this unit after it is raised\n   * @throws an error if this unit is not on a ratio scale.\n   */\n  power(p) {\n\n    if (this.cnv_ != null)\n      throw (new Error(`Attempt to raise a non-ratio unit, ${this.name_}, ` +\n                       'to a power.'));\n\n    //this.name_ = UnitString.pow(this.name_, p);\n    // the above line is replaced with the code below, as the pow method\n    // never actually existing in the UnitString class.  (Tried to use\n    // Schadow java code but this way ended up being a lot easier).\n    let uStr = this.csCode_ ;\n    let uArray = uStr.match(/([./]|[^./]+)/g) ;\n    let arLen = uArray.length;\n\n    for (let i = 0; i < arLen; i++) {\n      let un = uArray[i] ;\n      if (un !== '/' && un !== '.') {\n        let nun = parseInt(un);\n        if (isInteger(nun))\n          uArray[i] = (Math.pow(nun, p).toString());\n        else {\n          let uLen = un.length ;\n          for (let u = uLen - 1; u >= 0; u--) {\n            let uChar = parseInt(un[u]);\n            if (!isInteger(uChar)) {\n              if (un[u] === '-' || un[u] === '+') {\n                u--;\n              }\n              if (u < uLen - 1) {\n                let exp = parseInt(un.substr(u));\n                exp = Math.pow(exp, p);\n                uArray[i] = un.substr(0, u) + exp.toString();\n                u = -1;\n              }\n              else {\n                uArray[i] += p.toString();\n                u = -1;\n              } // end if there are/aren't some numbers at the end\n              u = -1;\n            } // end if this character is not a number\n          } // end searching backwards for start of exponent\n        } // end if this element is not a number\n      } // end if the current element is not an operator\n    } // end do for each element of the units array\n\n    // reassemble the updated units array to a string\n    this.csCode_ = uArray.join('');\n\n    this.magnitude_ = Math.pow(this.magnitude_, p);\n    if (this.dim_) {\n      this.dim_.mul(p);\n    }\n    return this;\n\n  } // end power\n\n\n  /*\n   * This function tests this unit against the unit passed in to see if the\n   * two are mole to mass commensurable.  It assumes that one of the units\n   * is a mole-based unit and the other is a mass-based unit.  It also assumes\n   * that the mole-based unit has a single mole unit in the numerator and that\n   * the mass-based unit has a single mass unit in the numerator.  It does NOT\n   * check to validate those assumptions.\n   *\n   * The check is made by setting the dimension vector element corresponding\n   * to the base mass unit (gram) in the mole unit, and then comparing the\n   * two dimension vectors.  If they match, the units are commensurable.\n   * Otherwise they are not.\n   *\n   * @param unit2 the unit to be compared to this one\n   * @returns boolean indicating commensurability\n   */\n  isMoleMassCommensurable(unit2) {\n    let tabs = this._getUnitTables();\n    let d = tabs.getMassDimensionIndex();\n    let commensurable = false ;\n    if (this.moleExp_ === 1 && unit2.moleExp_ === 0) {\n      let testDim = this.dim_.clone();\n      let curVal = testDim.getElementAt(d);\n      testDim.setElementAt(d, (curVal + this.moleExp_));\n      commensurable = (testDim.equals(unit2.dim_));\n    }\n    else if (unit2.moleExp_ === 1 && this.moleExp_ === 0) {\n      let testDim = unit2.dim_.clone();\n      let curVal = testDim.getElementAt(d);\n      testDim.setElementAt(d, (curVal + unit2.moleExp_));\n      commensurable = (testDim.equals(this.dim_));\n    }\n    return commensurable ;\n  }\n\n\n  /**\n   * This returns the UnitTables singleton object.  Including the require\n   * statement included here causes a circular dependency condition that\n   * resulted in the UnitTables object not being defined for the Unit object.\n   * sigh.  Thanks, Paul, for figuring this out.\n   *\n   * @private\n   */\n  _getUnitTables() {\n    if (!UnitTables)\n      UnitTables = require('./unitTables.js').UnitTables;\n    return UnitTables.getInstance();\n  }\n\n} // end Unit class\n"],"file":"unit.js"}