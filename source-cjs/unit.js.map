{"version":3,"file":"unit.js","names":["_ucumFunctions","_interopRequireDefault","require","intUtils_","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Ucum","Dimension","UnitTables","isInteger","Unit","constructor","attrs","isBase_","name_","csCode_","ciCode_","property_","magnitude_","undefined","dim_","Array","printSymbol_","class_","isMetric_","variable_","cnv_","cnvPfx_","isSpecial_","isArbitrary_","moleExp_","synonyms_","source_","loincProperty_","category_","guidance_","csUnitString_","ciUnitString_","baseFactorStr_","baseFactor_","defError_","assignUnity","assignZero","assignVals","vals","uKey","charAt","length","Error","clone","retUnit","getOwnPropertyNames","forEach","val","assign","unit2","equals","fullEquals","thisAttr","keys","sort","u2Attr","keyLen","match","k","getProperty","propertyName","uProp","convertFrom","num","fromUnit","newNum","isMoleMassCommensurable","needMoleWeightMsg_","isNull","fromCnv","fromMag","x","fromFunc","funcs","forName","cnvFrom","toFunc","cnvTo","convertTo","toUnit","convertCoherent","f_from","mutateCoherent","i","max","getMax","elem","getElementAt","tabs","_getUnitTables","uA","getUnitsByDimension","name","convertMassToMol","amt","molUnit","molecularWeight","molAmt","avoNum","getUnitByCode","molesFactor","convertMolToMass","massUnit","massAmt","mutateRatio","multiplyThis","s","mulVal","toString","_concatStrs","multiplyThese","isZero","dimVec_","add","resetFieldsForDerivedUnit","divide","invertString","sub","minus","invert","theString","stringRep","replace","substr","str1","operator","str2","startChar","endChar","_buildOneString","str","ret","isNumericString","endsWith","test","power","p","uStr","uArray","arLen","un","nun","parseInt","Math","pow","uLen","u","uChar","exp","join","mul","d","getMassDimensionIndex","commensurable","testDim","curVal","setElementAt","getInstance","exports"],"sources":["../source/unit.js"],"sourcesContent":["\n/**\n * This class represents one unit of measure.  It includes\n * functions to cover constructor, accessor, and assignment tasks as\n * well as operators to calculate multiplication, division and raising\n * to a power.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nvar Ucum = require('./config.js').Ucum;\nvar Dimension = require('./dimension.js').Dimension;\nimport funcs from \"./ucumFunctions.js\";\nvar UnitTables;\n\nvar isInteger = require(\"is-integer\");\nimport * as intUtils_ from \"./ucumInternalUtils.js\";\n\nexport class Unit {\n\n  /**\n   * Constructor.\n   *\n   * @param attrs an optional parameter that may be:\n   *  a string, which is parsed by the unit parser, which creates\n   *  the unit from the parsed string; or\n   *  a hash containing all or some values for the attributes of\n   *  the unit, where the keys are the attribute names, without a\n   *  trailing underscore, e.g., name instead of name_; or\n   *  null, in which case an empty hash is created and used to\n   *  set the values forthe attributes.\n   *  If a hash (empty or not) is used, attributes for which no value\n   *  is specified are assigned a default value.\n   *\n   */\n  constructor(attrs = {}) {\n\n    // Process the attrs hash passed in, which may be empty.\n    // Create and assign values (from the attrs hash or defaults) to all\n    // attributes.  From Class Declarations in Understanding ECMAScript,\n    // https://leanpub.com/understandinges6/read/#leanpub-auto-class-declarations,\n    //   \"Own properties, properties that occur on the instance rather than the\n    //    prototype, can only be created inside of a class constructor or method.\n    //    It's recommended to create all possible own properties inside of the\n    //    constructor function so there's a single place that's responsible for\n    //    all of them.\"\n\n    /*\n     * Flag indicating whether or not this is a base unit\n     */\n    this.isBase_ = attrs['isBase_'] || false ;\n\n    /*\n     * The unit name, e.g., meter\n     */\n    this.name_ = attrs['name_'] || '';\n\n    /*\n     * The unit's case-sensitive code, e.g., m\n     */\n    this.csCode_ = attrs['csCode_'] || '';\n\n    /*\n     * The unit's case-insensitive code, e.g., M\n     */\n    this.ciCode_ = attrs['ciCode_'] || '';\n\n    /*\n     * The unit's property, e.g., length\n     */\n    this.property_ = attrs['property_'] || '';\n\n    /*\n     * The magnitude of the unit, e.g., 3600/3937 for a yard,\n     * where a yard - 3600/3973 * m(eter).  The Dimension\n     * property specifies the meter - which is the unit on which\n     * a yard is based, and this magnitude specifies how to figure\n     * this unit based on the base unit.\n     */\n    this.magnitude_ = attrs['magnitude_'] || 1;\n\n    /*\n     * The Dimension object of the unit\n     */\n    if (attrs['dim_'] === undefined || attrs['dim_'] === null) {\n      this.dim_ = new Dimension();\n    }\n    // When the unit data stored in json format is reloaded, the dimension data\n    // is recognized as a a hash, not as a Dimension object.\n    else if (attrs['dim_']['dimVec_'] !== undefined) {\n      this.dim_ = new Dimension(attrs['dim_']['dimVec_']) ;\n    }\n    else if (attrs['dim_'] instanceof Dimension) {\n      this.dim_ = attrs['dim_'];\n    }\n    else if (attrs['dim_'] instanceof Array || isInteger(attrs['dim_'])) {\n      this.dim_ = new Dimension(attrs['dim_']) ;\n    }\n    else {\n      this.dim_ = new Dimension();\n    }\n    /*\n     * The print symbol of the unit, e.g., m\n     */\n    this.printSymbol_ = attrs['printSymbol_'] || null;\n\n    /*\n     * The class of the unit, where given, e.g., dimless\n     */\n    this.class_ = attrs['class_'] || null;\n\n    /*\n     * A flag indicating whether or not the unit is metric\n     */\n    this.isMetric_ = attrs['isMetric_'] || false;\n\n    /*\n     * The \"variable\" - which I think is used only for base units\n     * The symbol for the variable as used in equations, e.g., s for distance\n     */\n    this.variable_ = attrs['variable_'] || null ;  // comes from 'dim' in XML\n\n    /*\n     * The conversion function\n     */\n    this.cnv_ = attrs['cnv_'] || null;\n\n    /*\n     * The conversion prefix\n     */\n    this.cnvPfx_ = attrs['cnvPfx_'] || 1;\n\n    /*\n     * Flag indicating whether or not this is a \"special\" unit, i.e., is\n     * constructed using a function specific to the measurement, e.g.,\n     * fahrenheit and celsius\n     */\n    this.isSpecial_ = attrs['isSpecial_'] || false ;\n\n    /*\n     * Flag indicating whether or not this is an arbitrary unit\n     */\n    this.isArbitrary_ = attrs['isArbitrary_'] || false;\n\n    /*\n     * Integer indicating what level of exponent applies to a mole-based portion\n     * of the unit.  So, for the unit \"mol\", this will be 1.  For \"mol2\" this\n     * will be 2.  For \"1/mol\" this will be -1.  Any unit that does not include\n     * a mole will have a 0 in this field.  This is used to determine\n     * commensurability for mole<->mass conversions.\n     */\n    this.moleExp_ = attrs['moleExp_'] || 0;\n\n    /*\n     * Added when added LOINC list of units\n     * synonyms are used by the autocompleter to enhance lookup capabilities\n     * while source says where the unit first shows up.  Current sources are\n     * UCUM - which are units from the unitsofmeasure.org list and LOINC -\n     * which are units from the LOINC data.\n     */\n    this.synonyms_ = attrs['synonyms_'] || null ;\n    this.source_ = attrs['source_'] || null ;\n    this.loincProperty_ = attrs['loincProperty_'] || null;\n    this.category_ = attrs['category_'] || null;\n    this.guidance_ = attrs['guidance_'] || null;\n\n    /*\n     * Used to compute dimension; storing for now until I complete\n     * unit definition parsing\n     */\n    /*\n     * Case sensitive (cs) and case insensitive (ci) base unit strings,\n     * includes exponent and prefix if applicable - specified in\n     * <value Unit=x UNIT=X value=\"nnn\">nnn</value> -- the unit part --\n     * in the ucum-essence.xml file, and may be specified by a user\n     * when requesting conversion or validation of a unit string.  The\n     * magnitude (base factor) is used with this to determine the new unit.\n     * For example, a Newton (unit code N) is created from the string\n     * kg.m/s2, and the value of 1 (base factor defined below). An hour\n     * (unit code h) is created from the unit min (minute) with a value\n     * of 60.\n     */\n    this.csUnitString_ = attrs['csUnitString_'] || null ;\n    this.ciUnitString_ = attrs['ciUnitString_'] || null ;\n\n    /*\n     * String and numeric versions of factor applied to unit specified in\n     * <value Unit=x UNIT=X value=\"nnn\">nnn</value> -- the value part\n     */\n    this.baseFactorStr_ = attrs['baseFactorStr_'] || null;\n    this.baseFactor_ = attrs['baseFactor_'] || null;\n\n    /*\n     * Flag used to indicate units where the definition process failed\n     * when parsing units from the official units definitions file\n     * (currently using the ucum-essence.xml file).  We keep these\n     * so that we can use them to at least validate them as valid\n     * units, but we don't try to convert them.   This is temporary\n     * and only to account for instances where the code does not\n     * take into account various special cases in the xml file.\n     *\n     * This is NOT used when trying to validate a unit string\n     * submitted during a conversion or validation attempt.\n     */\n    this.defError_ = attrs['defError_'] || false ;\n\n\n  } // end constructor\n\n\n  /**\n   * Assign the unity (= dimensionless unit 1) to this unit.\n   *\n   * @return this unit\n   */\n  assignUnity() {\n    this.name_  = \"\" ;\n    this.magnitude_ = 1 ;\n    if (!this.dim_)\n      this.dim_ = new Dimension();\n    this.dim_.assignZero() ;\n    this.cnv_ = null ;\n    this.cnvPfx_ = 1 ;\n    return this;\n\n  } // end assignUnity\n\n\n  /**\n   * This assigns one or more values, as provided in the hash passed in,\n   * to this unit.\n   *\n   * @param vals hash of values to be assigned to the attributes\n   *        specified by the key(s), which should be the attribute\n   *        name without the trailing underscore, e.g., name instead\n   *        of name_.\n   * @return nothing\n   */\n  assignVals(vals) {\n    for (let key in vals) {\n      let uKey = !(key.charAt(key.length - 1)) === '_' ? key + '_' : key ;\n      if (this.hasOwnProperty(uKey))\n        this[uKey] = vals[key];\n      else\n        throw(new Error(`Parameter error; ${key} is not a property of a Unit`));\n    }\n  } // end assignVals\n\n\n  /**\n   * This creates a clone of this unit.\n   *\n   * @return the clone\n   */\n  clone() {\n    let retUnit = new Unit() ;\n    Object.getOwnPropertyNames(this).forEach(val => {\n      if (val === 'dim_') {\n        if (this['dim_'])\n          retUnit['dim_'] = this['dim_'].clone();\n        else\n          retUnit['dim_'] = null;\n      }\n      else\n        retUnit[val] = this[val];\n    });\n    return retUnit ;\n\n  } // end clone\n\n\n  /**\n   * This assigns all properties of a unit passed to it to this unit.\n   *\n   * @param unit2 the unit whose properties are to be assigned to this one.\n   * @return nothing; this unit is updated\n   */\n  assign(unit2) {\n    Object.getOwnPropertyNames(unit2).forEach(val => {\n      if (val === 'dim_') {\n        if (unit2['dim_'])\n          this['dim_'] = unit2['dim_'].clone();\n        else\n          this['dim_'] = null;\n      }\n      else {\n        this[val] = unit2[val];\n      }\n    });\n  } // end assign\n\n\n  /**\n   * This determines whether or not object properties of the unit\n   * passed in are equal to the corresponding properties in this unit.\n   * The following properties are the only ones checked:\n   *   magnitude_, dim_, cnv_ and cnvPfx_\n   *\n   * @param unit2 the unit whose properties are to be checked.\n   * @return boolean indicating whether or not they match\n   */\n  equals(unit2) {\n\n    return (this.magnitude_ === unit2.magnitude_ &&\n            this.cnv_ === unit2.cnv_ &&\n            this.cnvPfx_ === unit2.cnvPfx_ &&\n            ((this.dim_ === null && unit2.dim_ === null) ||\n             this.dim_.equals(unit2.dim_)));\n\n  } // end equals\n\n\n  /**\n   * This method compares every attribute of two objects to determine\n   * if they all match.\n   *\n   * @param unit2 the unit that is to be compared to this unit\n   * @return boolean indicating whether or not every attribute matches\n   */\n  fullEquals(unit2) {\n\n    let thisAttr = Object.keys(this).sort();\n    let u2Attr = Object.keys(unit2).sort();\n\n    let keyLen = thisAttr.length ;\n    let match = (keyLen === u2Attr.length);\n\n    // check each attribute.   Dimension objects have to checked using\n    // the equals function of the Dimension class.\n    for (let k = 0; k < keyLen && match; k++) {\n      if (thisAttr[k] === u2Attr[k]) {\n        if (thisAttr[k] === 'dim_')\n          match = this.dim_.equals(unit2.dim_);\n        else\n          match = this[thisAttr[k]] === unit2[thisAttr[k]];\n      }\n      else\n        match = false ;\n    } // end do for each key and attribute\n    return match ;\n  }// end of fullEquals\n\n\n  /**\n   * This returns the value of the property named by the parameter\n   * passed in.\n   *\n   * @param propertyName name of the property to be returned, with\n   *        or without the trailing underscore.\n   * @return the requested property, if found for this unit\n   * @throws an error if the property is not found for this unit\n   */\n  getProperty(propertyName) {\n    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName :\n                                             propertyName + '_' ;\n    return this[uProp] ;\n\n  } // end getProperty\n\n\n  /**\n   * Takes a measurement consisting of a number of units and a unit and returns\n   * the equivalent number of this unit.  So, 15 mL would translate\n   * to 1 tablespoon if this object is a tablespoon.\n   *\n   * Note that the number returned may not be what is normally expected.\n   * For example, converting 10 Celsius units to Fahrenheit would \"normally\"\n   * return a value of 50.   But in this case you'll get back something like\n   * 49.99999999999994.\n   *\n   * If either unit is an arbitrary unit an exception is raised.\n   *\n   * @param num the magnitude for the unit to be translated (e.g. 15 for 15 mL)\n   * @param fromUnit the unit to be translated to one of this type (e.g. a mL unit)\n   *\n   * @return the number of converted units (e.g. 1 for 1 tablespoon)\n   * @throws an error if the dimension of the fromUnit differs from this unit's\n   * dimension\n   */\n  convertFrom(num, fromUnit) {\n    let newNum = 0.0 ;\n\n    if (this.isArbitrary_)\n      throw (new Error(`Attempt to convert to arbitrary unit \"${this.csCode_}\"`));\n    if (fromUnit.isArbitrary_)\n      throw (new Error(`Attempt to convert arbitrary unit \"${fromUnit.csCode_}\"`));\n\n    // reject request if both units have dimensions that are not equal\n    if (fromUnit.dim_ && this.dim_ && !(fromUnit.dim_.equals(this.dim_))) {\n      // check first to see if a mole<->mass conversion is appropriate\n      if (this.isMoleMassCommensurable(fromUnit)) {\n        throw(new Error(Ucum.needMoleWeightMsg_));\n      }\n      else {\n        throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n          `to ${this.csCode_}.`));\n      }\n    }\n    // reject request if there is a \"from\" dimension but no \"to\" dimension\n    if (fromUnit.dim_ && (!this.dim_ || this.dim_.isNull())) {\n      throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n        `to ${this.csCode_}.`));\n    }\n\n    // reject request if there is a \"to\" dimension but no \"from\" dimension\n    if (this.dim_ && (!fromUnit.dim_ || fromUnit.dim_.isNull())) {\n      throw(new Error(`Sorry.  ${fromUnit.csCode_} cannot be converted ` +\n        `to ${this.csCode_}.`));\n    }\n\n    let fromCnv = fromUnit.cnv_ ;\n    let fromMag = fromUnit.magnitude_ ;\n\n    let x;\n    if (fromCnv != null) {\n      // turn num * fromUnit.magnitude into its ratio scale equivalent,\n      // e.g., convert Celsius to Kelvin\n      let fromFunc = funcs.forName(fromCnv);\n      x = fromFunc.cnvFrom(num * fromUnit.cnvPfx_) * fromMag;\n      //x = fromFunc.cnvFrom(num * fromMag) * fromUnit.cnvPfx_;\n    }\n    else {\n      x = num * fromMag;\n    }\n\n    if (this.cnv_ != null) {\n      // turn mag * origUnit on ratio scale into a non-ratio unit,\n      // e.g. convert Kelvin to Fahrenheit\n      let toFunc = funcs.forName(this.cnv_);\n      newNum = toFunc.cnvTo(x / this.magnitude_) / this.cnvPfx_;\n    }\n    else {\n      newNum = x / this.magnitude_;\n    }\n\n    return newNum;\n\n  } // end convertFrom\n\n\n  /**\n   * Takes a number and a target unit and returns the number for a measurement\n   * of this unit that corresponds to the number of the target unit passed in.\n   * So, 1 tablespoon (where this unit represents a tablespoon) would translate\n   * to 15 mL.\n   *\n   * See the note on convertFrom about return values.\n   *\n   * @param mag the magnitude for this unit (e.g. 1 for 1 tablespoon)\n   * @param toUnit the unit to which this unit is to be translated\n   *  (e.g. an mL unit)\n   *\n   * @return the converted number value (e.g. 15 mL)\n   * @throws an error if the dimension of the toUnit differs from this unit's\n   *   dimension\n   */\n  convertTo(num, toUnit) {\n\n    return toUnit.convertFrom(num, this) ;\n\n  } // end convertTo\n\n\n  /**\n   * Takes a given number of this unit returns the number of this unit\n   * if it is converted into a coherent unit.  Does not change this unit.\n   *\n   * If this is a coherent unit already, just gives back the number\n   * passed in.\n   *\n   * @param num the number for the coherent version of this unit\n   * @return the number for the coherent version of this unit\n   */\n  convertCoherent(num) {\n\n    // convert mag' * u' into canonical number * u on ratio scale\n    if(this.cnv_ !== null)\n      num = this.cnv_.f_from(num / this.cnvPfx_) * this.magnitude_;\n\n    return num;\n\n  } // end convertCoherent\n\n\n  /**\n   * Mutates this unit into a coherent unit and converts a given number of\n   * units to the appropriate value for this unit as a coherent unit\n   *\n   * @param num the number for this unit before conversion\n   * @return the number of this unit after conversion\n   * @throws an error if the dimensions differ\n   */\n  mutateCoherent(num) {\n\n    // convert mu' * u' into canonical mu * u on ratio scale\n    num = this.convertCoherent(num) ;\n\n    // mutate to coherent unit\n    this.magnitude_ = 1;\n    this.cnv_ = null;\n    this.cnvPfx_ = 1;\n    this.name_ = \"\";\n\n    // build a name as a term of coherent base units\n    // This is probably ALL WRONG and a HORRIBLE MISTAKE\n    // but until we figure out what the heck the name being\n    // built here really is, it will have to stay.\n    for (let i = 0, max = Dimension.getMax(); i < max; i++) {\n      let elem = this.dim_.getElementAt(i);\n      let tabs = this._getUnitTables();\n      let uA = tabs.getUnitsByDimension(new Dimension(i));\n      if(uA == null)\n        throw(new Error(`Can't find base unit for dimension ${i}`));\n      this.name_ = uA.name + elem;\n    }\n    return num;\n\n  } // end mutateCoherent\n\n\n  /**\n   * Calculates the number of units that would result from converting a unit\n   * expressed in mass/grams to a unit expressed in moles.  The \"this\" unit is\n   * the unit expressed in some form of mass (g, mg, mmg, kg, whatever) and the\n   * target or \"to\" unit - the molUnit parameter - is a unit expressed in moles\n   * - mol, umol, mmol, etc.  The unit expressions surrounding the moles and\n   * mass must be convertible.  No validation of this requirement is performed.\n   *\n   * @param amt the quantity of this unit to be converted\n   * @param molUnit the target/to unit for which the converted # is wanted\n   * @param molecularWeight the molecular weight of the substance for which the\n   *  conversion is being made\n   * @return the equivalent amount in molUnit\n   */\n  convertMassToMol(amt, molUnit, molecularWeight) {\n    // The prefix values that have been applied to this unit, which is the mass\n    // (grams) unit, are reflected in the magnitude.  So the number of moles\n    // represented by this unit equals the number of grams -- amount * magnitude\n    // divided by the molecular Weight\n    let molAmt = (this.magnitude_ * amt)/molecularWeight ;\n    // The molUnit's basic magnitude, before prefixes are applied,\n    // is avogadro's number, get that and divide it out of the current magnitude.\n    let tabs = this._getUnitTables();\n    let avoNum = tabs.getUnitByCode('mol').magnitude_ ;\n    let molesFactor = molUnit.magnitude_ / avoNum ;\n    // return the molAmt divided by the molesFactor as the number of moles\n    // for the molUnit\n    return molAmt/molesFactor ;\n  }\n\n  /**\n   * Calculates the number of units that would result from converting a unit\n   * expressed in moles to a unit expressed in mass (grams).  The \"this\" unit\n   * is the unit expressed in some form of moles, e.g., mol, umol, mmol, etc.,\n   * and the target or \"to\" unit is a unit expressed in some form of mass, e.g.,\n   * g, mg, mmg, kg, etc.  Any unit expressions surrounding the moles and mass\n   * must be convertible. No validation of this requirement is performed.\n   *\n   * @param amt the quantity of this unit to be converted\n   * @param massUnit the target/to unit for which the converted # is wanted\n   * @param molecularWeight the molecular weight of the substance for which the\n   *  conversion is being made\n   * @return the equivalent amount in massUnit\n   */\n  convertMolToMass(amt, massUnit, molecularWeight) {\n    // A simple mole unit has a magnitude of avogadro's number.  Get that\n    // number now (since not everyone agrees on what it is, and what is\n    // being used in this system might change).\n    let tabs = this._getUnitTables();\n    let avoNum = tabs.getUnitByCode('mol').magnitude_ ;\n    // Determine what prefix values (mg or mg/dL, etc.) have been applied to\n    // this unit by dividing the simple mole unit magnitude out of the\n    // current mole unit magnitude.\n    let molesFactor = this.magnitude_ / avoNum ;\n    // The number of grams (mass) is equal to the number of moles (amt)\n    // times the molecular weight.  We also multiply that by the prefix values\n    // applied to the current unit (molesFactor) to get the grams for this\n    // particular unit.\n    let massAmt = (molesFactor * amt) * molecularWeight ;\n    // Finally, we return the mass amount/grams for this particular unit\n    // divided by any effects of prefixes applied to the \"to\" unit, which\n    // is assumed to be some form of a gram unit\n    return massAmt / massUnit.magnitude_ ;\n  }\n\n\n  /**\n   * Mutates this unit into a unit on a ratio scale and converts a specified\n   * number of units to an appropriate value for this converted unit\n   *\n   * @param num the number of this unit before it's converted\n   * @return the magnitude of this unit after it's converted\n   * @throw an error if the dimensions differ\n   */\n  mutateRatio(num) {\n    if (this.cnv_ == null)\n      return this.mutateCoherent(num);\n    else\n      return num;\n\n  } // end mutateRatio\n\n\n  /**\n   * Multiplies this unit with a scalar. Special meaning for\n   * special units so that (0.1*B) is 1 dB.\n   *\n   * This function DOES NOT modify this unit.\n   *\n   * @param s the value by which this unit is to be multiplied\n   * @return a copy this unit multiplied by s\n   * */\n  multiplyThis(s) {\n\n    let retUnit = this.clone() ;\n    if (retUnit.cnv_ != null)\n      retUnit.cnvPfx_ *= s;\n    else\n      retUnit.magnitude_ *= s;\n    let mulVal = s.toString();\n    retUnit.name_ = this._concatStrs(mulVal, '*', this.name_, '[', ']');\n    retUnit.csCode_ = this._concatStrs(mulVal, '.', this.csCode_, '(', ')');\n    retUnit.ciCode_ = this._concatStrs(mulVal, '.', this.ciCode_, '(', ')');\n    retUnit.printSymbol_ = this._concatStrs(mulVal, '.', this.printSymbol_,\n        '(', ')');\n\n    return retUnit;\n\n  } // end multiplyThis\n\n\n  /**\n   * Multiplies this unit with another unit. If one of the\n   * units is a non-ratio unit the other must be dimensionless or\n   * else an exception is thrown.\n   *\n   * This function does NOT modify this unit\n   * @param unit2 the unit to be multiplied with this one\n   * @return this unit after it is multiplied\n   * @throws an error if one of the units is not on a ratio-scale\n   *         and the other is not dimensionless.\n   */\n  multiplyThese(unit2) {\n\n    var retUnit = this.clone() ;\n\n    if (retUnit.cnv_ != null) {\n      if (unit2.cnv_ == null && (!unit2.dim_ || unit2.dim_.isZero()))\n        retUnit.cnvPfx_ *= unit2.magnitude_;\n      else\n        throw (new Error(`Attempt to multiply non-ratio unit ${retUnit.name_} ` +\n          'failed.'));\n    } // end if this unit has a conversion function\n\n    else if (unit2.cnv_ != null) {\n      if (!retUnit.dim_ || retUnit.dim_.isZero()) {\n        retUnit.cnvPfx_ = unit2.cnvPfx_ * retUnit.magnitude_;\n        retUnit.magnitude_ = unit2.magnitude_;\n        retUnit.cnv_ = unit2.cnv_ ;\n      }\n      else\n        throw (new Error(`Attempt to multiply non-ratio unit ${unit2.name_}`));\n    } // end if unit2 has a conversion function\n\n    // else neither unit has a conversion function\n    else {\n      retUnit.magnitude_ *= unit2.magnitude_;\n    } // end if unit2 does not have a conversion function\n\n    // If this.dim_ isn't there, clone the dimension in unit2 - if dimVec_\n    // is a dimension in unit2.dim_; else just transfer it to this dimension\n    if (!retUnit.dim_ || (retUnit.dim_ && !retUnit.dim_.dimVec_)) {\n      if (unit2.dim_)\n        retUnit.dim_ = unit2.dim_.clone();\n      else\n        retUnit.dim_ = unit2.dim_;\n    }\n    // Else this.dim_ is there.  If there is a dimension for unit2,\n    // add it to this one.\n    else if (unit2.dim_ && unit2.dim_ instanceof Dimension) {\n      retUnit.dim_.add(unit2.dim_);\n    }\n\n    // Concatenate the unit info (name, code, etc) for all cases\n    // where the multiplication was performed (an error wasn't thrown)\n    retUnit.name_ = this._concatStrs(retUnit.name_, '*', unit2.name_, '[', ']');\n    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '.', unit2.csCode_,\n      '(', ')');\n    if (retUnit.ciCode_ && unit2.ciCode_)\n      retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '.', unit2.ciCode_,\n        '(', ')');\n    else if (unit2.ciCode_)\n      retUnit.ciCode_ = unit2.ciCode_;\n    retUnit.resetFieldsForDerivedUnit();\n    if (retUnit.printSymbol_ && unit2.printSymbol_)\n      retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '.',\n        unit2.printSymbol_, '(', ')');\n    else if (unit2.printSymbol_)\n      retUnit.printSymbol_ = unit2.printSymbol_;\n\n    // Update the mole exponent count by adding the count for unit2 to the\n    // count for this unit.\n    retUnit.moleExp_ = retUnit.moleExp_ + unit2.moleExp_ ;\n\n    // A unit that has the arbitrary attribute taints any unit created from it\n    // via an arithmetic operation.  Taint accordingly\n    // if (!retUnit.isMole_)\n    //   retUnit.isMole_ = unit2.isMole_ ;\n    if (!retUnit.isArbitrary_)\n      retUnit.isArbitrary_ = unit2.isArbitrary_;\n\n    // Likewise for special units\n    if (!retUnit.isSpecial_)\n      retUnit.isSpecial_ = unit2.isSpecial_;\n\n    return retUnit ;\n\n  } // end multiplyThese\n\n\n  /**\n   *  Clears fields like isBase_, synonyms_, etc. when a unit has been cloned\n   *  from a known unit but it being used to construct a derived unit.\n   */\n  resetFieldsForDerivedUnit() {\n    this.guidance_ = '';\n    this.synonyms_ = null;\n    this.isBase_ = false;\n  }\n\n\n  /**\n   * Divides this unit by another unit. If this unit is not on a ratio\n   * scale an exception is raised. Mutating to a ratio scale unit\n   * is not possible for a unit, only for a measurement.\n   *\n   * This unit is NOT modified by this function.\n   * @param unit2 the unit by which to divide this one\n   * @return this unit after it is divided by unit2\n   * @throws an error if either of the units is not on a ratio scale.\n   * */\n  divide(unit2) {\n\n    var retUnit = this.clone();\n\n    if (retUnit.cnv_ != null)\n      throw (new Error(`Attempt to divide non-ratio unit ${retUnit.name_}`));\n    if (unit2.cnv_ != null)\n      throw (new Error(`Attempt to divide by non-ratio unit ${unit2.name_}`));\n\n    if (retUnit.name_ && unit2.name_)\n      retUnit.name_ = this._concatStrs(retUnit.name_, '/', unit2.name_, '[', ']');\n    else if (unit2.name_)\n      retUnit.name_ = unit2.invertString(unit2.name_);\n\n    retUnit.csCode_ = this._concatStrs(retUnit.csCode_, '/', unit2.csCode_,\n      '(', ')');\n\n    if (retUnit.ciCode_ && unit2.ciCode_)\n      retUnit.ciCode_ = this._concatStrs(retUnit.ciCode_, '/', unit2.ciCode_,\n      '(', ')');\n    else if (unit2.ciCode_)\n      retUnit.ciCode_ = unit2.invertString(unit2.ciCode_) ;\n\n    retUnit.resetFieldsForDerivedUnit();\n\n    retUnit.magnitude_ /= unit2.magnitude_;\n\n    if (retUnit.printSymbol_ && unit2.printSymbol_)\n      retUnit.printSymbol_ = this._concatStrs(retUnit.printSymbol_, '/',\n        unit2.printSymbol_, '(', ')');\n    else if (unit2.printSymbol_)\n      retUnit.printSymbol_ = unit2.invertString(unit2.printSymbol_);\n\n    // Continue if unit2 has a dimension object.\n    // If this object has a dimension object, subtract unit2's dim_ object from\n    // this one. The sub method will take care of cases where the dimVec_ arrays\n    // are missing on one or both dim_ objects.\n    if (unit2.dim_) {\n      if (retUnit.dim_) {\n        if (retUnit.dim_.isNull())\n          retUnit.dim_.assignZero();\n        retUnit.dim_ = retUnit.dim_.sub(unit2.dim_);\n      } // end if this.dim_ exists\n\n      // Else if this dim_ object is missing, clone unit2's dim_ object\n      // and give the inverted clone to this unit.\n      else\n        retUnit.dim_ = unit2.dim_.clone().minus();\n    } // end if unit2 has a dimension object\n\n    // Update the mole exponent count by subtracting the count for unit2 from\n    // the // count for this unit.\n    retUnit.moleExp_ = retUnit.moleExp_ - unit2.moleExp_ ;\n\n    // A unit that has the arbitrary attribute taints any unit created from\n    // it via an arithmetic operation.  Taint accordingly\n    // if (!retUnit.isMole_)\n    //   retUnit.isMole_ = unit2.isMole_ ;\n    if (!retUnit.isArbitrary_)\n      retUnit.isArbitrary_ = unit2.isArbitrary_;\n\n    return retUnit;\n\n  } // end divide\n\n\n  /**\n   * Invert this unit with respect to multiplication. If this unit is not\n   * on a ratio scale an exception is thrown. Mutating to a ratio scale unit\n   * is not possible for a unit, only for a measurement (the magnitude and\n   * dimension).\n   *\n   *  This unit is modified by this function.\n   * @return this unit after being inverted\n   * @throws and error if this unit is not on a ratio scale\n   */\n  invert() {\n\n    if (this.cnv_ != null)\n      throw (new Error(`Attempt to invert a non-ratio unit - ${this.name_}`));\n\n    this.name_ = this.invertString(this.name_);\n    this.magnitude_ = 1/this.magnitude_ ;\n    this.dim_.minus();\n    return this;\n\n  } // end invert\n\n\n  /**\n   * Inverts a string, where the string is assumed to be a code or a name\n   * of a division operation where the string is the divisor and the dividend\n   * is blank.\n   *\n   * @param the string to be inverted\n   * @return the inverted string\n   */\n  invertString(theString) {\n\n    if (theString.length > 0) {\n      // replace('<!', '</') is here to make sure closing html tags like </sup> are intact. See LF-2830.\n      let stringRep = theString.replace('/', \"!\").replace('.', '/').replace('<!', '</').replace(\"!\", '.');\n      switch(stringRep.charAt(0)) {\n        case '.' : theString = stringRep.substr(1); break;\n        case '/' : theString = stringRep; break;\n        default  : theString = \"/\" + stringRep;\n      }\n    }\n    return theString;\n\n  } // end invertString\n\n\n  /**\n   * This function handles concatenation of two strings and an operator.\n   * It's called to build unit data, e.g., unit name, unit code, etc., from\n   * two different units, joined by the specified operator.\n   *\n   * @param str1 the first string to appear in the result\n   * @param operator the operator ('*', '.' or '/') to appear between the strings\n   * @param str2 the second string to appear in the result\n   * @param startChar the starting character to be used, when needed, to\n   *  enclose a string\n   * @param endChar the ending character to be used, when needed, to enclose\n   *  a string\n   * @returns the built string\n   */\n  _concatStrs(str1, operator, str2, startChar, endChar) {\n\n    return this._buildOneString(str1, startChar, endChar) +\n      operator + this._buildOneString(str2, startChar, endChar) ;\n  }\n\n\n  /**\n   * This function handles creation of one string to be included in a\n   * concatenated string.   Basically it checks to see if the string\n   * needs to be enclosed either in parentheses or square brackets.\n   *\n   * The string is enclosed if it is not a number, is not already enclosed in a pair of\n   * parentheses or square brackets, and includes a period, and asterisk,\n   * a slash or a blank space.\n   *\n   * @param str the string\n   * @param startChar starting enclosing character\n   * @param endChar ending enclosing character\n   * @returns the string\n   */\n  _buildOneString(str, startChar, endChar) {\n    let ret = '' ;\n    if (intUtils_.isNumericString(str)) {\n      ret = str;\n    }\n    else {\n      if (str.charAt(0) === '(' && str.endsWith(')') || str.charAt(0) === '['  && str.endsWith(']')) {\n        ret = str;\n      }\n      else if (/[./* ]/.test(str)) {\n        ret = startChar + str + endChar ;\n      }\n      else {\n        ret = str ;\n      }\n    }\n    return ret ;\n  }\n\n\n  /**\n   * Raises the unit to a power.  For example\n   *  kg.m/s2 raised to the -2 power would be kg-2.m-2/s-4\n   *\n   * If this unit is not on a ratio scale an error is thrown. Mutating\n   * to a ratio scale unit is not possible for a unit, only for a\n   * measurement (magnitude and dimension).\n   *\n   * This is based on the pow method in Gunter Schadow's java version,\n   * although it uses javascript capabilities to simplify the processing.\n   *\n   * This unit is modified by this function\n   *\n   * @param p the power to with this unit is to be raise\n   * @return this unit after it is raised\n   * @throws an error if this unit is not on a ratio scale.\n   */\n  power(p) {\n\n    if (this.cnv_ != null)\n      throw (new Error(`Attempt to raise a non-ratio unit, ${this.name_}, ` +\n                       'to a power.'));\n\n    //this.name_ = UnitString.pow(this.name_, p);\n    // the above line is replaced with the code below, as the pow method\n    // never actually existing in the UnitString class.  (Tried to use\n    // Schadow java code but this way ended up being a lot easier).\n    let uStr = this.csCode_ ;\n    let uArray = uStr.match(/([./]|[^./]+)/g) ;\n    let arLen = uArray.length;\n\n    for (let i = 0; i < arLen; i++) {\n      let un = uArray[i] ;\n      if (un !== '/' && un !== '.') {\n        let nun = parseInt(un);\n        if (isInteger(nun))\n          uArray[i] = (Math.pow(nun, p).toString());\n        else {\n          let uLen = un.length ;\n          for (let u = uLen - 1; u >= 0; u--) {\n            let uChar = parseInt(un[u]);\n            if (!isInteger(uChar)) {\n              if (un[u] === '-' || un[u] === '+') {\n                u--;\n              }\n              if (u < uLen - 1) {\n                let exp = parseInt(un.substr(u));\n                exp = Math.pow(exp, p);\n                uArray[i] = un.substr(0, u) + exp.toString();\n                u = -1;\n              }\n              else {\n                uArray[i] += p.toString();\n                u = -1;\n              } // end if there are/aren't some numbers at the end\n              u = -1;\n            } // end if this character is not a number\n          } // end searching backwards for start of exponent\n        } // end if this element is not a number\n      } // end if the current element is not an operator\n    } // end do for each element of the units array\n\n    // reassemble the updated units array to a string\n    this.csCode_ = uArray.join('');\n\n    this.magnitude_ = Math.pow(this.magnitude_, p);\n    if (this.dim_) {\n      this.dim_.mul(p);\n    }\n    return this;\n\n  } // end power\n\n\n  /*\n   * This function tests this unit against the unit passed in to see if the\n   * two are mole to mass commensurable.  It assumes that one of the units\n   * is a mole-based unit and the other is a mass-based unit.  It also assumes\n   * that the mole-based unit has a single mole unit in the numerator and that\n   * the mass-based unit has a single mass unit in the numerator.  It does NOT\n   * check to validate those assumptions.\n   *\n   * The check is made by setting the dimension vector element corresponding\n   * to the base mass unit (gram) in the mole unit, and then comparing the\n   * two dimension vectors.  If they match, the units are commensurable.\n   * Otherwise they are not.\n   *\n   * @param unit2 the unit to be compared to this one\n   * @returns boolean indicating commensurability\n   */\n  isMoleMassCommensurable(unit2) {\n    let tabs = this._getUnitTables();\n    let d = tabs.getMassDimensionIndex();\n    let commensurable = false ;\n    if (this.moleExp_ === 1 && unit2.moleExp_ === 0) {\n      let testDim = this.dim_.clone();\n      let curVal = testDim.getElementAt(d);\n      testDim.setElementAt(d, (curVal + this.moleExp_));\n      commensurable = (testDim.equals(unit2.dim_));\n    }\n    else if (unit2.moleExp_ === 1 && this.moleExp_ === 0) {\n      let testDim = unit2.dim_.clone();\n      let curVal = testDim.getElementAt(d);\n      testDim.setElementAt(d, (curVal + unit2.moleExp_));\n      commensurable = (testDim.equals(this.dim_));\n    }\n    return commensurable ;\n  }\n\n\n  /**\n   * This returns the UnitTables singleton object.  Including the require\n   * statement included here causes a circular dependency condition that\n   * resulted in the UnitTables object not being defined for the Unit object.\n   * sigh.  Thanks, Paul, for figuring this out.\n   *\n   * @private\n   */\n  _getUnitTables() {\n    if (!UnitTables)\n      UnitTables = require('./unitTables.js').UnitTables;\n    return UnitTables.getInstance();\n  }\n\n} // end Unit class\n"],"mappings":"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"}