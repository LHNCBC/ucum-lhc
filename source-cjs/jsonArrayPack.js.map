{"version":3,"sources":["../source/jsonArrayPack.js"],"names":["pushFn","Array","prototype","push","isObject","value","Object","toString","call","createConfig","refObj","keys","reduce","config","key","apply","map","keyTail","concat","prepareConfig","isArray","packItem","item","join","Error","keyArr","place","forEach","undefined","unpackItem","result","i","length","packArray","arr","_config","data","bind","unpackArray","obj"],"mappings":"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","sourcesContent":["/**\n * This file provides functions to reduce the size of an array of objects of the same structure in JSON.\n */\nconst pushFn = Array.prototype.push;\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * Makes human readable config used to pack/unpack array of objects of the same structure to store with packed data.\n * @param {Object} refObj - reference item of array of objects of the same structure\n * @returns {Array}\n */\nfunction createConfig(refObj) {\n  return Object.keys(refObj).reduce((config, key) => {\n    if (isObject(refObj[key])) {\n      pushFn.apply(config, createConfig(refObj[key]).map(keyTail => [key, ...[].concat(keyTail)]));\n    } else {\n      config.push(key);\n    }\n    return config;\n  }, [])\n}\n\n/**\n * Prepares config created with createConfig function to use in packItem/unpackItem functions.\n * @param {Array} config\n * @returns {Array}\n */\nfunction prepareConfig(config) {\n  return config.map(key => Array.isArray(key) ? key : [key]);\n}\n\n/**\n * Converts an object to an array of values in the order of keys from configuration array.\n * @param {Array} config - configuration array\n * @param {Object} item - input object\n * @returns {Array}\n */\nfunction packItem(config, item) {\n  if (config.join() !== prepareConfig(createConfig(item)).join()) {\n    throw new Error('Object of unusual structure')\n  }\n\n  return config.map(keyArr => {\n    let place = item;\n    keyArr.forEach(key => {\n      place = place[key];\n      if (place === undefined) {\n        throw new Error('Object of unusual structure')\n      }\n    });\n    return place;\n  });\n}\n\n/**\n * Performs the reverse of packItem function.\n * @param {Array} config - configuration array\n * @param {Array} item - input object\n * @returns {Object}\n */\nfunction unpackItem(config, item) {\n  let result = {};\n\n  config.forEach((keyArr, i) => {\n    let place = result;\n    for (let i = 0; i < keyArr.length - 1; i++) {\n      place = place[keyArr[i]] = place[keyArr[i]] || {};\n    }\n    place[keyArr[keyArr.length - 1]] = item[i];\n  });\n\n  return result;\n}\n\n/**\n * Reduces size of an array of objects of the same structure before serialize it to JSON\n * @param {Array} arr\n * @returns {Object}\n */\nexport function packArray(arr) {\n  if (arr && arr.length) {\n    const config = createConfig(arr[0]),\n      _config = prepareConfig(config);\n\n    if (config.length) {\n      return {\n        config: config,\n        data: arr.map(packItem.bind(null, _config))\n      };\n    }\n  }\n\n  return {\n    config: [],\n    data: arr\n  };\n}\n\n/**\n * Restores an array of objects of the same structure after deserializing this object from JSON\n * @param {Object} obj\n * @returns {Array}\n */\nexport function unpackArray(obj) {\n  const config = obj && obj.config;\n\n  if (config) {\n    if (config.length && obj.data) {\n      const _config = prepareConfig(config);\n\n      return obj.data.map(unpackItem.bind(null, _config));\n    } else {\n      return obj.data;\n    }\n  }\n\n  return obj;\n}"],"file":"jsonArrayPack.js"}