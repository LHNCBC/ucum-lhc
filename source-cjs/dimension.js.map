{"version":3,"file":"dimension.js","names":["UC","require","isInteger","Dimension","constructor","dimSetting","Ucum","dimLen_","Error","undefined","assignZero","Array","length","JSON","stringify","dimVec_","d","push","setElementAt","indexPos","value","getElementAt","ret","getProperty","propertyName","uProp","charAt","toString","join","add","dim2","i","sub","minus","mul","s","equals","isEqual","dimVec2","assignDim","isZero","allZero","isNull","clone","that","exports"],"sources":["../source/dimension.js"],"sourcesContent":["/**\n * This class implements an object containing the vector of exponents for\n * a unit and its operations for addition, subtraction, and multiplication\n * with a scalar.\n *\n * This object should exist for each unit that can be expressed as a\n * vector of numbers.   This excludes arbitrary units, e.g., (10*23), and\n * units that are not numbers but are an expression based solely on numbers,\n * e.g., mol (mole) which is based on 10*23.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n */\nvar UC = require('./config.js');\nvar isInteger = require(\"is-integer\");\nexport class Dimension {\n\n  /**\n   * Constructor.\n   *\n   * @param dimSetting an optional parameter that may be:\n   *  null, which means that the dimVec_ attribute for this object will be null; or\n   *  an array, which must be the length defined by Ucum.dimLen_, and\n   *    whose contents will be copied to this new object's vector; or\n   *  an integer, which must be between 0 and 1 less than the vector length\n   *    defined by Ucum.dimLen_.  This new object's vector will be\n   *    initialized to zero for all elements except the one whose index\n   *    matches the number passed in.  That element will be set to one.\n\n   * @throws an error if the dimSetting parameter does not meet the types\n   *  listed above.\n   *  An error will also be thrown if Ucum.dimLen_ has not been set yet,\n   *  i.e., is still zero.   Currently that won't happen, because the\n   *  value is set in the config.js file.  But further down the road\n   *  the setting will come from a definitions input file, so we check\n   *  here anyway.\n   *\n   */\n  constructor(dimSetting) {\n\n    if (UC.Ucum.dimLen_ === 0) {\n      throw(new Error('Dimension.setDimensionLen must be called before ' +\n      'Dimension constructor'));\n    }\n    if (dimSetting === undefined || dimSetting === null) {\n      this.assignZero() ;\n    }\n    else if (dimSetting instanceof Array) {\n      if (dimSetting.length !== UC.Ucum.dimLen_) {\n        throw(new Error('Parameter error, incorrect length of vector passed to ' +\n            `Dimension constructor, vector = ${JSON.stringify(dimSetting)}`));\n      }\n      this.dimVec_ = [];\n      for (let d = 0; d < UC.Ucum.dimLen_; d++)\n        this.dimVec_.push(dimSetting[d]);\n    }\n\n    // In es6 this should be Number.isInteger(dimSetting).  But Babel\n    // doesn't transpile that correctly, so we need to use the isInteger\n    // module.  :0\n    else if (isInteger(dimSetting)) {\n      if (dimSetting < 0 || dimSetting >= UC.Ucum.dimLen_) {\n        throw(new Error('Parameter error, invalid element number specified for ' +\n        'Dimension constructor'));\n      }\n      this.assignZero() ;\n      this.dimVec_[dimSetting] = 1;\n    }\n  } // end constructor\n\n\n  /**\n   * Sets the element at the specified position to a specified value.  The\n   * default value is 1.  If the dimension vector is null when this is called\n   * a zero-filled vector is created and then the indicated position is set.\n   *\n   * @param indexPos the index of the element to be set\n   * @param value the value to assign to the specified element; optional,\n   *  default value is 1\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n  setElementAt(indexPos, value) {\n\n    if (!isInteger(indexPos) ||\n        indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw(new Error(`Dimension.setElementAt called with an invalid index ` +\n      `position (${indexPos})`));\n    }\n\n    if (!this.dimVec_) {\n      this.assignZero();\n    }\n    if (value === undefined || value === null)\n      value = 1 ;\n\n    this.dimVec_[indexPos] = value;\n  }\n\n\n  /**\n   * Gets the value of the element at the specified position\n   *\n   * @param indexPos the index of the element whose value is to be returned\n   * @return the value of the element at indexPos, or null if the dimension\n   *  vector is null\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n  getElementAt(indexPos) {\n    if (!isInteger(indexPos) ||\n        indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw(new Error(`Dimension.getElementAt called with an invalid index ` +\n      `position (${indexPos})`));\n    }\n    let ret = null;\n    if (this.dimVec_)\n      ret = this.dimVec_[indexPos];\n    return ret;\n  }\n\n\n  /**\n   * This returns the value of the property named by the parameter\n   * passed in.  Although we currently only have one property, dimVec_,\n   * that this will get, it's possible that we'll have additional\n   * properties.   If we don't this could just be replaced by a\n   * getVector function.\n   *\n   * @param propertyName name of the property to be returned, with\n   *        or without the trailing underscore.\n   * @return the requested property, if found for this Dimension\n   * @throws an error if the property is not found for this Dimension\n   */\n  getProperty(propertyName) {\n    let uProp = propertyName.charAt(propertyName.length - 1) === '_' ? propertyName : propertyName + '_';\n\n    return this[uProp] ;\n\n  } // end getProperty\n\n\n  /**\n   * Return a string that represents the dimension vector.  Returns null if\n   * the dimension vector is null.\n   *\n   * @return the string that represents the dimension vector.  The\n   *         values are enclosed in square brackets, each separated\n   *         by a comma and a space\n   **/\n  toString() {\n    let ret = null ;\n    if (this.dimVec_)\n      ret = '[' + this.dimVec_.join(', ') + ']';\n    return ret ;\n  }\n\n\n  /**\n   * Adds the vector of the dimension object passed in to this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   *\n   * @param dim2 the dimension whose vector is to be added to this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n  add(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.add called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] += dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Subtracts the vector of the dimension object passed in from this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   * @param dim2 the dimension whose vector is to be subtracted from this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n  sub(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.sub called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] -= dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Inverts this dimension object's vector (by multiplying each element\n   * by negative 1).  This object's vector is changed - unless it is null,\n   * in which case it stays that way.\n   *\n   * @return this object\n   **/\n  minus() {\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] = -this.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Multiplies this dimension object's vector with a scalar.  This is used\n   * when a unit is raised to a power.  This object's vector is changed unless\n   * the vector is null, in which case it stays that way.\n   *\n   * @param s the scalar to use\n   * @return this object\n   * @throws an exception if s is not a number\n   */\n  mul(s) {\n    if (!isInteger(s)) {\n      throw(new Error(`Dimension.sub called with an invalid parameter - ` +\n      `${typeof dim2} instead of a number`));\n    }\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] *= s;\n    }\n    return this;\n  }\n\n\n  /**\n   * Tests for equality of this dimension object's vector and that of\n   * the dimension object passed in.  If the dimension vector for one of\n   * the objects is null, the dimension vector for the other object must\n   * also be null for the two to be equal.  (I know - duh.  still)\n   *\n   * @param dim2 the dimension object whose vector is to be compared to this one\n   * @return true if the two vectors are equal; false otherwise.\n   * @throws an exception if dim2 is not a Dimension object\n   */\n  equals(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.equals called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    let isEqual = true ;\n    let dimVec2 = dim2.dimVec_;\n    if (this.dimVec_ && dimVec2) {\n      for (let i = 0; isEqual && i < UC.Ucum.dimLen_; i++)\n        isEqual = (this.dimVec_[i] === dimVec2[i]);\n    }\n    else {\n      isEqual = (this.dimVec_ === null && dimVec2 === null);\n    }\n    return isEqual;\n  }\n\n\n  /**\n   * Assigns the contents of the vector belonging to the dimension object\n   * passed in to this dimension's vector.  If this dimension vector is null\n   * and the other is not, this one will get the contents of the other.  If\n   * this dimension vector is not null but the one passed in is null, this\n   * one will be set to null.\n   *\n   * @param dim2 the dimension object with the vector whose contents are\n   *  to be assigned to this dimension's vector\n   * @return this object (not sure why)\n   * @throws an exception if dim2 is not a Dimension object\n   */\n  assignDim(dim2) {\n\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.assignDim called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (dim2.dimVec_ === null)\n      this.dimVec_ = null;\n    else {\n      if (this.dimVec_ === null) {\n        this.dimVec_ = [] ;\n      }\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] = dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Sets all elements of this dimension object's vector to zero.\n   * If this object's vector is null, it is created as a zero-filled vector.\n   *\n   * @return this object (not sure why)\n   */\n  assignZero() {\n    if (this.dimVec_ === null || this.dimVec_ === undefined)\n      this.dimVec_ = [];\n\n    for (let i = 0; i < UC.Ucum.dimLen_; i++) {\n      this.dimVec_.push(0);\n    }\n    return this;\n  }\n\n\n  /**\n   * Tests for a dimension vector set to all zeroes.\n   *\n   * @return true if exponents (elements) of this dimension's vector are all\n   * zero; false otherwise (including if the current vector is null).\n   *\n   */\n  isZero() {\n    let allZero = this.dimVec_ !== null ;\n    if (this.dimVec_) {\n      for (let i = 0; allZero && i < UC.Ucum.dimLen_; i++)\n        allZero = this.dimVec_[i] === 0;\n    }\n    return allZero;\n  }\n\n\n  /**\n   * Tests for a Dimension object with no dimension vector (dimVec_ is null).\n   *\n   * @return true the dimension vector is null; false if it is not\n   *\n   */\n  isNull() {\n    return (this.dimVec_ === null);\n  }\n\n\n  /**\n   * Creates and returns a clone of this Dimension object\n   *\n   * @return the clone\n   */\n  clone() {\n    let that = new Dimension();\n    that.assignDim(this);\n    return that;\n  }\n\n} // end Dimension class\n"],"mappings":"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"}