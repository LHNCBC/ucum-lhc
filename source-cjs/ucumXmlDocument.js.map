{"version":3,"sources":["../source/ucumXmlDocument.js"],"names":["Prefix","require","PrefixTables","Unit","UnitString","UnitTables","packArray","jsonfile","xmldoc","fs","essenceFile_","xmlInput_","UcumXmlDocument","constructor","data","readFileSync","XmlDocument","moleCodes_","holdThis","prototype","Error","exports","self","getInstance","parseXml","parsePrefixes","childrenNamed","parseBaseUnits","parseUnitStrings","writeJsonFile","writeVersionText","prefixes","plen","length","p","curPfx","attrs","attr","Code","CODE","childNamed","val","pValNode","Math","pow","ptab","isDefined","newPref","add","unitNodes","blen","utab","b","curBUnit","dim","newUnit","addUnit","unitStrings","uStrParser","stopNow","alen","a","haveUnit","curUA","toUpperCase","sym","symVal","replace","trim","symI","toString","compressed","sub","sup","isMetric","isArbitrary","class","valNode","indexOf","isSpecial","funcNode","name","parseFloat","value","slashPos","ar","split","UNIT","substr","exp","parseInt","console","log","PI","retObj","parseString","ret","retString","retMsg","getProperty","newMag","err","message","uList","printUnits","writeFileSync","encoding","mode","flag","licenseText","pfxTabs","pfxArray","allPrefixesByCode","uTabs","uArray","allUnitsByDef","defsHash","dt","Date","spaces","rootNode","versionNum","version","revNum","revision","rootString","dateIdx","nextDolIdx","revDate","versionText"],"mappings":"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","sourcesContent":["/**\n * This class handles opening, reading and parsing the XML file of ucum\n * definitions (prefixes, base units, and unit atoms).\n *\n * @author Lee Mericle\n *\n */\nvar Prefix = require(\"./prefix.js\").Prefix;\nvar PrefixTables = require(\"./prefixTables.js\").PrefixTables;\nvar Unit = require(\"./unit.js\").Unit;\nvar UnitString = require(\"./unitString.js\").UnitString;\nvar UnitTables = require('./unitTables.js').UnitTables;\nvar packArray = require('./jsonArrayPack.js').packArray;\nvar jsonfile = require('jsonfile');\n\nvar xmldoc = require('xmldoc');\nvar fs = require('fs');\n\nvar essenceFile_ = '../data/ucum-essence.xml';\n\n/**\n * The full xml document\n * @type XmlDocument\n */\nvar xmlInput_ = null;\n\nexport class UcumXmlDocument {\n\n\n  /**\n   * Constructor.  This reads the XML document (essenceFile_) into the\n   * xmldoc object, which is an object used by the xmldoc class available\n   * from GitHub - https://github.com/nfarina/xmldoc.  The object provides\n   * methods to read the file and access its contents.\n   *\n   */\n  constructor() {\n    // read the XML file and create an xmlDocument object from it.\n    let data = fs.readFileSync(essenceFile_);\n    xmlInput_ = new xmldoc.XmlDocument(data);\n\n    // Array of unit codes in the ucum-essence.xml file that indicate a\n    // mole based unit.  The moleExp_ attribute for these units needs to be\n    // set, but there doesn't seem to be an algorithmic way to find these.\n    // Creation of unit objects after this file is processed will pick up\n    // the moleExp_ value from the base mole unit, but the ones defined in\n    // this file will not necessarily do that.\n    this.moleCodes_ = ['mol', 'eq', 'osm', 'kat', 'U' ];\n\n    // Make this a singleton.  See UnitTables constructor for details.\n\n    let holdThis = UcumXmlDocument.prototype;\n    UcumXmlDocument = function () {\n      throw (new Error('UcumXmlDocument is a Singleton.  ' +\n          'Use UcumXmlDocument.getInstance() instead.'));\n    };\n    if (exports)\n      exports.UcumXmlDocument = UcumXmlDocument;\n    UcumXmlDocument.prototype = holdThis;\n\n    let self = this ;\n    UcumXmlDocument.getInstance = function(){return self} ;\n  }\n\n\n  /**\n   * This method controls parsing of the XML into objects used by this\n   * program.  It uses separate methods to parse the prefixes, the\n   * base units, and the units.\n   *\n   * @returns nothing\n   */\n  parseXml() {\n\n    this.parsePrefixes(xmlInput_.childrenNamed(\"prefix\"));\n    this.parseBaseUnits(xmlInput_.childrenNamed(\"base-unit\")) ;\n    this.parseUnitStrings(xmlInput_.childrenNamed(\"unit\")) ;\n\n    // Create or replace the json file of the prefix and unit definitions\n    this.writeJsonFile();\n    this.writeVersionText();\n\n  }\n\n\n  /**\n   * Creates prefix objects from the xml prefix nodes passed in and gets\n   * them added to the prefix tables.\n   *\n   * @params prefixes the array of prefix nodes from the xml file, in the\n   *  order in which the nodes are defined in that file.\n   *\n   * @returns nothing\n   */\n  parsePrefixes(prefixes) {\n\n\n    let plen = prefixes.length ;\n\n    for (let p = 0; p < plen; p++) {\n      let curPfx = prefixes[p];\n      let attrs = {} ;\n\n      attrs[\"code_\"] = curPfx.attr.Code;\n      attrs[\"ciCode_\"] = curPfx.attr.CODE;\n      attrs[\"name_\"] = curPfx.childNamed('name').val;\n      attrs[\"printSymbol_\"] = curPfx.childNamed('printSymbol').val;\n\n      // Set the prefix value.  If there is a <sup> element in the\n      // value node, then this is a base 10 based prefix (10 to the x power).\n      // Set the value to 10 taken to the indicated power.\n      // Otherwise this is not 10 based and the value contains the\n      // actual value for the prefix.\n      let pValNode = curPfx.childNamed('value') ;\n      attrs[\"value_\"] = null;\n      attrs[\"exp_\"] = pValNode.childNamed('sup');\n      if (attrs[\"exp_\"] != null) {\n        attrs[\"exp_\"] = attrs[\"exp_\"].val;\n        attrs[\"value_\"] = Math.pow(10, attrs[\"exp_\"]);\n      }\n      else {\n        attrs[\"value_\"] = pValNode.val;\n        attrs[\"exp_\"] = null;\n      }\n\n      // Make sure the prefix has not already been created.  If it hasn't,\n      // create the prefix object and then add it to the prefix tables.\n      let ptab = PrefixTables.getInstance();\n      if (ptab.isDefined(attrs[\"code_\"])) {\n        throw(new Error('Prefix constructor called for prefix already ' +\n                        `defined; code = ${attrs[\"code_\"]}`));\n      }\n      else {\n        let newPref = new Prefix(attrs);\n        ptab.add(newPref);\n      }\n    }\n  } // end parsePrefixes\n\n\n  /**\n   * Creates base unit objects from the xml nodes passed in and adds\n   * them to the unit tables.\n   *\n   * @params unitNodes the array of base unit nodes from the xml file, in the\n   *  order in which the nodes are defined in that file.  (Order is important\n   *  for all units).\n   *\n   * @returns nothing\n   */\n  parseBaseUnits(unitNodes) {\n    let blen = unitNodes.length ;\n    let utab = UnitTables.getInstance() ;\n    for (let b = 0; b < blen; b++) {\n      let curBUnit = unitNodes[b];\n      let attrs = {} ;\n      attrs['isBase_'] = true ;\n      attrs['name_'] = curBUnit.childNamed('name').val ;\n      attrs['csCode_'] = curBUnit.attr.Code ;\n      attrs['ciCode_'] = curBUnit.attr.CODE ;\n      attrs['property_'] = curBUnit.childNamed('property').val;\n      attrs['variable_'] = curBUnit.attr.dim ;\n      attrs['printSymbol_'] = curBUnit.childNamed('printSymbol').val;\n      attrs['dim_'] = b ;\n      attrs['source_'] = 'UCUM';\n      let newUnit = new Unit(attrs);\n      utab.addUnit(newUnit) ;\n    }\n  } // end parseBaseUnits\n\n\n  /**\n   * Creates non-base unit objects from the xml nodes passed in and adds\n   * them to the unit tables.\n   *\n   * @params unitStrings the array of non-base unit nodes from the xml file, in the\n   *  order in which the nodes are defined in that file.  (Order is important\n   *  for all units).\n   *\n   * @returns nothing\n   */\n  parseUnitStrings(unitStrings) {\n\n    let utab = UnitTables.getInstance() ;\n    let uStrParser = UnitString.getInstance();\n    let stopNow = false ;\n    let alen = unitStrings.length ;\n    for (let a = 0; a < alen && !stopNow; a++) {\n      let haveUnit = true;\n      let curUA = unitStrings[a];\n      let attrs = {};\n      attrs['isBase_'] = false;\n      attrs['source_'] = 'UCUM';\n      attrs['name_'] = curUA.childNamed('name').val;\n      attrs['csCode_'] = curUA.attr.Code;\n      if (curUA.attr.CODE)\n        attrs['ciCode_'] = curUA.attr.CODE;\n      else\n        attrs['ciCode_'] = curUA.attr.Code.toUpperCase();\n      attrs['property_'] = curUA.childNamed('property').val;\n      if (curUA.childNamed('printSymbol')) {\n        let sym = curUA.childNamed('printSymbol') ;\n        let symVal = sym.val;\n        symVal = symVal.replace(/\\n/g, \"\");\n        symVal = symVal.trim();\n        let symI = sym.childNamed('i');\n        if (symI)\n          //symVal = '<i>' + symI.val + '</>';\n          symVal = symI.toString({compressed:true});\n        let sub = sym.childNamed('sub');\n        let sup = sym.childNamed('sup');\n        if (sub)\n          symVal += sub.toString({compressed:true});\n        if (sup)\n          symVal += sup.toString({compressed:true});\n\n        attrs['printSymbol_'] = symVal;\n      }\n      if (curUA.attr.isMetric === \"yes\")\n        attrs['isMetric_'] = true ;\n      else\n        attrs['isMetric_'] = false ;\n      if (curUA.attr.isArbitrary)\n        attrs['isArbitrary_'] = true ;\n      else\n        attrs['isArbitrary_'] = false ;\n      if (curUA.attr.class) {\n        attrs['class_'] = curUA.attr.class;\n      }\n      let valNode = curUA.childNamed('value');\n      if (this.moleCodes_.indexOf(curUA.attr.Code) !== -1)\n        attrs['moleExp_'] = 1;\n      else\n        attrs['moleExp_'] = 0;\n\n\n      // Process special units\n      if (curUA.attr.isSpecial) {\n        attrs['isSpecial_'] = curUA.attr.isSpecial === \"yes\";\n        let funcNode = valNode.childNamed('function');\n        attrs['cnv_'] = funcNode.attr.name;\n        attrs['csUnitString_'] = funcNode.attr.Unit;\n        if (attrs['csUnitString_'] === '1') {\n          attrs['baseFactor_'] = 1 ;\n        }\n        else if (attrs['csCode_'] === '[pH]') {\n          attrs['baseFactor_'] = parseFloat(funcNode.attr.value) ;\n        }\n        else {\n          let slashPos = attrs['csUnitString_'].indexOf('/');\n          let ar = [];\n\n          // unit string = K/9 or K/4 or m2/s4/Hz\n          if (slashPos >= 0) {\n            ar = attrs['csUnitString_'].split('/');\n          }\n          // unit string = K/9 or K/4\n          if ((slashPos >= 0) && (ar.length === 2)) {\n            attrs['csUnitString_'] = ar[0];\n            attrs['baseFactor_'] = parseFloat(funcNode.attr.value/ar[1]);\n          }\n          // unit string = 10*-5.Pa\n          else if (attrs['csCode_'] === 'B[SPL]') {\n            attrs['baseFactor_'] =  Math.pow(10, -5) * 2 ;\n            attrs['csUnitString_'] = \"Pa\" ;\n          }\n          // unit string = m1/s4/Hz, K, deg, V, mV, uV, nV, W, kW\n          else {\n            attrs['baseFactor_'] = parseFloat(funcNode.attr.value);\n          }\n        } // end if the unit string is not 1\n      } // end if the unit is special\n\n      else {\n        // what I'm calling the unit string is the string that defines the\n        // unit based on other units, e.g., rad2 (radian squared) to define\n        // a steradian unit.  It's not necessarily a proper base unit, although\n        // it ultimately builds on base units.\n        attrs['csUnitString_'] = valNode.attr.Unit;\n        attrs['ciUnitString_'] = valNode.attr.UNIT;\n\n        // what I'm calling the factor here (string and number versions)\n        // is the magnitude used in conjunction with the unit string to define\n        // the new unit, e.g., 3 for a yard that is based in the definition\n        // of feet.\n\n        attrs['baseFactorStr_'] = valNode.attr.value;\n        if (attrs['csCode_'] === '[pi]')\n          attrs['baseFactor_'] = parseFloat(attrs['baseFactorStr_']);\n        else if (valNode.childNamed('sup')) {\n          attrs['baseFactor_'] = parseFloat(valNode.attr.value) ;\n        }\n        else {\n          attrs['baseFactor_'] = parseFloat(valNode.val);\n        }\n      } // end if this is not a special unit\n\n      // Arbitrary units are defined in the UCUM spec as \"not of any\n      // specific dimension and are not commensurable with any other\n      // unit\" (3.2.24).  All arbitrary units in the units definition\n      // XML file currently have a unit string of 1 and a base factor of 1\n      // except the \"international unit\" with a code of [IU].  Its\n      // unit string is the \"international unit\" with a code of [iU],\n      // which is also an arbitrary unit - with a unit string of 1.\n      // So I am assuming [IU] is just another code for the same unit.\n      if (attrs['isArbitrary_'] === true) {\n        attrs['magnitude_'] = 1;\n        attrs['dim_'] = null;\n      }\n\n      // units with class = \"dimless\" don't have dimension arrays.\n      // They're things like the number pi or the number 10 or percent.\n      // Haven't figured out how to handle them yet.\n      else if (attrs['class_'] === 'dimless' ||\n               attrs['csCode_'] === 'mol') {\n        attrs['dim_'] = null ;\n        // figure the magnitude based on the unit string\n        // if it's 1, the magnitude is the value specified for\n        // the base factor, e.g., 3.141592653589793238462 ... for pi\n        if (attrs['csUnitString_'] === '1') {\n          attrs['magnitude_'] = attrs['baseFactor_'];\n        }\n        // else if the unit string starts with 10*, the magnitude is\n        // 10 to the power specified following 10* e.g., unit = 10*-2\n        // for the \"%\" unit.  Except for the mole, which is that\n        // multiplied by the base factor, which in this case (only,\n        // I think) is not 1.\n        else if (attrs['csUnitString_'].substr(0,3) == \"10*\") {\n          let exp = parseInt(attrs['csUnitString_'].substr(3));\n          attrs['magnitude_'] = Math.pow(10, exp) ;\n          if (attrs['baseFactor_'] !== 1) {\n            attrs['magnitude_'] *= attrs['baseFactor_'];\n          }\n        }\n        // else I don't know what it is.\n        else {\n          attrs['defError_'] = true ;\n          console.log('unexpected dimless unit definition, unit code ' +\n                      'is ' + attrs['csCode_']) ;\n        }\n      } // end if this is a unit with class = dimless\n\n      // Handle carat of gold alloys - which doesn't get a dimension\n      //\n      else if (attrs['csCode_'] === \"[car_Au]\") {\n        attrs['magnitude_'] = 1/24 ;\n        attrs['dim_'] = null ;\n      }\n      else {\n\n        // Make sure there's a unit string to base the new unit on.  There\n        // should be, but I'm just checking here to make sure.  And omit\n        // ones with a unit string of 1.  That won't do us any good.\n        if (attrs['csUnitString_'] && attrs['csUnitString_'] !== '1' &&\n            attrs['csUnitString_'] !== 1) {\n\n          haveUnit = false;\n          // Handle some special cases\n          // 1. the Oersted unit, whose string is /[pi].A/m and whose\n          //    value is 250.  Set the baseFactor to 250/[pi] and\n          //    the unit string to A/m\n          if (attrs['csCode_'] === 'Oe') {\n            attrs['baseFactor_'] = 250 / Math.PI;\n            attrs['csUnitString_'] = \"A/m\"\n          }\n          // 2.  Strings that start with '/'.  Set the function to\n          //     the inverse function and trim the '/' off the front\n          //     of the string.\n          else if (attrs['csUnitString_'][0] === '/') {\n            attrs['cnv_'] = 'inv';\n            attrs['csUnitString_'] = attrs['csUnitString_'].substr(1);\n          }\n          // 3.  the Svedberg unit, whose string is 10*-13.s.  Set the\n          //     base factor to 10*-13 and the unit string to s.\n          else if (attrs['csCode_'] === '[S]') {\n            attrs['baseFactor_'] = Math.pow(10, -13);\n            attrs['csUnitString_'] = 's';\n          }\n          // 4.  permeability of vaccuum - code [mu_0], unit given is\n          //     4.[pi].10*-7.N/A2\n          else if (attrs['csCode_'] === '[mu_0]') {\n            attrs['baseFactor_'] = 4 * Math.PI * Math.pow(10, -7);\n            attrs['csUnitString_'] = 'N/A2';\n          }\n          // The unit string parser will use the unit(s) named in the\n          // string to create a new unit with the appropriate dimension\n          // object and magnitude before it's multiplied by the one\n          // specified in the input node.\n          try {\n            let retObj = uStrParser.parseString(attrs['csUnitString_'],\n                                                'validate', false);\n            let ret = retObj[0];\n            let retString = retObj[1];\n            let retMsg = retObj[2];\n\n            // Get the dimension object and magnitude (and adjust by\n            // specified magnitude factor) from the unit created and\n            // assign them to the attributes we'll use to create the\n            // unit for this listing.\n            if (ret) {\n              attrs['dim_'] = ret.getProperty('dim_');\n              let newMag = ret.getProperty('magnitude_');\n              newMag *= attrs['baseFactor_'];\n              attrs['magnitude_'] = newMag;\n              haveUnit = true ;\n            }\n            // if there's no unit, report an error\n            else {\n              attrs['defError_'] = true;\n              console.log(`unit definition error; code = ${attrs['csCode_']}; `+\n                          `msg = ${retMsg}`);\n              attrs['dim_'] = null;\n              attrs['magnitude_'] = null;\n            }\n          }\n          catch(err) {\n            console.log('error thrown from unit parsing code for unit name ' +\n                        attrs['name_'] + '\\n' + err.message);\n            stopNow = true;\n          }\n        } // end if there is a unit string to parse\n      } // end if this is not a dimless unit\n\n      if (haveUnit) {\n        // Now create the unit we want based on the attributes we've\n        // accumulated from the xml input and from figuring the dimension\n        // and magnitude.  Add it to the unit tables\n        let newUnit = new Unit(attrs);\n        utab.addUnit(newUnit);\n\n        // for now, create a list of the units created and save it to a file\n        // for debugging.  This is a temporary file.\n        let uList = utab.printUnits();\n        fs.writeFileSync('UnitsList.txt', uList,\n            {encoding: 'utf8', mode: 0o666, flag: 'w'});\n      } // end if have a parsed unit\n    } // end for a => - to alen\n\n  } // end parseUnitStrings\n\n\n  /**\n   * This writes out the ucumDefs data file, which contains all prefixes and\n   * units (base units and others) read and parsed from the XML file.\n   *\n   * This creates or replace the file \"ucumDefs.json\" in the data directory.\n   */\n  writeJsonFile() {\n\n    let licenseText = \"The following data (prefixes and units) was generated \" +\n                      \"by the UCUM LHC code from the UCUM data and selected \" +\n                      \"LOINC combinations of UCUM units.  The license for \" +\n                      \"the UCUM LHC code (demo and library code as well as \" +\n                      \"the combined units) is located at \" +\n                      \"https://github.com/lhncbc/ucum-lhc/blob/LICENSE.md.\" ;\n    let pfxTabs = PrefixTables.getInstance() ;\n    let pfxArray = pfxTabs.allPrefixesByCode();\n    let uTabs = UnitTables.getInstance();\n    let uArray = uTabs.allUnitsByDef();\n\n    let defsHash = { 'license' : licenseText,\n                     'prefixes' : packArray(pfxArray),\n                     'units' : packArray(uArray)};\n    let dt = new Date();\n    jsonfile.writeFileSync('../data/ucumDefs.json',\n                           defsHash,\n                           {spaces: 2, encoding: 'utf8', mode: 0o644, flag: 'w'});\n    jsonfile.writeFileSync('../data/ucumDefs.min.json',\n                           defsHash,\n                           {encoding: 'utf8', mode: 0o644, flag: 'w'});\n  } // end writeJsonFile\n\n  /**\n   * This writes out the ucumDefs data file, which contains all prefixes and\n   * units (base units and others) read and parsed from the XML file.\n   *\n   * This creates the file in the data directory and appends the\n   * current Date object value to \"ucumDefs\" so that this does not run\n   * into problems with a previously existing file.\n   */\n  writeVersionText() {\n\n    let rootNode = xmlInput_;\n    let versionNum = rootNode.attr.version;\n    let revNum = rootNode.attr.revision;\n    revNum = revNum.replace('$Revision:', '');\n    revNum = revNum.replace('$', '');\n    revNum = revNum.trim();\n    let rootString = rootNode.toString({compressed:true});\n    let dateIdx = rootString.indexOf('$Date:');\n    rootString = rootString.substr(dateIdx + 6);\n    let nextDolIdx = rootString.indexOf('$');\n    let revDate = rootString.substr(0, nextDolIdx ).replace('$','');\n    revDate = revDate.trim();\n    let versionText = `version ${versionNum}, revision ${revNum}, ` +\n             `dated ${revDate}`;\n\n    fs.writeFileSync('../data/ucumEssenceVersion.txt',\n      versionText, {encoding: 'utf8', mode: 0o644, flag: 'w'});\n  } // end writeVersionText\n\n} // end UcumXmlDocument\n\n\n/**\n *  This function exists ONLY until the original UcumXmlDocument constructor\n *  is called for the first time.  It's defined here in case getInstance\n *  is called before the constructor.   This calls the constructor.\n *\n *  The constructor redefines the getInstance function to return the\n *  singleton UcumXmlDocument object.  This is based on the UnitTables singleton\n *  implementation; see more detail in the UnitTables constructor description.\n *\n *  @return the singleton UcumXmlDocument object.\n */\nUcumXmlDocument.getInstance = function(){\n  return new UcumXmlDocument();\n}\n\n// Perform the first request for the document object, to get the\n// getInstance method set.\nUcumXmlDocument.getInstance();"],"file":"ucumXmlDocument.js"}