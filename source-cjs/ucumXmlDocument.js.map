{"version":3,"file":"ucumXmlDocument.js","names":["Prefix","require","PrefixTables","Unit","UnitString","UnitTables","packArray","jsonfile","xmldoc","fs","essenceFile_","xmlInput_","UcumXmlDocument","constructor","data","readFileSync","XmlDocument","moleCodes_","holdThis","prototype","exports","Error","self","getInstance","parseXml","parsePrefixes","childrenNamed","parseBaseUnits","parseUnitStrings","writeJsonFile","writeVersionText","prefixes","plen","length","p","curPfx","attrs","attr","Code","CODE","childNamed","val","pValNode","parseFloat","ptab","isDefined","newPref","add","unitNodes","blen","utab","b","curBUnit","dim","newUnit","addUnit","unitStrings","uStrParser","stopNow","alen","a","haveUnit","curUA","toUpperCase","sym","symVal","replace","trim","symI","toString","compressed","sub","sup","isMetric","isArbitrary","class","valNode","indexOf","isSpecial","funcNode","name","value","slashPos","ar","split","Math","pow","UNIT","substr","exp","parseInt","console","log","PI","retObj","parseString","ret","retString","retMsg","getProperty","newMag","err","message","uList","printUnits","writeFileSync","encoding","mode","flag","licenseText","pfxTabs","pfxArray","allPrefixesByCode","uTabs","uArray","allUnitsByDef","defsHash","dt","Date","spaces","rootNode","versionNum","version","revNum","revision","rootString","dateIdx","nextDolIdx","revDate","versionText"],"sources":["../source/ucumXmlDocument.js"],"sourcesContent":["/**\n * This class handles opening, reading and parsing the XML file of ucum\n * definitions (prefixes, base units, and unit atoms).\n *\n * @author Lee Mericle\n *\n */\nvar Prefix = require(\"./prefix.js\").Prefix;\nvar PrefixTables = require(\"./prefixTables.js\").PrefixTables;\nvar Unit = require(\"./unit.js\").Unit;\nvar UnitString = require(\"./unitString.js\").UnitString;\nvar UnitTables = require('./unitTables.js').UnitTables;\nvar packArray = require('./jsonArrayPack.js').packArray;\nvar jsonfile = require('jsonfile');\n\nvar xmldoc = require('xmldoc');\nvar fs = require('fs');\n\nvar essenceFile_ = '../data/ucum-essence.xml';\n\n/**\n * The full xml document\n * @type XmlDocument\n */\nvar xmlInput_ = null;\n\nexport class UcumXmlDocument {\n\n\n  /**\n   * Constructor.  This reads the XML document (essenceFile_) into the\n   * xmldoc object, which is an object used by the xmldoc class available\n   * from GitHub - https://github.com/nfarina/xmldoc.  The object provides\n   * methods to read the file and access its contents.\n   *\n   */\n  constructor() {\n    // read the XML file and create an xmlDocument object from it.\n    let data = fs.readFileSync(essenceFile_);\n    xmlInput_ = new xmldoc.XmlDocument(data);\n\n    // Array of unit codes in the ucum-essence.xml file that indicate a\n    // mole based unit.  The moleExp_ attribute for these units needs to be\n    // set, but there doesn't seem to be an algorithmic way to find these.\n    // Creation of unit objects after this file is processed will pick up\n    // the moleExp_ value from the base mole unit, but the ones defined in\n    // this file will not necessarily do that.\n    this.moleCodes_ = ['mol', 'eq', 'osm', 'kat', 'U' ];\n\n    // Make this a singleton.  See UnitTables constructor for details.\n\n    let holdThis = UcumXmlDocument.prototype;\n    UcumXmlDocument = function () {\n      throw (new Error('UcumXmlDocument is a Singleton.  ' +\n          'Use UcumXmlDocument.getInstance() instead.'));\n    };\n    if (exports)\n      exports.UcumXmlDocument = UcumXmlDocument;\n    UcumXmlDocument.prototype = holdThis;\n\n    let self = this ;\n    UcumXmlDocument.getInstance = function(){return self} ;\n  }\n\n\n  /**\n   * This method controls parsing of the XML into objects used by this\n   * program.  It uses separate methods to parse the prefixes, the\n   * base units, and the units.\n   *\n   * @returns nothing\n   */\n  parseXml() {\n\n    this.parsePrefixes(xmlInput_.childrenNamed(\"prefix\"));\n    this.parseBaseUnits(xmlInput_.childrenNamed(\"base-unit\")) ;\n    this.parseUnitStrings(xmlInput_.childrenNamed(\"unit\")) ;\n\n    // Create or replace the json file of the prefix and unit definitions\n    this.writeJsonFile();\n    this.writeVersionText();\n\n  }\n\n\n  /**\n   * Creates prefix objects from the xml prefix nodes passed in and gets\n   * them added to the prefix tables.\n   *\n   * @params prefixes the array of prefix nodes from the xml file, in the\n   *  order in which the nodes are defined in that file.\n   *\n   * @returns nothing\n   */\n  parsePrefixes(prefixes) {\n\n\n    let plen = prefixes.length ;\n\n    for (let p = 0; p < plen; p++) {\n      let curPfx = prefixes[p];\n      let attrs = {} ;\n\n      attrs[\"code_\"] = curPfx.attr.Code;\n      attrs[\"ciCode_\"] = curPfx.attr.CODE;\n      attrs[\"name_\"] = curPfx.childNamed('name').val;\n      attrs[\"printSymbol_\"] = curPfx.childNamed('printSymbol').val;\n\n      // Set the prefix value.  If there is a <sup> element in the\n      // value node, then this is a base 10 based prefix (10 to the x power).\n      // Set the value to 10 taken to the indicated power.\n      // Otherwise this is not 10 based and the value contains the\n      // actual value for the prefix.\n      let pValNode = curPfx.childNamed('value') ;\n      attrs[\"value_\"] = null;\n      attrs[\"exp_\"] = pValNode.childNamed('sup');\n      if (attrs[\"exp_\"] != null) {\n        attrs[\"exp_\"] = attrs[\"exp_\"].val;\n        // Use parseFloat('1eSOMETHING') instead of Math.pow() to avoid\n        // small number changes like 1.0000000000000001e-21. See LF-2830.\n        // attrs[\"value_\"] = Math.pow(10, attrs[\"exp_\"]);\n        attrs[\"value_\"] = parseFloat(`1e${attrs[\"exp_\"]}`);\n      }\n      else {\n        attrs[\"value_\"] = pValNode.val;\n        attrs[\"exp_\"] = null;\n      }\n\n      // Make sure the prefix has not already been created.  If it hasn't,\n      // create the prefix object and then add it to the prefix tables.\n      let ptab = PrefixTables.getInstance();\n      if (ptab.isDefined(attrs[\"code_\"])) {\n        throw(new Error('Prefix constructor called for prefix already ' +\n                        `defined; code = ${attrs[\"code_\"]}`));\n      }\n      else {\n        let newPref = new Prefix(attrs);\n        ptab.add(newPref);\n      }\n    }\n  } // end parsePrefixes\n\n\n  /**\n   * Creates base unit objects from the xml nodes passed in and adds\n   * them to the unit tables.\n   *\n   * @params unitNodes the array of base unit nodes from the xml file, in the\n   *  order in which the nodes are defined in that file.  (Order is important\n   *  for all units).\n   *\n   * @returns nothing\n   */\n  parseBaseUnits(unitNodes) {\n    let blen = unitNodes.length ;\n    let utab = UnitTables.getInstance() ;\n    for (let b = 0; b < blen; b++) {\n      let curBUnit = unitNodes[b];\n      let attrs = {} ;\n      attrs['isBase_'] = true ;\n      attrs['name_'] = curBUnit.childNamed('name').val ;\n      attrs['csCode_'] = curBUnit.attr.Code ;\n      attrs['ciCode_'] = curBUnit.attr.CODE ;\n      attrs['property_'] = curBUnit.childNamed('property').val;\n      attrs['variable_'] = curBUnit.attr.dim ;\n      attrs['printSymbol_'] = curBUnit.childNamed('printSymbol').val;\n      attrs['dim_'] = b ;\n      attrs['source_'] = 'UCUM';\n      let newUnit = new Unit(attrs);\n      utab.addUnit(newUnit) ;\n    }\n  } // end parseBaseUnits\n\n\n  /**\n   * Creates non-base unit objects from the xml nodes passed in and adds\n   * them to the unit tables.\n   *\n   * @params unitStrings the array of non-base unit nodes from the xml file, in the\n   *  order in which the nodes are defined in that file.  (Order is important\n   *  for all units).\n   *\n   * @returns nothing\n   */\n  parseUnitStrings(unitStrings) {\n\n    let utab = UnitTables.getInstance() ;\n    let uStrParser = UnitString.getInstance();\n    let stopNow = false ;\n    let alen = unitStrings.length ;\n    for (let a = 0; a < alen && !stopNow; a++) {\n      let haveUnit = true;\n      let curUA = unitStrings[a];\n      let attrs = {};\n      attrs['isBase_'] = false;\n      attrs['source_'] = 'UCUM';\n      attrs['name_'] = curUA.childNamed('name').val;\n      attrs['csCode_'] = curUA.attr.Code;\n      if (curUA.attr.CODE)\n        attrs['ciCode_'] = curUA.attr.CODE;\n      else\n        attrs['ciCode_'] = curUA.attr.Code.toUpperCase();\n      attrs['property_'] = curUA.childNamed('property').val;\n      if (curUA.childNamed('printSymbol')) {\n        let sym = curUA.childNamed('printSymbol') ;\n        let symVal = sym.val;\n        symVal = symVal.replace(/\\n/g, \"\");\n        symVal = symVal.trim();\n        let symI = sym.childNamed('i');\n        if (symI)\n          //symVal = '<i>' + symI.val + '</>';\n          symVal = symI.toString({compressed:true});\n        let sub = sym.childNamed('sub');\n        let sup = sym.childNamed('sup');\n        if (sub)\n          symVal += sub.toString({compressed:true});\n        if (sup)\n          symVal += sup.toString({compressed:true});\n\n        attrs['printSymbol_'] = symVal;\n      }\n      if (curUA.attr.isMetric === \"yes\")\n        attrs['isMetric_'] = true ;\n      else\n        attrs['isMetric_'] = false ;\n      if (curUA.attr.isArbitrary)\n        attrs['isArbitrary_'] = true ;\n      else\n        attrs['isArbitrary_'] = false ;\n      if (curUA.attr.class) {\n        attrs['class_'] = curUA.attr.class;\n      }\n      let valNode = curUA.childNamed('value');\n      if (this.moleCodes_.indexOf(curUA.attr.Code) !== -1)\n        attrs['moleExp_'] = 1;\n      else\n        attrs['moleExp_'] = 0;\n\n\n      // Process special units\n      if (curUA.attr.isSpecial) {\n        attrs['isSpecial_'] = curUA.attr.isSpecial === \"yes\";\n        let funcNode = valNode.childNamed('function');\n        attrs['cnv_'] = funcNode.attr.name;\n        attrs['csUnitString_'] = funcNode.attr.Unit;\n        if (attrs['csUnitString_'] === '1') {\n          attrs['baseFactor_'] = 1 ;\n        }\n        else if (attrs['csCode_'] === '[pH]') {\n          attrs['baseFactor_'] = parseFloat(funcNode.attr.value) ;\n        }\n        else {\n          let slashPos = attrs['csUnitString_'].indexOf('/');\n          let ar = [];\n\n          // unit string = K/9 or K/4 or m2/s4/Hz\n          if (slashPos >= 0) {\n            ar = attrs['csUnitString_'].split('/');\n          }\n          // unit string = K/9 or K/4\n          if ((slashPos >= 0) && (ar.length === 2)) {\n            attrs['csUnitString_'] = ar[0];\n            attrs['baseFactor_'] = parseFloat(funcNode.attr.value/ar[1]);\n          }\n          // unit string = 10*-5.Pa\n          else if (attrs['csCode_'] === 'B[SPL]') {\n            attrs['baseFactor_'] =  Math.pow(10, -5) * 2 ;\n            attrs['csUnitString_'] = \"Pa\" ;\n          }\n          // unit string = m1/s4/Hz, K, deg, V, mV, uV, nV, W, kW\n          else {\n            attrs['baseFactor_'] = parseFloat(funcNode.attr.value);\n          }\n        } // end if the unit string is not 1\n      } // end if the unit is special\n\n      else {\n        // what I'm calling the unit string is the string that defines the\n        // unit based on other units, e.g., rad2 (radian squared) to define\n        // a steradian unit.  It's not necessarily a proper base unit, although\n        // it ultimately builds on base units.\n        attrs['csUnitString_'] = valNode.attr.Unit;\n        attrs['ciUnitString_'] = valNode.attr.UNIT;\n\n        // what I'm calling the factor here (string and number versions)\n        // is the magnitude used in conjunction with the unit string to define\n        // the new unit, e.g., 3 for a yard that is based in the definition\n        // of feet.\n\n        attrs['baseFactorStr_'] = valNode.attr.value;\n        if (attrs['csCode_'] === '[pi]')\n          attrs['baseFactor_'] = parseFloat(attrs['baseFactorStr_']);\n        else if (valNode.childNamed('sup')) {\n          attrs['baseFactor_'] = parseFloat(valNode.attr.value) ;\n        }\n        else {\n          attrs['baseFactor_'] = parseFloat(valNode.val);\n        }\n      } // end if this is not a special unit\n\n      // Arbitrary units are defined in the UCUM spec as \"not of any\n      // specific dimension and are not commensurable with any other\n      // unit\" (3.2.24).  All arbitrary units in the units definition\n      // XML file currently have a unit string of 1 and a base factor of 1\n      // except the \"international unit\" with a code of [IU].  Its\n      // unit string is the \"international unit\" with a code of [iU],\n      // which is also an arbitrary unit - with a unit string of 1.\n      // So I am assuming [IU] is just another code for the same unit.\n      if (attrs['isArbitrary_'] === true) {\n        attrs['magnitude_'] = 1;\n        attrs['dim_'] = null;\n      }\n\n      // units with class = \"dimless\" don't have dimension arrays.\n      // They're things like the number pi or the number 10 or percent.\n      // Haven't figured out how to handle them yet.\n      else if (attrs['class_'] === 'dimless' ||\n               attrs['csCode_'] === 'mol') {\n        attrs['dim_'] = null ;\n        // figure the magnitude based on the unit string\n        // if it's 1, the magnitude is the value specified for\n        // the base factor, e.g., 3.141592653589793238462 ... for pi\n        if (attrs['csUnitString_'] === '1') {\n          attrs['magnitude_'] = attrs['baseFactor_'];\n        }\n        // else if the unit string starts with 10*, the magnitude is\n        // 10 to the power specified following 10* e.g., unit = 10*-2\n        // for the \"%\" unit.  Except for the mole, which is that\n        // multiplied by the base factor, which in this case (only,\n        // I think) is not 1.\n        else if (attrs['csUnitString_'].substr(0,3) == \"10*\") {\n          let exp = parseInt(attrs['csUnitString_'].substr(3));\n          attrs['magnitude_'] = Math.pow(10, exp) ;\n          if (attrs['baseFactor_'] !== 1) {\n            attrs['magnitude_'] *= attrs['baseFactor_'];\n          }\n        }\n        // else I don't know what it is.\n        else {\n          attrs['defError_'] = true ;\n          console.log('unexpected dimless unit definition, unit code ' +\n                      'is ' + attrs['csCode_']) ;\n        }\n      } // end if this is a unit with class = dimless\n\n      // Handle carat of gold alloys - which doesn't get a dimension\n      //\n      else if (attrs['csCode_'] === \"[car_Au]\") {\n        attrs['magnitude_'] = 1/24 ;\n        attrs['dim_'] = null ;\n      }\n      else {\n\n        // Make sure there's a unit string to base the new unit on.  There\n        // should be, but I'm just checking here to make sure.  And omit\n        // ones with a unit string of 1.  That won't do us any good.\n        if (attrs['csUnitString_'] && attrs['csUnitString_'] !== '1' &&\n            attrs['csUnitString_'] !== 1) {\n\n          haveUnit = false;\n          // Handle some special cases\n          // 1. the Oersted unit, whose string is /[pi].A/m and whose\n          //    value is 250.  Set the baseFactor to 250/[pi] and\n          //    the unit string to A/m\n          if (attrs['csCode_'] === 'Oe') {\n            attrs['baseFactor_'] = 250 / Math.PI;\n            attrs['csUnitString_'] = \"A/m\"\n          }\n          // 2.  Strings that start with '/'.  Set the function to\n          //     the inverse function and trim the '/' off the front\n          //     of the string.\n          else if (attrs['csUnitString_'][0] === '/') {\n            attrs['cnv_'] = 'inv';\n            attrs['csUnitString_'] = attrs['csUnitString_'].substr(1);\n          }\n          // 3.  the Svedberg unit, whose string is 10*-13.s.  Set the\n          //     base factor to 10*-13 and the unit string to s.\n          else if (attrs['csCode_'] === '[S]') {\n            attrs['baseFactor_'] = Math.pow(10, -13);\n            attrs['csUnitString_'] = 's';\n          }\n          // 4.  permeability of vaccuum - code [mu_0], unit given is\n          //     4.[pi].10*-7.N/A2\n          else if (attrs['csCode_'] === '[mu_0]') {\n            attrs['baseFactor_'] = 4 * Math.PI * Math.pow(10, -7);\n            attrs['csUnitString_'] = 'N/A2';\n          }\n          // The unit string parser will use the unit(s) named in the\n          // string to create a new unit with the appropriate dimension\n          // object and magnitude before it's multiplied by the one\n          // specified in the input node.\n          try {\n            let retObj = uStrParser.parseString(attrs['csUnitString_'],\n                                                'validate', false);\n            let ret = retObj[0];\n            let retString = retObj[1];\n            let retMsg = retObj[2];\n\n            // Get the dimension object and magnitude (and adjust by\n            // specified magnitude factor) from the unit created and\n            // assign them to the attributes we'll use to create the\n            // unit for this listing.\n            if (ret) {\n              attrs['dim_'] = ret.getProperty('dim_');\n              let newMag = ret.getProperty('magnitude_');\n              newMag *= attrs['baseFactor_'];\n              attrs['magnitude_'] = newMag;\n              haveUnit = true ;\n            }\n            // if there's no unit, report an error\n            else {\n              attrs['defError_'] = true;\n              console.log(`unit definition error; code = ${attrs['csCode_']}; `+\n                          `msg = ${retMsg}`);\n              attrs['dim_'] = null;\n              attrs['magnitude_'] = null;\n            }\n          }\n          catch(err) {\n            console.log('error thrown from unit parsing code for unit name ' +\n                        attrs['name_'] + '\\n' + err.message);\n            stopNow = true;\n          }\n        } // end if there is a unit string to parse\n      } // end if this is not a dimless unit\n\n      if (haveUnit) {\n        // Now create the unit we want based on the attributes we've\n        // accumulated from the xml input and from figuring the dimension\n        // and magnitude.  Add it to the unit tables\n        let newUnit = new Unit(attrs);\n        utab.addUnit(newUnit);\n\n        // for now, create a list of the units created and save it to a file\n        // for debugging.  This is a temporary file.\n        let uList = utab.printUnits();\n        fs.writeFileSync('UnitsList.txt', uList,\n            {encoding: 'utf8', mode: 0o666, flag: 'w'});\n      } // end if have a parsed unit\n    } // end for a => - to alen\n\n  } // end parseUnitStrings\n\n\n  /**\n   * This writes out the ucumDefs data file, which contains all prefixes and\n   * units (base units and others) read and parsed from the XML file.\n   *\n   * This creates or replace the file \"ucumDefs.json\" in the data directory.\n   */\n  writeJsonFile() {\n\n    let licenseText = \"The following data (prefixes and units) was generated \" +\n                      \"by the UCUM LHC code from the UCUM data and selected \" +\n                      \"LOINC combinations of UCUM units.  The license for \" +\n                      \"the UCUM LHC code (demo and library code as well as \" +\n                      \"the combined units) is located at \" +\n                      \"https://github.com/lhncbc/ucum-lhc/blob/LICENSE.md.\" ;\n    let pfxTabs = PrefixTables.getInstance() ;\n    let pfxArray = pfxTabs.allPrefixesByCode();\n    let uTabs = UnitTables.getInstance();\n    let uArray = uTabs.allUnitsByDef();\n\n    let defsHash = { 'license' : licenseText,\n                     'prefixes' : packArray(pfxArray),\n                     'units' : packArray(uArray)};\n    let dt = new Date();\n    jsonfile.writeFileSync('../data/ucumDefs.json',\n                           defsHash,\n                           {spaces: 2, encoding: 'utf8', mode: 0o644, flag: 'w'});\n    jsonfile.writeFileSync('../data/ucumDefs.min.json',\n                           defsHash,\n                           {encoding: 'utf8', mode: 0o644, flag: 'w'});\n  } // end writeJsonFile\n\n  /**\n   * This writes out the ucumDefs data file, which contains all prefixes and\n   * units (base units and others) read and parsed from the XML file.\n   *\n   * This creates the file in the data directory and appends the\n   * current Date object value to \"ucumDefs\" so that this does not run\n   * into problems with a previously existing file.\n   */\n  writeVersionText() {\n\n    let rootNode = xmlInput_;\n    let versionNum = rootNode.attr.version;\n    let revNum = rootNode.attr.revision;\n    revNum = revNum.replace('$Revision:', '');\n    revNum = revNum.replace('$', '');\n    revNum = revNum.trim();\n    let rootString = rootNode.toString({compressed:true});\n    let dateIdx = rootString.indexOf('$Date:');\n    rootString = rootString.substr(dateIdx + 6);\n    let nextDolIdx = rootString.indexOf('$');\n    let revDate = rootString.substr(0, nextDolIdx ).replace('$','');\n    revDate = revDate.trim();\n    let versionText = `version ${versionNum}, revision ${revNum}, ` +\n             `dated ${revDate}`;\n\n    fs.writeFileSync('../data/ucumEssenceVersion.txt',\n      versionText, {encoding: 'utf8', mode: 0o644, flag: 'w'});\n  } // end writeVersionText\n\n} // end UcumXmlDocument\n\n\n/**\n *  This function exists ONLY until the original UcumXmlDocument constructor\n *  is called for the first time.  It's defined here in case getInstance\n *  is called before the constructor.   This calls the constructor.\n *\n *  The constructor redefines the getInstance function to return the\n *  singleton UcumXmlDocument object.  This is based on the UnitTables singleton\n *  implementation; see more detail in the UnitTables constructor description.\n *\n *  @return the singleton UcumXmlDocument object.\n */\nUcumXmlDocument.getInstance = function(){\n  return new UcumXmlDocument();\n}\n\n// Perform the first request for the document object, to get the\n// getInstance method set.\nUcumXmlDocument.getInstance();\n"],"mappings":"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"}