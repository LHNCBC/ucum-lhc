{"version":3,"file":"prefix.js","names":["Ucum","require","Prefix","constructor","attrs","undefined","Error","code_","ciCode_","name_","printSymbol_","value_","parseFloat","exp_","getValue","getCode","getCiCode","getName","getPrintSymbol","getExp","equals","prefix2","exports"],"sources":["../source/prefix.js"],"sourcesContent":["/**\n * Prefix objects are defined in this file.\n */\n\n/**\n * This class implements the prefix object.  Prefixes are used as multipliers\n * for units, e.g., km for kilometers\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nvar Ucum = require('./config.js');\n\nexport class Prefix {\n\n  /**\n   * Creates a single prefix object.\n   *\n   * @param attrs a hash of the values to use in creating the prefix object.\n   *  They should be:\n   *   code_ - which is the case-sensitive code used for the prefix,\n   *    e.g., k for kilo\n   *   ciCode_ - which is the case-insensitive code used for the prefix,\n   *    e.g., K for kilo\n   *   name_ - which is the name of the prefix, e.g., kilo\n   *   printSymbol_ - which is the print symbol for the prefix, e.g., k for kilo\n   *   value_ - which is teh value to use in multiplying the magnitude of\n   *    a unit, e.g., for a prefix of c the value will be .01.\n   *   exp_ - which is the exponent used to get the value. For decimal based\n   *    prefixes the base is 10 and the exp_ is applied to 10, e.g., for a\n   *    prefix of c, the exponent will be -2.  For prefixes that are not\n   *    decimal based, this will be null (but must not be undefined).\n   *\n   * @throws an error if the not all required parameters are provided\n   */\n  constructor(attrs) {\n\n    if (attrs['code_'] === undefined || attrs['code_'] === null ||\n        attrs['name_'] === undefined || attrs['name_'] === null ||\n        attrs['value_'] === undefined || attrs['value_'] === null ||\n        attrs['exp_'] === undefined) {\n      throw(new Error('Prefix constructor called missing one or more parameters.  ' +\n      'Prefix codes (cs or ci), name, value and exponent must all be specified ' +\n      'and all but the exponent must not be null.'));\n    }\n\n    /**\n     * The prefix code, e.g., k for kilo.  This should be the case-sensitive\n     * code.  Since there's no way to check to see if it's the case-sensitive\n     * one as opposed to the case-insensitive one (because although\n     * case-insensitive codes all seem to be uppercase, some case-sensitive\n     * codes are also all uppercase), we'll just have to believe that the\n     * right one was passed in.\n     */\n    this.code_ = attrs['code_'];\n\n    /**\n     * The case-insensitive code, e.g., K for kilo\n     */\n    this.ciCode_ = attrs['ciCode_'];\n\n    /**\n     * The prefix name, e.g., kilo\n     */\n    this.name_ = attrs['name_'];\n\n    /**\n     * The printSymbol for the prefix, e.g., k for kilo\n     */\n    this.printSymbol_ = attrs['printSymbol_'];\n\n    /**\n     * The value to use in multiplying the magnitude of a unit\n     */\n    if (typeof attrs['value_'] === 'string')\n      this.value_ = parseFloat(attrs['value_']);\n    else\n      this.value_ = attrs['value_'] ;\n\n    /**\n     * The exponent used to create the value from 10.  For prefixes that are\n     * not based on 10, this will be null.\n     */\n    this.exp_ = attrs['exp_'] ;\n\n  } // end constructor\n\n\n  /**\n   * Returns the value for the current prefix object\n   * @return the value for the prefix object with the specified code\n   * */\n  getValue() {\n    return this.value_;\n  }\n\n\n  /**\n   * Returns the prefix code for the current prefix object\n   * @return the code for the current prefix object\n   */\n  getCode() {\n    return this.code_;\n  }\n\n\n  /**\n   * Returns the case-insensitive code for the current prefix object\n   * @return the case_insensitive code for the current prefix object\n   */\n  getCiCode() {\n    return this.ciCode_;\n  }\n\n\n  /**\n   * Returns the prefix name for the current prefix object\n   * @return the name for the current prefix object\n   */\n  getName() {\n    return this.name_;\n  }\n\n\n  /**\n   * Returns the print symbol for the current prefix object\n   * @return the print symbol for the current prefix object\n   */\n  getPrintSymbol() {\n    return this.printSymbol_;\n  }\n\n\n  /**\n   * Returns the exponent for the current prefix object\n   * @return the exponent for the current prefix object\n   */\n  getExp() {\n    return this.exp_;\n  }\n\n\n  /**\n   * Provides way to tell if one prefix equals another.  The second prefix\n   * must match all attribute values.\n   *\n   * @param prefix2 prefix object to check for a match\n   * @return true for a match; false if one or more attributes don't match\n   */\n  equals(prefix2) {\n    return this.code_ === prefix2.code_ &&\n            this.ciCode_ === prefix2.ciCode_ &&\n            this.name_ === prefix2.name_ &&\n            this.printSymbol_ === prefix2.printSymbol_ &&\n            this.value_ === prefix2.value_ &&\n            this.exp_ === prefix2.exp_ ;\n  }\n} // end Prefix class\n"],"mappings":";;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,aAAa,CAAC;AAE1B,MAAMC,MAAM,CAAC;EAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,KAAK,EAAE;IAEjB,IAAIA,KAAK,CAAC,OAAO,CAAC,KAAKC,SAAS,IAAID,KAAK,CAAC,OAAO,CAAC,KAAK,IAAI,IACvDA,KAAK,CAAC,OAAO,CAAC,KAAKC,SAAS,IAAID,KAAK,CAAC,OAAO,CAAC,KAAK,IAAI,IACvDA,KAAK,CAAC,QAAQ,CAAC,KAAKC,SAAS,IAAID,KAAK,CAAC,QAAQ,CAAC,KAAK,IAAI,IACzDA,KAAK,CAAC,MAAM,CAAC,KAAKC,SAAS,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,6DAA6D,GAC7E,0EAA0E,GAC1E,4CAA4C,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAGH,KAAK,CAAC,OAAO,CAAC;;IAE3B;AACJ;AACA;IACI,IAAI,CAACI,OAAO,GAAGJ,KAAK,CAAC,SAAS,CAAC;;IAE/B;AACJ;AACA;IACI,IAAI,CAACK,KAAK,GAAGL,KAAK,CAAC,OAAO,CAAC;;IAE3B;AACJ;AACA;IACI,IAAI,CAACM,YAAY,GAAGN,KAAK,CAAC,cAAc,CAAC;;IAEzC;AACJ;AACA;IACI,IAAI,OAAOA,KAAK,CAAC,QAAQ,CAAC,KAAK,QAAQ,EACrC,IAAI,CAACO,MAAM,GAAGC,UAAU,CAACR,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAE1C,IAAI,CAACO,MAAM,GAAGP,KAAK,CAAC,QAAQ,CAAC;;IAE/B;AACJ;AACA;AACA;IACI,IAAI,CAACS,IAAI,GAAGT,KAAK,CAAC,MAAM,CAAC;EAE3B,CAAC,CAAC;;EAGF;AACF;AACA;AACA;EACEU,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACH,MAAM;EACpB;;EAGA;AACF;AACA;AACA;EACEI,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACR,KAAK;EACnB;;EAGA;AACF;AACA;AACA;EACES,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACR,OAAO;EACrB;;EAGA;AACF;AACA;AACA;EACES,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACR,KAAK;EACnB;;EAGA;AACF;AACA;AACA;EACES,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACR,YAAY;EAC1B;;EAGA;AACF;AACA;AACA;EACES,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACN,IAAI;EAClB;;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,MAAMA,CAACC,OAAO,EAAE;IACd,OAAO,IAAI,CAACd,KAAK,KAAKc,OAAO,CAACd,KAAK,IAC3B,IAAI,CAACC,OAAO,KAAKa,OAAO,CAACb,OAAO,IAChC,IAAI,CAACC,KAAK,KAAKY,OAAO,CAACZ,KAAK,IAC5B,IAAI,CAACC,YAAY,KAAKW,OAAO,CAACX,YAAY,IAC1C,IAAI,CAACC,MAAM,KAAKU,OAAO,CAACV,MAAM,IAC9B,IAAI,CAACE,IAAI,KAAKQ,OAAO,CAACR,IAAI;EACpC;AACF,CAAC,CAAC;AAAAS,OAAA,CAAApB,MAAA,GAAAA,MAAA"}